{{- if .Values.server.useMTLS }}
apiVersion: v1
kind: Secret
metadata:
  name: {{ .Release.Name }}-client-tls
  labels:
    app: {{ .Release.Name }}
type: kubernetes.io/tls
data:
  {{- if .Values.mtls.clientCert.data }}
  tls.crt: {{ .Values.mtls.clientCert.data | b64enc }}
  {{- else if .Values.mtls.clientCert.secretName }}
  # Client certificate will be mounted from existing secret: {{ .Values.mtls.clientCert.secretName }}
  {{- else }}
  {{- fail "mTLS is enabled but no client certificate provided. Set either mtls.clientCert.data or mtls.clientCert.secretName" }}
  {{- end }}
  
  {{- if .Values.mtls.clientKey.data }}
  tls.key: {{ .Values.mtls.clientKey.data | b64enc }}
  {{- else if .Values.mtls.clientKey.secretName }}
  # Client key will be mounted from existing secret: {{ .Values.mtls.clientKey.secretName }}
  {{- else }}
  {{- fail "mTLS is enabled but no client key provided. Set either mtls.clientKey.data or mtls.clientKey.secretName" }}
  {{- end }}
  
  {{- if .Values.mtls.caCert.data }}
  ca.crt: {{ .Values.mtls.caCert.data | b64enc }}
  {{- else if .Values.mtls.caCert.secretName }}
  # CA certificate will be mounted from existing secret: {{ .Values.mtls.caCert.secretName }}
  {{- else }}
  {{- fail "mTLS is enabled but no CA certificate provided. Set either mtls.caCert.data or mtls.caCert.secretName" }}
  {{- end }}
{{- end }}
