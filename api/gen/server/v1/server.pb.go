// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.5
// 	protoc        (unknown)
// source: server/v1/server.proto

package v1

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	wrapperspb "google.golang.org/protobuf/types/known/wrapperspb"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Policy Review Status Enum
type PolicyReviewStatus int32

const (
	PolicyReviewStatus_POLICY_REVIEW_STATUS_UNSPECIFIED PolicyReviewStatus = 0
	PolicyReviewStatus_POLICY_REVIEW_STATUS_PENDING     PolicyReviewStatus = 1
	PolicyReviewStatus_POLICY_REVIEW_STATUS_APPROVED    PolicyReviewStatus = 2
	PolicyReviewStatus_POLICY_REVIEW_STATUS_REJECTED    PolicyReviewStatus = 3
)

// Enum value maps for PolicyReviewStatus.
var (
	PolicyReviewStatus_name = map[int32]string{
		0: "POLICY_REVIEW_STATUS_UNSPECIFIED",
		1: "POLICY_REVIEW_STATUS_PENDING",
		2: "POLICY_REVIEW_STATUS_APPROVED",
		3: "POLICY_REVIEW_STATUS_REJECTED",
	}
	PolicyReviewStatus_value = map[string]int32{
		"POLICY_REVIEW_STATUS_UNSPECIFIED": 0,
		"POLICY_REVIEW_STATUS_PENDING":     1,
		"POLICY_REVIEW_STATUS_APPROVED":    2,
		"POLICY_REVIEW_STATUS_REJECTED":    3,
	}
)

func (x PolicyReviewStatus) Enum() *PolicyReviewStatus {
	p := new(PolicyReviewStatus)
	*p = x
	return p
}

func (x PolicyReviewStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PolicyReviewStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_server_v1_server_proto_enumTypes[0].Descriptor()
}

func (PolicyReviewStatus) Type() protoreflect.EnumType {
	return &file_server_v1_server_proto_enumTypes[0]
}

func (x PolicyReviewStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use PolicyReviewStatus.Descriptor instead.
func (PolicyReviewStatus) EnumDescriptor() ([]byte, []int) {
	return file_server_v1_server_proto_rawDescGZIP(), []int{0}
}

// Risk Assessment Status Enum
type RiskAssessmentStatus int32

const (
	RiskAssessmentStatus_RISK_ASSESSMENT_STATUS_UNSPECIFIED RiskAssessmentStatus = 0
	RiskAssessmentStatus_RISK_ASSESSMENT_STATUS_PENDING     RiskAssessmentStatus = 1
	RiskAssessmentStatus_RISK_ASSESSMENT_STATUS_RUNNING     RiskAssessmentStatus = 2
	RiskAssessmentStatus_RISK_ASSESSMENT_STATUS_COMPLETED   RiskAssessmentStatus = 3
	RiskAssessmentStatus_RISK_ASSESSMENT_STATUS_FAILED      RiskAssessmentStatus = 4
)

// Enum value maps for RiskAssessmentStatus.
var (
	RiskAssessmentStatus_name = map[int32]string{
		0: "RISK_ASSESSMENT_STATUS_UNSPECIFIED",
		1: "RISK_ASSESSMENT_STATUS_PENDING",
		2: "RISK_ASSESSMENT_STATUS_RUNNING",
		3: "RISK_ASSESSMENT_STATUS_COMPLETED",
		4: "RISK_ASSESSMENT_STATUS_FAILED",
	}
	RiskAssessmentStatus_value = map[string]int32{
		"RISK_ASSESSMENT_STATUS_UNSPECIFIED": 0,
		"RISK_ASSESSMENT_STATUS_PENDING":     1,
		"RISK_ASSESSMENT_STATUS_RUNNING":     2,
		"RISK_ASSESSMENT_STATUS_COMPLETED":   3,
		"RISK_ASSESSMENT_STATUS_FAILED":      4,
	}
)

func (x RiskAssessmentStatus) Enum() *RiskAssessmentStatus {
	p := new(RiskAssessmentStatus)
	*p = x
	return p
}

func (x RiskAssessmentStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (RiskAssessmentStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_server_v1_server_proto_enumTypes[1].Descriptor()
}

func (RiskAssessmentStatus) Type() protoreflect.EnumType {
	return &file_server_v1_server_proto_enumTypes[1]
}

func (x RiskAssessmentStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use RiskAssessmentStatus.Descriptor instead.
func (RiskAssessmentStatus) EnumDescriptor() ([]byte, []int) {
	return file_server_v1_server_proto_rawDescGZIP(), []int{1}
}

// Risk Assessment Agent Type Enum
type RiskAssessmentAgentType int32

const (
	RiskAssessmentAgentType_RISK_ASSESSMENT_AGENT_TYPE_UNSPECIFIED                 RiskAssessmentAgentType = 0
	RiskAssessmentAgentType_RISK_ASSESSMENT_AGENT_TYPE_ORCHESTRATOR                RiskAssessmentAgentType = 1
	RiskAssessmentAgentType_RISK_ASSESSMENT_AGENT_TYPE_NETWORK_POLICY              RiskAssessmentAgentType = 2
	RiskAssessmentAgentType_RISK_ASSESSMENT_AGENT_TYPE_PRIVILEGE_ESCALATION        RiskAssessmentAgentType = 3
	RiskAssessmentAgentType_RISK_ASSESSMENT_AGENT_TYPE_RBAC                        RiskAssessmentAgentType = 4
	RiskAssessmentAgentType_RISK_ASSESSMENT_AGENT_TYPE_CONTAINER_IMAGE_SECURITY    RiskAssessmentAgentType = 5
	RiskAssessmentAgentType_RISK_ASSESSMENT_AGENT_TYPE_UNRESTRICTED_RESOURCE_USAGE RiskAssessmentAgentType = 6
	RiskAssessmentAgentType_RISK_ASSESSMENT_AGENT_TYPE_STORAGE_SECURITY            RiskAssessmentAgentType = 7
)

// Enum value maps for RiskAssessmentAgentType.
var (
	RiskAssessmentAgentType_name = map[int32]string{
		0: "RISK_ASSESSMENT_AGENT_TYPE_UNSPECIFIED",
		1: "RISK_ASSESSMENT_AGENT_TYPE_ORCHESTRATOR",
		2: "RISK_ASSESSMENT_AGENT_TYPE_NETWORK_POLICY",
		3: "RISK_ASSESSMENT_AGENT_TYPE_PRIVILEGE_ESCALATION",
		4: "RISK_ASSESSMENT_AGENT_TYPE_RBAC",
		5: "RISK_ASSESSMENT_AGENT_TYPE_CONTAINER_IMAGE_SECURITY",
		6: "RISK_ASSESSMENT_AGENT_TYPE_UNRESTRICTED_RESOURCE_USAGE",
		7: "RISK_ASSESSMENT_AGENT_TYPE_STORAGE_SECURITY",
	}
	RiskAssessmentAgentType_value = map[string]int32{
		"RISK_ASSESSMENT_AGENT_TYPE_UNSPECIFIED":                 0,
		"RISK_ASSESSMENT_AGENT_TYPE_ORCHESTRATOR":                1,
		"RISK_ASSESSMENT_AGENT_TYPE_NETWORK_POLICY":              2,
		"RISK_ASSESSMENT_AGENT_TYPE_PRIVILEGE_ESCALATION":        3,
		"RISK_ASSESSMENT_AGENT_TYPE_RBAC":                        4,
		"RISK_ASSESSMENT_AGENT_TYPE_CONTAINER_IMAGE_SECURITY":    5,
		"RISK_ASSESSMENT_AGENT_TYPE_UNRESTRICTED_RESOURCE_USAGE": 6,
		"RISK_ASSESSMENT_AGENT_TYPE_STORAGE_SECURITY":            7,
	}
)

func (x RiskAssessmentAgentType) Enum() *RiskAssessmentAgentType {
	p := new(RiskAssessmentAgentType)
	*p = x
	return p
}

func (x RiskAssessmentAgentType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (RiskAssessmentAgentType) Descriptor() protoreflect.EnumDescriptor {
	return file_server_v1_server_proto_enumTypes[2].Descriptor()
}

func (RiskAssessmentAgentType) Type() protoreflect.EnumType {
	return &file_server_v1_server_proto_enumTypes[2]
}

func (x RiskAssessmentAgentType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use RiskAssessmentAgentType.Descriptor instead.
func (RiskAssessmentAgentType) EnumDescriptor() ([]byte, []int) {
	return file_server_v1_server_proto_rawDescGZIP(), []int{2}
}

type OnboardClusterRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	ClusterName   string                 `protobuf:"bytes,1,opt,name=cluster_name,json=clusterName,proto3" json:"cluster_name,omitempty"`
	Description   string                 `protobuf:"bytes,2,opt,name=description,proto3" json:"description,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *OnboardClusterRequest) Reset() {
	*x = OnboardClusterRequest{}
	mi := &file_server_v1_server_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *OnboardClusterRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OnboardClusterRequest) ProtoMessage() {}

func (x *OnboardClusterRequest) ProtoReflect() protoreflect.Message {
	mi := &file_server_v1_server_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OnboardClusterRequest.ProtoReflect.Descriptor instead.
func (*OnboardClusterRequest) Descriptor() ([]byte, []int) {
	return file_server_v1_server_proto_rawDescGZIP(), []int{0}
}

func (x *OnboardClusterRequest) GetClusterName() string {
	if x != nil {
		return x.ClusterName
	}
	return ""
}

func (x *OnboardClusterRequest) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

type OnboardClusterResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	AccessToken   string                 `protobuf:"bytes,1,opt,name=access_token,json=accessToken,proto3" json:"access_token,omitempty"` // JWT
	ClusterId     string                 `protobuf:"bytes,2,opt,name=cluster_id,json=clusterId,proto3" json:"cluster_id,omitempty"`       // Unique cluster identifier
	ClusterName   string                 `protobuf:"bytes,3,opt,name=cluster_name,json=clusterName,proto3" json:"cluster_name,omitempty"` // Cluster name provided by user
	ExpiresIn     int64                  `protobuf:"varint,4,opt,name=expires_in,json=expiresIn,proto3" json:"expires_in,omitempty"`      // seconds
	TokenType     string                 `protobuf:"bytes,5,opt,name=token_type,json=tokenType,proto3" json:"token_type,omitempty"`       // "Bearer"
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *OnboardClusterResponse) Reset() {
	*x = OnboardClusterResponse{}
	mi := &file_server_v1_server_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *OnboardClusterResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OnboardClusterResponse) ProtoMessage() {}

func (x *OnboardClusterResponse) ProtoReflect() protoreflect.Message {
	mi := &file_server_v1_server_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OnboardClusterResponse.ProtoReflect.Descriptor instead.
func (*OnboardClusterResponse) Descriptor() ([]byte, []int) {
	return file_server_v1_server_proto_rawDescGZIP(), []int{1}
}

func (x *OnboardClusterResponse) GetAccessToken() string {
	if x != nil {
		return x.AccessToken
	}
	return ""
}

func (x *OnboardClusterResponse) GetClusterId() string {
	if x != nil {
		return x.ClusterId
	}
	return ""
}

func (x *OnboardClusterResponse) GetClusterName() string {
	if x != nil {
		return x.ClusterName
	}
	return ""
}

func (x *OnboardClusterResponse) GetExpiresIn() int64 {
	if x != nil {
		return x.ExpiresIn
	}
	return 0
}

func (x *OnboardClusterResponse) GetTokenType() string {
	if x != nil {
		return x.TokenType
	}
	return ""
}

type RenewClusterTokenRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	CurrentToken  string                 `protobuf:"bytes,1,opt,name=current_token,json=currentToken,proto3" json:"current_token,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RenewClusterTokenRequest) Reset() {
	*x = RenewClusterTokenRequest{}
	mi := &file_server_v1_server_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RenewClusterTokenRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RenewClusterTokenRequest) ProtoMessage() {}

func (x *RenewClusterTokenRequest) ProtoReflect() protoreflect.Message {
	mi := &file_server_v1_server_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RenewClusterTokenRequest.ProtoReflect.Descriptor instead.
func (*RenewClusterTokenRequest) Descriptor() ([]byte, []int) {
	return file_server_v1_server_proto_rawDescGZIP(), []int{2}
}

func (x *RenewClusterTokenRequest) GetCurrentToken() string {
	if x != nil {
		return x.CurrentToken
	}
	return ""
}

type RenewClusterTokenResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	AccessToken   string                 `protobuf:"bytes,1,opt,name=access_token,json=accessToken,proto3" json:"access_token,omitempty"`
	ExpiresIn     int64                  `protobuf:"varint,2,opt,name=expires_in,json=expiresIn,proto3" json:"expires_in,omitempty"`
	TokenType     string                 `protobuf:"bytes,3,opt,name=token_type,json=tokenType,proto3" json:"token_type,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RenewClusterTokenResponse) Reset() {
	*x = RenewClusterTokenResponse{}
	mi := &file_server_v1_server_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RenewClusterTokenResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RenewClusterTokenResponse) ProtoMessage() {}

func (x *RenewClusterTokenResponse) ProtoReflect() protoreflect.Message {
	mi := &file_server_v1_server_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RenewClusterTokenResponse.ProtoReflect.Descriptor instead.
func (*RenewClusterTokenResponse) Descriptor() ([]byte, []int) {
	return file_server_v1_server_proto_rawDescGZIP(), []int{3}
}

func (x *RenewClusterTokenResponse) GetAccessToken() string {
	if x != nil {
		return x.AccessToken
	}
	return ""
}

func (x *RenewClusterTokenResponse) GetExpiresIn() int64 {
	if x != nil {
		return x.ExpiresIn
	}
	return 0
}

func (x *RenewClusterTokenResponse) GetTokenType() string {
	if x != nil {
		return x.TokenType
	}
	return ""
}

// Request to get a recommended network policy by ID.
// Tenant ID is passed in the gRPC request metadata.
type GetNetworkPolicyRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetNetworkPolicyRequest) Reset() {
	*x = GetNetworkPolicyRequest{}
	mi := &file_server_v1_server_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetNetworkPolicyRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetNetworkPolicyRequest) ProtoMessage() {}

func (x *GetNetworkPolicyRequest) ProtoReflect() protoreflect.Message {
	mi := &file_server_v1_server_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetNetworkPolicyRequest.ProtoReflect.Descriptor instead.
func (*GetNetworkPolicyRequest) Descriptor() ([]byte, []int) {
	return file_server_v1_server_proto_rawDescGZIP(), []int{4}
}

func (x *GetNetworkPolicyRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type GetNetworkPolicyResponse struct {
	state         protoimpl.MessageState    `protogen:"open.v1"`
	Policy        *NetworkPolicyWithCluster `protobuf:"bytes,1,opt,name=policy,proto3" json:"policy,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetNetworkPolicyResponse) Reset() {
	*x = GetNetworkPolicyResponse{}
	mi := &file_server_v1_server_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetNetworkPolicyResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetNetworkPolicyResponse) ProtoMessage() {}

func (x *GetNetworkPolicyResponse) ProtoReflect() protoreflect.Message {
	mi := &file_server_v1_server_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetNetworkPolicyResponse.ProtoReflect.Descriptor instead.
func (*GetNetworkPolicyResponse) Descriptor() ([]byte, []int) {
	return file_server_v1_server_proto_rawDescGZIP(), []int{5}
}

func (x *GetNetworkPolicyResponse) GetPolicy() *NetworkPolicyWithCluster {
	if x != nil {
		return x.Policy
	}
	return nil
}

// Request to get an existing network policy by ID.
// Tenant ID is passed in the gRPC request metadata.
type GetExistingNetworkPolicyRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetExistingNetworkPolicyRequest) Reset() {
	*x = GetExistingNetworkPolicyRequest{}
	mi := &file_server_v1_server_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetExistingNetworkPolicyRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetExistingNetworkPolicyRequest) ProtoMessage() {}

func (x *GetExistingNetworkPolicyRequest) ProtoReflect() protoreflect.Message {
	mi := &file_server_v1_server_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetExistingNetworkPolicyRequest.ProtoReflect.Descriptor instead.
func (*GetExistingNetworkPolicyRequest) Descriptor() ([]byte, []int) {
	return file_server_v1_server_proto_rawDescGZIP(), []int{6}
}

func (x *GetExistingNetworkPolicyRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type GetExistingNetworkPolicyResponse struct {
	state         protoimpl.MessageState     `protogen:"open.v1"`
	Policy        *ExistingPolicyWithCluster `protobuf:"bytes,1,opt,name=policy,proto3" json:"policy,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetExistingNetworkPolicyResponse) Reset() {
	*x = GetExistingNetworkPolicyResponse{}
	mi := &file_server_v1_server_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetExistingNetworkPolicyResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetExistingNetworkPolicyResponse) ProtoMessage() {}

func (x *GetExistingNetworkPolicyResponse) ProtoReflect() protoreflect.Message {
	mi := &file_server_v1_server_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetExistingNetworkPolicyResponse.ProtoReflect.Descriptor instead.
func (*GetExistingNetworkPolicyResponse) Descriptor() ([]byte, []int) {
	return file_server_v1_server_proto_rawDescGZIP(), []int{7}
}

func (x *GetExistingNetworkPolicyResponse) GetPolicy() *ExistingPolicyWithCluster {
	if x != nil {
		return x.Policy
	}
	return nil
}

// Request to list all recommended network policies.
// Tenant ID is passed in the gRPC request metadata.
type ListNetworkPoliciesRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The maximum number of results to return (server may return fewer).
	// Defaults to 50, maximum 100.
	PageSize int32 `protobuf:"varint,1,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`
	// An opaque token returned by a previous call. Treated as the cursor.
	PageToken string `protobuf:"bytes,2,opt,name=page_token,json=pageToken,proto3" json:"page_token,omitempty"`
	// Optional cluster ID to filter policies for a specific cluster
	ClusterId string `protobuf:"bytes,3,opt,name=cluster_id,json=clusterId,proto3" json:"cluster_id,omitempty"`
	// Optional review status filter
	ReviewStatus  PolicyReviewStatus `protobuf:"varint,4,opt,name=review_status,json=reviewStatus,proto3,enum=server.v1.PolicyReviewStatus" json:"review_status,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListNetworkPoliciesRequest) Reset() {
	*x = ListNetworkPoliciesRequest{}
	mi := &file_server_v1_server_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListNetworkPoliciesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListNetworkPoliciesRequest) ProtoMessage() {}

func (x *ListNetworkPoliciesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_server_v1_server_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListNetworkPoliciesRequest.ProtoReflect.Descriptor instead.
func (*ListNetworkPoliciesRequest) Descriptor() ([]byte, []int) {
	return file_server_v1_server_proto_rawDescGZIP(), []int{8}
}

func (x *ListNetworkPoliciesRequest) GetPageSize() int32 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *ListNetworkPoliciesRequest) GetPageToken() string {
	if x != nil {
		return x.PageToken
	}
	return ""
}

func (x *ListNetworkPoliciesRequest) GetClusterId() string {
	if x != nil {
		return x.ClusterId
	}
	return ""
}

func (x *ListNetworkPoliciesRequest) GetReviewStatus() PolicyReviewStatus {
	if x != nil {
		return x.ReviewStatus
	}
	return PolicyReviewStatus_POLICY_REVIEW_STATUS_UNSPECIFIED
}

type ListNetworkPoliciesResponse struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// We'll handle the NetworkPolicy conversion in Go code
	Policies      []*NetworkPolicyWithCluster `protobuf:"bytes,1,rep,name=policies,proto3" json:"policies,omitempty"`
	NextPageToken string                      `protobuf:"bytes,2,opt,name=next_page_token,json=nextPageToken,proto3" json:"next_page_token,omitempty"` // empty = last page
	TotalCount    int32                       `protobuf:"varint,3,opt,name=total_count,json=totalCount,proto3" json:"total_count,omitempty"`           // total number of policies matching the filters (for pagination)
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListNetworkPoliciesResponse) Reset() {
	*x = ListNetworkPoliciesResponse{}
	mi := &file_server_v1_server_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListNetworkPoliciesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListNetworkPoliciesResponse) ProtoMessage() {}

func (x *ListNetworkPoliciesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_server_v1_server_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListNetworkPoliciesResponse.ProtoReflect.Descriptor instead.
func (*ListNetworkPoliciesResponse) Descriptor() ([]byte, []int) {
	return file_server_v1_server_proto_rawDescGZIP(), []int{9}
}

func (x *ListNetworkPoliciesResponse) GetPolicies() []*NetworkPolicyWithCluster {
	if x != nil {
		return x.Policies
	}
	return nil
}

func (x *ListNetworkPoliciesResponse) GetNextPageToken() string {
	if x != nil {
		return x.NextPageToken
	}
	return ""
}

func (x *ListNetworkPoliciesResponse) GetTotalCount() int32 {
	if x != nil {
		return x.TotalCount
	}
	return 0
}

type NetworkPolicyWithCluster struct {
	state              protoimpl.MessageState      `protogen:"open.v1"`
	Id                 string                      `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	ClusterId          string                      `protobuf:"bytes,2,opt,name=cluster_id,json=clusterId,proto3" json:"cluster_id,omitempty"`
	ClusterName        string                      `protobuf:"bytes,3,opt,name=cluster_name,json=clusterName,proto3" json:"cluster_name,omitempty"`
	Namespace          string                      `protobuf:"bytes,4,opt,name=namespace,proto3" json:"namespace,omitempty"`
	Name               string                      `protobuf:"bytes,5,opt,name=name,proto3" json:"name,omitempty"`
	TargetWorkloadName string                      `protobuf:"bytes,6,opt,name=target_workload_name,json=targetWorkloadName,proto3" json:"target_workload_name,omitempty"`
	TargetWorkloadKind string                      `protobuf:"bytes,7,opt,name=target_workload_kind,json=targetWorkloadKind,proto3" json:"target_workload_kind,omitempty"`
	AllowAllYaml       string                      `protobuf:"bytes,8,opt,name=allow_all_yaml,json=allowAllYaml,proto3" json:"allow_all_yaml,omitempty"`
	TrimmedYaml        string                      `protobuf:"bytes,9,opt,name=trimmed_yaml,json=trimmedYaml,proto3" json:"trimmed_yaml,omitempty"`
	SuspiciousFlows    []*SuspiciousFlowWithReason `protobuf:"bytes,10,rep,name=suspicious_flows,json=suspiciousFlows,proto3" json:"suspicious_flows,omitempty"`
	AllowedFlows       []*Flow                     `protobuf:"bytes,11,rep,name=allowed_flows,json=allowedFlows,proto3" json:"allowed_flows,omitempty"`
	RiskScore          int32                       `protobuf:"varint,12,opt,name=risk_score,json=riskScore,proto3" json:"risk_score,omitempty"`
	RiskRationale      string                      `protobuf:"bytes,13,opt,name=risk_rationale,json=riskRationale,proto3" json:"risk_rationale,omitempty"`
	DestNamespaces     []string                    `protobuf:"bytes,14,rep,name=dest_namespaces,json=destNamespaces,proto3" json:"dest_namespaces,omitempty"` // Destination namespaces referenced in the policy
	unknownFields      protoimpl.UnknownFields
	sizeCache          protoimpl.SizeCache
}

func (x *NetworkPolicyWithCluster) Reset() {
	*x = NetworkPolicyWithCluster{}
	mi := &file_server_v1_server_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *NetworkPolicyWithCluster) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NetworkPolicyWithCluster) ProtoMessage() {}

func (x *NetworkPolicyWithCluster) ProtoReflect() protoreflect.Message {
	mi := &file_server_v1_server_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NetworkPolicyWithCluster.ProtoReflect.Descriptor instead.
func (*NetworkPolicyWithCluster) Descriptor() ([]byte, []int) {
	return file_server_v1_server_proto_rawDescGZIP(), []int{10}
}

func (x *NetworkPolicyWithCluster) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *NetworkPolicyWithCluster) GetClusterId() string {
	if x != nil {
		return x.ClusterId
	}
	return ""
}

func (x *NetworkPolicyWithCluster) GetClusterName() string {
	if x != nil {
		return x.ClusterName
	}
	return ""
}

func (x *NetworkPolicyWithCluster) GetNamespace() string {
	if x != nil {
		return x.Namespace
	}
	return ""
}

func (x *NetworkPolicyWithCluster) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *NetworkPolicyWithCluster) GetTargetWorkloadName() string {
	if x != nil {
		return x.TargetWorkloadName
	}
	return ""
}

func (x *NetworkPolicyWithCluster) GetTargetWorkloadKind() string {
	if x != nil {
		return x.TargetWorkloadKind
	}
	return ""
}

func (x *NetworkPolicyWithCluster) GetAllowAllYaml() string {
	if x != nil {
		return x.AllowAllYaml
	}
	return ""
}

func (x *NetworkPolicyWithCluster) GetTrimmedYaml() string {
	if x != nil {
		return x.TrimmedYaml
	}
	return ""
}

func (x *NetworkPolicyWithCluster) GetSuspiciousFlows() []*SuspiciousFlowWithReason {
	if x != nil {
		return x.SuspiciousFlows
	}
	return nil
}

func (x *NetworkPolicyWithCluster) GetAllowedFlows() []*Flow {
	if x != nil {
		return x.AllowedFlows
	}
	return nil
}

func (x *NetworkPolicyWithCluster) GetRiskScore() int32 {
	if x != nil {
		return x.RiskScore
	}
	return 0
}

func (x *NetworkPolicyWithCluster) GetRiskRationale() string {
	if x != nil {
		return x.RiskRationale
	}
	return ""
}

func (x *NetworkPolicyWithCluster) GetDestNamespaces() []string {
	if x != nil {
		return x.DestNamespaces
	}
	return nil
}

type SuspiciousFlowWithReason struct {
	state          protoimpl.MessageState `protogen:"open.v1"`
	SuspiciousFlow *Flow                  `protobuf:"bytes,1,opt,name=suspicious_flow,json=suspiciousFlow,proto3" json:"suspicious_flow,omitempty"`
	Reason         string                 `protobuf:"bytes,2,opt,name=reason,proto3" json:"reason,omitempty"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *SuspiciousFlowWithReason) Reset() {
	*x = SuspiciousFlowWithReason{}
	mi := &file_server_v1_server_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SuspiciousFlowWithReason) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SuspiciousFlowWithReason) ProtoMessage() {}

func (x *SuspiciousFlowWithReason) ProtoReflect() protoreflect.Message {
	mi := &file_server_v1_server_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SuspiciousFlowWithReason.ProtoReflect.Descriptor instead.
func (*SuspiciousFlowWithReason) Descriptor() ([]byte, []int) {
	return file_server_v1_server_proto_rawDescGZIP(), []int{11}
}

func (x *SuspiciousFlowWithReason) GetSuspiciousFlow() *Flow {
	if x != nil {
		return x.SuspiciousFlow
	}
	return nil
}

func (x *SuspiciousFlowWithReason) GetReason() string {
	if x != nil {
		return x.Reason
	}
	return ""
}

// NOTE: THE FLOW MESSAGE IS COPIED FROM THE OPERATOR'S PROTO FILE AS A TEMPORARY MEASURE,
// UNTIL IMPORTING IS FIXED. IN THE MEANTIME, IF THE FLOW MESSAGE ON THE OPERATOR IS CHANGED,
// IT NEEDS TO BE CHANGED HERE AS WELL (THEY NEED TO BE KEPT IN-SYNC).
type Flow struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	SrcIp string                 `protobuf:"bytes,1,opt,name=src_ip,json=srcIp,proto3" json:"src_ip,omitempty"`
	DstIp string                 `protobuf:"bytes,2,opt,name=dst_ip,json=dstIp,proto3" json:"dst_ip,omitempty"`
	// Source endpoint details
	Src *Endpoint `protobuf:"bytes,3,opt,name=src,proto3" json:"src,omitempty"`
	// Destination endpoint details
	Dst *Endpoint `protobuf:"bytes,4,opt,name=dst,proto3" json:"dst,omitempty"`
	// Direction from source's viewpoint (ingress or egress)
	Direction string `protobuf:"bytes,5,opt,name=direction,proto3" json:"direction,omitempty"`
	// Dst port number
	Port uint32 `protobuf:"varint,6,opt,name=port,proto3" json:"port,omitempty"`
	// Protocol (TCP, UDP, etc.)
	Protocol string `protobuf:"bytes,7,opt,name=protocol,proto3" json:"protocol,omitempty"`
	// Whether the connection was allowed
	Allowed bool `protobuf:"varint,8,opt,name=allowed,proto3" json:"allowed,omitempty"`
	// Count of times this flow was observed
	Count int64 `protobuf:"varint,9,opt,name=count,proto3" json:"count,omitempty"`
	// When this flow was first seen
	FirstSeen *timestamppb.Timestamp `protobuf:"bytes,10,opt,name=first_seen,json=firstSeen,proto3" json:"first_seen,omitempty"`
	// When this flow was last seen
	LastSeen         *timestamppb.Timestamp `protobuf:"bytes,11,opt,name=last_seen,json=lastSeen,proto3" json:"last_seen,omitempty"`
	IngressAllowedBy []*Policy              `protobuf:"bytes,12,rep,name=ingress_allowed_by,json=ingressAllowedBy,proto3" json:"ingress_allowed_by,omitempty"`
	EgressAllowedBy  []*Policy              `protobuf:"bytes,13,rep,name=egress_allowed_by,json=egressAllowedBy,proto3" json:"egress_allowed_by,omitempty"`
	unknownFields    protoimpl.UnknownFields
	sizeCache        protoimpl.SizeCache
}

func (x *Flow) Reset() {
	*x = Flow{}
	mi := &file_server_v1_server_proto_msgTypes[12]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Flow) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Flow) ProtoMessage() {}

func (x *Flow) ProtoReflect() protoreflect.Message {
	mi := &file_server_v1_server_proto_msgTypes[12]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Flow.ProtoReflect.Descriptor instead.
func (*Flow) Descriptor() ([]byte, []int) {
	return file_server_v1_server_proto_rawDescGZIP(), []int{12}
}

func (x *Flow) GetSrcIp() string {
	if x != nil {
		return x.SrcIp
	}
	return ""
}

func (x *Flow) GetDstIp() string {
	if x != nil {
		return x.DstIp
	}
	return ""
}

func (x *Flow) GetSrc() *Endpoint {
	if x != nil {
		return x.Src
	}
	return nil
}

func (x *Flow) GetDst() *Endpoint {
	if x != nil {
		return x.Dst
	}
	return nil
}

func (x *Flow) GetDirection() string {
	if x != nil {
		return x.Direction
	}
	return ""
}

func (x *Flow) GetPort() uint32 {
	if x != nil {
		return x.Port
	}
	return 0
}

func (x *Flow) GetProtocol() string {
	if x != nil {
		return x.Protocol
	}
	return ""
}

func (x *Flow) GetAllowed() bool {
	if x != nil {
		return x.Allowed
	}
	return false
}

func (x *Flow) GetCount() int64 {
	if x != nil {
		return x.Count
	}
	return 0
}

func (x *Flow) GetFirstSeen() *timestamppb.Timestamp {
	if x != nil {
		return x.FirstSeen
	}
	return nil
}

func (x *Flow) GetLastSeen() *timestamppb.Timestamp {
	if x != nil {
		return x.LastSeen
	}
	return nil
}

func (x *Flow) GetIngressAllowedBy() []*Policy {
	if x != nil {
		return x.IngressAllowedBy
	}
	return nil
}

func (x *Flow) GetEgressAllowedBy() []*Policy {
	if x != nil {
		return x.EgressAllowedBy
	}
	return nil
}

// Endpoint definition for source or destination
type Endpoint struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Namespace
	Ns string `protobuf:"bytes,1,opt,name=ns,proto3" json:"ns,omitempty"`
	// Kind (Deployment, StatefulSet, etc.)
	Kind string `protobuf:"bytes,2,opt,name=kind,proto3" json:"kind,omitempty"`
	// Resource name
	Name string `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	// Digest of labels attached to the resource
	Labels        []string `protobuf:"bytes,4,rep,name=labels,proto3" json:"labels,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Endpoint) Reset() {
	*x = Endpoint{}
	mi := &file_server_v1_server_proto_msgTypes[13]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Endpoint) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Endpoint) ProtoMessage() {}

func (x *Endpoint) ProtoReflect() protoreflect.Message {
	mi := &file_server_v1_server_proto_msgTypes[13]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Endpoint.ProtoReflect.Descriptor instead.
func (*Endpoint) Descriptor() ([]byte, []int) {
	return file_server_v1_server_proto_rawDescGZIP(), []int{13}
}

func (x *Endpoint) GetNs() string {
	if x != nil {
		return x.Ns
	}
	return ""
}

func (x *Endpoint) GetKind() string {
	if x != nil {
		return x.Kind
	}
	return ""
}

func (x *Endpoint) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Endpoint) GetLabels() []string {
	if x != nil {
		return x.Labels
	}
	return nil
}

// Policy definition used in Cilium flows
type Policy struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Name          string                 `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Namespace     string                 `protobuf:"bytes,2,opt,name=namespace,proto3" json:"namespace,omitempty"`
	Labels        []string               `protobuf:"bytes,3,rep,name=labels,proto3" json:"labels,omitempty"`
	Revision      uint64                 `protobuf:"varint,4,opt,name=revision,proto3" json:"revision,omitempty"`
	Kind          string                 `protobuf:"bytes,5,opt,name=kind,proto3" json:"kind,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Policy) Reset() {
	*x = Policy{}
	mi := &file_server_v1_server_proto_msgTypes[14]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Policy) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Policy) ProtoMessage() {}

func (x *Policy) ProtoReflect() protoreflect.Message {
	mi := &file_server_v1_server_proto_msgTypes[14]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Policy.ProtoReflect.Descriptor instead.
func (*Policy) Descriptor() ([]byte, []int) {
	return file_server_v1_server_proto_rawDescGZIP(), []int{14}
}

func (x *Policy) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Policy) GetNamespace() string {
	if x != nil {
		return x.Namespace
	}
	return ""
}

func (x *Policy) GetLabels() []string {
	if x != nil {
		return x.Labels
	}
	return nil
}

func (x *Policy) GetRevision() uint64 {
	if x != nil {
		return x.Revision
	}
	return 0
}

func (x *Policy) GetKind() string {
	if x != nil {
		return x.Kind
	}
	return ""
}

// Request to list all existing network policies.
// Tenant ID is passed in the gRPC request metadata.
type ListExistingNetworkPoliciesRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The maximum number of results to return (server may return fewer).
	// Defaults to 50, maximum 100.
	PageSize int32 `protobuf:"varint,1,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`
	// An opaque token returned by a previous call. Treated as the cursor.
	PageToken string `protobuf:"bytes,2,opt,name=page_token,json=pageToken,proto3" json:"page_token,omitempty"`
	// Optional cluster ID to filter policies for a specific cluster
	ClusterId     string `protobuf:"bytes,3,opt,name=cluster_id,json=clusterId,proto3" json:"cluster_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListExistingNetworkPoliciesRequest) Reset() {
	*x = ListExistingNetworkPoliciesRequest{}
	mi := &file_server_v1_server_proto_msgTypes[15]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListExistingNetworkPoliciesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListExistingNetworkPoliciesRequest) ProtoMessage() {}

func (x *ListExistingNetworkPoliciesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_server_v1_server_proto_msgTypes[15]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListExistingNetworkPoliciesRequest.ProtoReflect.Descriptor instead.
func (*ListExistingNetworkPoliciesRequest) Descriptor() ([]byte, []int) {
	return file_server_v1_server_proto_rawDescGZIP(), []int{15}
}

func (x *ListExistingNetworkPoliciesRequest) GetPageSize() int32 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *ListExistingNetworkPoliciesRequest) GetPageToken() string {
	if x != nil {
		return x.PageToken
	}
	return ""
}

func (x *ListExistingNetworkPoliciesRequest) GetClusterId() string {
	if x != nil {
		return x.ClusterId
	}
	return ""
}

type ListExistingNetworkPoliciesResponse struct {
	state         protoimpl.MessageState       `protogen:"open.v1"`
	Policies      []*ExistingPolicyWithCluster `protobuf:"bytes,1,rep,name=policies,proto3" json:"policies,omitempty"`
	NextPageToken string                       `protobuf:"bytes,2,opt,name=next_page_token,json=nextPageToken,proto3" json:"next_page_token,omitempty"` // empty = last page
	TotalCount    int32                        `protobuf:"varint,3,opt,name=total_count,json=totalCount,proto3" json:"total_count,omitempty"`           // total number of policies matching the filters (for pagination)
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListExistingNetworkPoliciesResponse) Reset() {
	*x = ListExistingNetworkPoliciesResponse{}
	mi := &file_server_v1_server_proto_msgTypes[16]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListExistingNetworkPoliciesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListExistingNetworkPoliciesResponse) ProtoMessage() {}

func (x *ListExistingNetworkPoliciesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_server_v1_server_proto_msgTypes[16]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListExistingNetworkPoliciesResponse.ProtoReflect.Descriptor instead.
func (*ListExistingNetworkPoliciesResponse) Descriptor() ([]byte, []int) {
	return file_server_v1_server_proto_rawDescGZIP(), []int{16}
}

func (x *ListExistingNetworkPoliciesResponse) GetPolicies() []*ExistingPolicyWithCluster {
	if x != nil {
		return x.Policies
	}
	return nil
}

func (x *ListExistingNetworkPoliciesResponse) GetNextPageToken() string {
	if x != nil {
		return x.NextPageToken
	}
	return ""
}

func (x *ListExistingNetworkPoliciesResponse) GetTotalCount() int32 {
	if x != nil {
		return x.TotalCount
	}
	return 0
}

type ExistingPolicyWithCluster struct {
	state               protoimpl.MessageState `protogen:"open.v1"`
	Id                  string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Name                string                 `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Namespace           string                 `protobuf:"bytes,3,opt,name=namespace,proto3" json:"namespace,omitempty"`
	TargetWorkloadName  string                 `protobuf:"bytes,4,opt,name=target_workload_name,json=targetWorkloadName,proto3" json:"target_workload_name,omitempty"`
	TargetWorkloadKind  string                 `protobuf:"bytes,5,opt,name=target_workload_kind,json=targetWorkloadKind,proto3" json:"target_workload_kind,omitempty"`
	Yaml                string                 `protobuf:"bytes,6,opt,name=yaml,proto3" json:"yaml,omitempty"`
	PolicyHitCount      int64                  `protobuf:"varint,7,opt,name=policy_hit_count,json=policyHitCount,proto3" json:"policy_hit_count,omitempty"`
	RecommendedPolicyId string                 `protobuf:"bytes,8,opt,name=recommended_policy_id,json=recommendedPolicyId,proto3" json:"recommended_policy_id,omitempty"` // empty if not recommended
	ClusterId           string                 `protobuf:"bytes,9,opt,name=cluster_id,json=clusterId,proto3" json:"cluster_id,omitempty"`
	ClusterName         string                 `protobuf:"bytes,10,opt,name=cluster_name,json=clusterName,proto3" json:"cluster_name,omitempty"`
	IngestedAt          int64                  `protobuf:"varint,11,opt,name=ingested_at,json=ingestedAt,proto3" json:"ingested_at,omitempty"` // Unix timestamp
	// Policy effectiveness fields (only populated if recommended_policy_id is empty), so we only show
	// policy effectiveness for customer policies or our policies that the customer edited.
	SuspiciousFlows         []*SuspiciousFlowWithReason `protobuf:"bytes,12,rep,name=suspicious_flows,json=suspiciousFlows,proto3" json:"suspicious_flows,omitempty"`
	AllowedFlows            []*Flow                     `protobuf:"bytes,13,rep,name=allowed_flows,json=allowedFlows,proto3" json:"allowed_flows,omitempty"`
	Reasons                 []string                    `protobuf:"bytes,14,rep,name=reasons,proto3" json:"reasons,omitempty"`
	SuspiciousAllowedRatio  float32                     `protobuf:"fixed32,15,opt,name=suspicious_allowed_ratio,json=suspiciousAllowedRatio,proto3" json:"suspicious_allowed_ratio,omitempty"`
	RequiredAllowedRatio    float32                     `protobuf:"fixed32,16,opt,name=required_allowed_ratio,json=requiredAllowedRatio,proto3" json:"required_allowed_ratio,omitempty"`
	EffectivenessReason     string                      `protobuf:"bytes,17,opt,name=effectiveness_reason,json=effectivenessReason,proto3" json:"effectiveness_reason,omitempty"`
	FinalEffectivenessScore float32                     `protobuf:"fixed32,18,opt,name=final_effectiveness_score,json=finalEffectivenessScore,proto3" json:"final_effectiveness_score,omitempty"`
	unknownFields           protoimpl.UnknownFields
	sizeCache               protoimpl.SizeCache
}

func (x *ExistingPolicyWithCluster) Reset() {
	*x = ExistingPolicyWithCluster{}
	mi := &file_server_v1_server_proto_msgTypes[17]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ExistingPolicyWithCluster) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExistingPolicyWithCluster) ProtoMessage() {}

func (x *ExistingPolicyWithCluster) ProtoReflect() protoreflect.Message {
	mi := &file_server_v1_server_proto_msgTypes[17]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExistingPolicyWithCluster.ProtoReflect.Descriptor instead.
func (*ExistingPolicyWithCluster) Descriptor() ([]byte, []int) {
	return file_server_v1_server_proto_rawDescGZIP(), []int{17}
}

func (x *ExistingPolicyWithCluster) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *ExistingPolicyWithCluster) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ExistingPolicyWithCluster) GetNamespace() string {
	if x != nil {
		return x.Namespace
	}
	return ""
}

func (x *ExistingPolicyWithCluster) GetTargetWorkloadName() string {
	if x != nil {
		return x.TargetWorkloadName
	}
	return ""
}

func (x *ExistingPolicyWithCluster) GetTargetWorkloadKind() string {
	if x != nil {
		return x.TargetWorkloadKind
	}
	return ""
}

func (x *ExistingPolicyWithCluster) GetYaml() string {
	if x != nil {
		return x.Yaml
	}
	return ""
}

func (x *ExistingPolicyWithCluster) GetPolicyHitCount() int64 {
	if x != nil {
		return x.PolicyHitCount
	}
	return 0
}

func (x *ExistingPolicyWithCluster) GetRecommendedPolicyId() string {
	if x != nil {
		return x.RecommendedPolicyId
	}
	return ""
}

func (x *ExistingPolicyWithCluster) GetClusterId() string {
	if x != nil {
		return x.ClusterId
	}
	return ""
}

func (x *ExistingPolicyWithCluster) GetClusterName() string {
	if x != nil {
		return x.ClusterName
	}
	return ""
}

func (x *ExistingPolicyWithCluster) GetIngestedAt() int64 {
	if x != nil {
		return x.IngestedAt
	}
	return 0
}

func (x *ExistingPolicyWithCluster) GetSuspiciousFlows() []*SuspiciousFlowWithReason {
	if x != nil {
		return x.SuspiciousFlows
	}
	return nil
}

func (x *ExistingPolicyWithCluster) GetAllowedFlows() []*Flow {
	if x != nil {
		return x.AllowedFlows
	}
	return nil
}

func (x *ExistingPolicyWithCluster) GetReasons() []string {
	if x != nil {
		return x.Reasons
	}
	return nil
}

func (x *ExistingPolicyWithCluster) GetSuspiciousAllowedRatio() float32 {
	if x != nil {
		return x.SuspiciousAllowedRatio
	}
	return 0
}

func (x *ExistingPolicyWithCluster) GetRequiredAllowedRatio() float32 {
	if x != nil {
		return x.RequiredAllowedRatio
	}
	return 0
}

func (x *ExistingPolicyWithCluster) GetEffectivenessReason() string {
	if x != nil {
		return x.EffectivenessReason
	}
	return ""
}

func (x *ExistingPolicyWithCluster) GetFinalEffectivenessScore() float32 {
	if x != nil {
		return x.FinalEffectivenessScore
	}
	return 0
}

type ListClustersRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListClustersRequest) Reset() {
	*x = ListClustersRequest{}
	mi := &file_server_v1_server_proto_msgTypes[18]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListClustersRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListClustersRequest) ProtoMessage() {}

func (x *ListClustersRequest) ProtoReflect() protoreflect.Message {
	mi := &file_server_v1_server_proto_msgTypes[18]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListClustersRequest.ProtoReflect.Descriptor instead.
func (*ListClustersRequest) Descriptor() ([]byte, []int) {
	return file_server_v1_server_proto_rawDescGZIP(), []int{18}
}

type ListClustersResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Clusters      []*ClusterInfo         `protobuf:"bytes,1,rep,name=clusters,proto3" json:"clusters,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListClustersResponse) Reset() {
	*x = ListClustersResponse{}
	mi := &file_server_v1_server_proto_msgTypes[19]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListClustersResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListClustersResponse) ProtoMessage() {}

func (x *ListClustersResponse) ProtoReflect() protoreflect.Message {
	mi := &file_server_v1_server_proto_msgTypes[19]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListClustersResponse.ProtoReflect.Descriptor instead.
func (*ListClustersResponse) Descriptor() ([]byte, []int) {
	return file_server_v1_server_proto_rawDescGZIP(), []int{19}
}

func (x *ListClustersResponse) GetClusters() []*ClusterInfo {
	if x != nil {
		return x.Clusters
	}
	return nil
}

type GetClusterStatsRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetClusterStatsRequest) Reset() {
	*x = GetClusterStatsRequest{}
	mi := &file_server_v1_server_proto_msgTypes[20]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetClusterStatsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetClusterStatsRequest) ProtoMessage() {}

func (x *GetClusterStatsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_server_v1_server_proto_msgTypes[20]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetClusterStatsRequest.ProtoReflect.Descriptor instead.
func (*GetClusterStatsRequest) Descriptor() ([]byte, []int) {
	return file_server_v1_server_proto_rawDescGZIP(), []int{20}
}

type GetClusterStatsResponse struct {
	state                protoimpl.MessageState `protogen:"open.v1"`
	TotalClusters        int32                  `protobuf:"varint,1,opt,name=total_clusters,json=totalClusters,proto3" json:"total_clusters,omitempty"`
	ConnectedClusters    int32                  `protobuf:"varint,2,opt,name=connected_clusters,json=connectedClusters,proto3" json:"connected_clusters,omitempty"`
	DisconnectedClusters int32                  `protobuf:"varint,3,opt,name=disconnected_clusters,json=disconnectedClusters,proto3" json:"disconnected_clusters,omitempty"`
	LastUpdated          int64                  `protobuf:"varint,4,opt,name=last_updated,json=lastUpdated,proto3" json:"last_updated,omitempty"` // Unix timestamp when stats were calculated
	unknownFields        protoimpl.UnknownFields
	sizeCache            protoimpl.SizeCache
}

func (x *GetClusterStatsResponse) Reset() {
	*x = GetClusterStatsResponse{}
	mi := &file_server_v1_server_proto_msgTypes[21]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetClusterStatsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetClusterStatsResponse) ProtoMessage() {}

func (x *GetClusterStatsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_server_v1_server_proto_msgTypes[21]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetClusterStatsResponse.ProtoReflect.Descriptor instead.
func (*GetClusterStatsResponse) Descriptor() ([]byte, []int) {
	return file_server_v1_server_proto_rawDescGZIP(), []int{21}
}

func (x *GetClusterStatsResponse) GetTotalClusters() int32 {
	if x != nil {
		return x.TotalClusters
	}
	return 0
}

func (x *GetClusterStatsResponse) GetConnectedClusters() int32 {
	if x != nil {
		return x.ConnectedClusters
	}
	return 0
}

func (x *GetClusterStatsResponse) GetDisconnectedClusters() int32 {
	if x != nil {
		return x.DisconnectedClusters
	}
	return 0
}

func (x *GetClusterStatsResponse) GetLastUpdated() int64 {
	if x != nil {
		return x.LastUpdated
	}
	return 0
}

type ClusterInfo struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	ClusterName   string                 `protobuf:"bytes,2,opt,name=cluster_name,json=clusterName,proto3" json:"cluster_name,omitempty"`
	Description   string                 `protobuf:"bytes,3,opt,name=description,proto3" json:"description,omitempty"`
	IsConnected   bool                   `protobuf:"varint,4,opt,name=is_connected,json=isConnected,proto3" json:"is_connected,omitempty"`
	LastSeen      int64                  `protobuf:"varint,5,opt,name=last_seen,json=lastSeen,proto3" json:"last_seen,omitempty"` // Unix timestamp, 0 if never seen
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ClusterInfo) Reset() {
	*x = ClusterInfo{}
	mi := &file_server_v1_server_proto_msgTypes[22]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ClusterInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClusterInfo) ProtoMessage() {}

func (x *ClusterInfo) ProtoReflect() protoreflect.Message {
	mi := &file_server_v1_server_proto_msgTypes[22]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClusterInfo.ProtoReflect.Descriptor instead.
func (*ClusterInfo) Descriptor() ([]byte, []int) {
	return file_server_v1_server_proto_rawDescGZIP(), []int{22}
}

func (x *ClusterInfo) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *ClusterInfo) GetClusterName() string {
	if x != nil {
		return x.ClusterName
	}
	return ""
}

func (x *ClusterInfo) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *ClusterInfo) GetIsConnected() bool {
	if x != nil {
		return x.IsConnected
	}
	return false
}

func (x *ClusterInfo) GetLastSeen() int64 {
	if x != nil {
		return x.LastSeen
	}
	return 0
}

// Request message for user registration
type RegisterRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Email         string                 `protobuf:"bytes,1,opt,name=email,proto3" json:"email,omitempty"`
	Password      string                 `protobuf:"bytes,2,opt,name=password,proto3" json:"password,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RegisterRequest) Reset() {
	*x = RegisterRequest{}
	mi := &file_server_v1_server_proto_msgTypes[23]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RegisterRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RegisterRequest) ProtoMessage() {}

func (x *RegisterRequest) ProtoReflect() protoreflect.Message {
	mi := &file_server_v1_server_proto_msgTypes[23]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RegisterRequest.ProtoReflect.Descriptor instead.
func (*RegisterRequest) Descriptor() ([]byte, []int) {
	return file_server_v1_server_proto_rawDescGZIP(), []int{23}
}

func (x *RegisterRequest) GetEmail() string {
	if x != nil {
		return x.Email
	}
	return ""
}

func (x *RegisterRequest) GetPassword() string {
	if x != nil {
		return x.Password
	}
	return ""
}

// Response message for user registration
type RegisterResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	UserId        string                 `protobuf:"bytes,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	TenantId      string                 `protobuf:"bytes,2,opt,name=tenant_id,json=tenantId,proto3" json:"tenant_id,omitempty"`
	Message       string                 `protobuf:"bytes,3,opt,name=message,proto3" json:"message,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RegisterResponse) Reset() {
	*x = RegisterResponse{}
	mi := &file_server_v1_server_proto_msgTypes[24]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RegisterResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RegisterResponse) ProtoMessage() {}

func (x *RegisterResponse) ProtoReflect() protoreflect.Message {
	mi := &file_server_v1_server_proto_msgTypes[24]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RegisterResponse.ProtoReflect.Descriptor instead.
func (*RegisterResponse) Descriptor() ([]byte, []int) {
	return file_server_v1_server_proto_rawDescGZIP(), []int{24}
}

func (x *RegisterResponse) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *RegisterResponse) GetTenantId() string {
	if x != nil {
		return x.TenantId
	}
	return ""
}

func (x *RegisterResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

// Request message for login
type LoginRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Email         string                 `protobuf:"bytes,1,opt,name=email,proto3" json:"email,omitempty"`
	Password      string                 `protobuf:"bytes,2,opt,name=password,proto3" json:"password,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *LoginRequest) Reset() {
	*x = LoginRequest{}
	mi := &file_server_v1_server_proto_msgTypes[25]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *LoginRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LoginRequest) ProtoMessage() {}

func (x *LoginRequest) ProtoReflect() protoreflect.Message {
	mi := &file_server_v1_server_proto_msgTypes[25]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LoginRequest.ProtoReflect.Descriptor instead.
func (*LoginRequest) Descriptor() ([]byte, []int) {
	return file_server_v1_server_proto_rawDescGZIP(), []int{25}
}

func (x *LoginRequest) GetEmail() string {
	if x != nil {
		return x.Email
	}
	return ""
}

func (x *LoginRequest) GetPassword() string {
	if x != nil {
		return x.Password
	}
	return ""
}

// Response message for login
type LoginResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	SessionToken  string                 `protobuf:"bytes,1,opt,name=session_token,json=sessionToken,proto3" json:"session_token,omitempty"`
	UserId        string                 `protobuf:"bytes,2,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	ExpiresAt     int64                  `protobuf:"varint,3,opt,name=expires_at,json=expiresAt,proto3" json:"expires_at,omitempty"` // Unix timestamp when session expires
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *LoginResponse) Reset() {
	*x = LoginResponse{}
	mi := &file_server_v1_server_proto_msgTypes[26]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *LoginResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LoginResponse) ProtoMessage() {}

func (x *LoginResponse) ProtoReflect() protoreflect.Message {
	mi := &file_server_v1_server_proto_msgTypes[26]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LoginResponse.ProtoReflect.Descriptor instead.
func (*LoginResponse) Descriptor() ([]byte, []int) {
	return file_server_v1_server_proto_rawDescGZIP(), []int{26}
}

func (x *LoginResponse) GetSessionToken() string {
	if x != nil {
		return x.SessionToken
	}
	return ""
}

func (x *LoginResponse) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *LoginResponse) GetExpiresAt() int64 {
	if x != nil {
		return x.ExpiresAt
	}
	return 0
}

// Request message for logout
type LogoutRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	SessionToken  string                 `protobuf:"bytes,1,opt,name=session_token,json=sessionToken,proto3" json:"session_token,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *LogoutRequest) Reset() {
	*x = LogoutRequest{}
	mi := &file_server_v1_server_proto_msgTypes[27]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *LogoutRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LogoutRequest) ProtoMessage() {}

func (x *LogoutRequest) ProtoReflect() protoreflect.Message {
	mi := &file_server_v1_server_proto_msgTypes[27]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LogoutRequest.ProtoReflect.Descriptor instead.
func (*LogoutRequest) Descriptor() ([]byte, []int) {
	return file_server_v1_server_proto_rawDescGZIP(), []int{27}
}

func (x *LogoutRequest) GetSessionToken() string {
	if x != nil {
		return x.SessionToken
	}
	return ""
}

// Response message for logout
type LogoutResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *LogoutResponse) Reset() {
	*x = LogoutResponse{}
	mi := &file_server_v1_server_proto_msgTypes[28]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *LogoutResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LogoutResponse) ProtoMessage() {}

func (x *LogoutResponse) ProtoReflect() protoreflect.Message {
	mi := &file_server_v1_server_proto_msgTypes[28]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LogoutResponse.ProtoReflect.Descriptor instead.
func (*LogoutResponse) Descriptor() ([]byte, []int) {
	return file_server_v1_server_proto_rawDescGZIP(), []int{28}
}

// Request message for session validation
type ValidateSessionRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	SessionToken  string                 `protobuf:"bytes,1,opt,name=session_token,json=sessionToken,proto3" json:"session_token,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ValidateSessionRequest) Reset() {
	*x = ValidateSessionRequest{}
	mi := &file_server_v1_server_proto_msgTypes[29]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ValidateSessionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ValidateSessionRequest) ProtoMessage() {}

func (x *ValidateSessionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_server_v1_server_proto_msgTypes[29]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ValidateSessionRequest.ProtoReflect.Descriptor instead.
func (*ValidateSessionRequest) Descriptor() ([]byte, []int) {
	return file_server_v1_server_proto_rawDescGZIP(), []int{29}
}

func (x *ValidateSessionRequest) GetSessionToken() string {
	if x != nil {
		return x.SessionToken
	}
	return ""
}

// Response message for session validation
type ValidateSessionResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Valid         bool                   `protobuf:"varint,1,opt,name=valid,proto3" json:"valid,omitempty"`
	UserId        string                 `protobuf:"bytes,2,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	Email         string                 `protobuf:"bytes,3,opt,name=email,proto3" json:"email,omitempty"`
	ExpiresAt     int64                  `protobuf:"varint,4,opt,name=expires_at,json=expiresAt,proto3" json:"expires_at,omitempty"` // Unix timestamp when session expires
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ValidateSessionResponse) Reset() {
	*x = ValidateSessionResponse{}
	mi := &file_server_v1_server_proto_msgTypes[30]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ValidateSessionResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ValidateSessionResponse) ProtoMessage() {}

func (x *ValidateSessionResponse) ProtoReflect() protoreflect.Message {
	mi := &file_server_v1_server_proto_msgTypes[30]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ValidateSessionResponse.ProtoReflect.Descriptor instead.
func (*ValidateSessionResponse) Descriptor() ([]byte, []int) {
	return file_server_v1_server_proto_rawDescGZIP(), []int{30}
}

func (x *ValidateSessionResponse) GetValid() bool {
	if x != nil {
		return x.Valid
	}
	return false
}

func (x *ValidateSessionResponse) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *ValidateSessionResponse) GetEmail() string {
	if x != nil {
		return x.Email
	}
	return ""
}

func (x *ValidateSessionResponse) GetExpiresAt() int64 {
	if x != nil {
		return x.ExpiresAt
	}
	return 0
}

// Request message for refresh session
type RefreshSessionRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	SessionToken  string                 `protobuf:"bytes,1,opt,name=session_token,json=sessionToken,proto3" json:"session_token,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RefreshSessionRequest) Reset() {
	*x = RefreshSessionRequest{}
	mi := &file_server_v1_server_proto_msgTypes[31]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RefreshSessionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RefreshSessionRequest) ProtoMessage() {}

func (x *RefreshSessionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_server_v1_server_proto_msgTypes[31]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RefreshSessionRequest.ProtoReflect.Descriptor instead.
func (*RefreshSessionRequest) Descriptor() ([]byte, []int) {
	return file_server_v1_server_proto_rawDescGZIP(), []int{31}
}

func (x *RefreshSessionRequest) GetSessionToken() string {
	if x != nil {
		return x.SessionToken
	}
	return ""
}

// Response message for refresh session
type RefreshSessionResponse struct {
	state           protoimpl.MessageState `protogen:"open.v1"`
	NewSessionToken string                 `protobuf:"bytes,1,opt,name=new_session_token,json=newSessionToken,proto3" json:"new_session_token,omitempty"`
	ExpiresAt       int64                  `protobuf:"varint,2,opt,name=expires_at,json=expiresAt,proto3" json:"expires_at,omitempty"` // Unix timestamp when new session expires
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *RefreshSessionResponse) Reset() {
	*x = RefreshSessionResponse{}
	mi := &file_server_v1_server_proto_msgTypes[32]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RefreshSessionResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RefreshSessionResponse) ProtoMessage() {}

func (x *RefreshSessionResponse) ProtoReflect() protoreflect.Message {
	mi := &file_server_v1_server_proto_msgTypes[32]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RefreshSessionResponse.ProtoReflect.Descriptor instead.
func (*RefreshSessionResponse) Descriptor() ([]byte, []int) {
	return file_server_v1_server_proto_rawDescGZIP(), []int{32}
}

func (x *RefreshSessionResponse) GetNewSessionToken() string {
	if x != nil {
		return x.NewSessionToken
	}
	return ""
}

func (x *RefreshSessionResponse) GetExpiresAt() int64 {
	if x != nil {
		return x.ExpiresAt
	}
	return 0
}

// Request message for tenant creation
type CreateTenantRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Name          string                 `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Description   string                 `protobuf:"bytes,2,opt,name=description,proto3" json:"description,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CreateTenantRequest) Reset() {
	*x = CreateTenantRequest{}
	mi := &file_server_v1_server_proto_msgTypes[33]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateTenantRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateTenantRequest) ProtoMessage() {}

func (x *CreateTenantRequest) ProtoReflect() protoreflect.Message {
	mi := &file_server_v1_server_proto_msgTypes[33]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateTenantRequest.ProtoReflect.Descriptor instead.
func (*CreateTenantRequest) Descriptor() ([]byte, []int) {
	return file_server_v1_server_proto_rawDescGZIP(), []int{33}
}

func (x *CreateTenantRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *CreateTenantRequest) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

// Response message for tenant creation
type CreateTenantResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	TenantId      string                 `protobuf:"bytes,1,opt,name=tenant_id,json=tenantId,proto3" json:"tenant_id,omitempty"`
	Name          string                 `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Message       string                 `protobuf:"bytes,3,opt,name=message,proto3" json:"message,omitempty"` // Success message
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CreateTenantResponse) Reset() {
	*x = CreateTenantResponse{}
	mi := &file_server_v1_server_proto_msgTypes[34]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateTenantResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateTenantResponse) ProtoMessage() {}

func (x *CreateTenantResponse) ProtoReflect() protoreflect.Message {
	mi := &file_server_v1_server_proto_msgTypes[34]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateTenantResponse.ProtoReflect.Descriptor instead.
func (*CreateTenantResponse) Descriptor() ([]byte, []int) {
	return file_server_v1_server_proto_rawDescGZIP(), []int{34}
}

func (x *CreateTenantResponse) GetTenantId() string {
	if x != nil {
		return x.TenantId
	}
	return ""
}

func (x *CreateTenantResponse) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *CreateTenantResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

// Request message for getting tenant details
type GetTenantRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	TenantId      string                 `protobuf:"bytes,1,opt,name=tenant_id,json=tenantId,proto3" json:"tenant_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetTenantRequest) Reset() {
	*x = GetTenantRequest{}
	mi := &file_server_v1_server_proto_msgTypes[35]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetTenantRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetTenantRequest) ProtoMessage() {}

func (x *GetTenantRequest) ProtoReflect() protoreflect.Message {
	mi := &file_server_v1_server_proto_msgTypes[35]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetTenantRequest.ProtoReflect.Descriptor instead.
func (*GetTenantRequest) Descriptor() ([]byte, []int) {
	return file_server_v1_server_proto_rawDescGZIP(), []int{35}
}

func (x *GetTenantRequest) GetTenantId() string {
	if x != nil {
		return x.TenantId
	}
	return ""
}

// Response message for getting tenant details
type GetTenantResponse struct {
	state          protoimpl.MessageState `protogen:"open.v1"`
	TenantId       string                 `protobuf:"bytes,1,opt,name=tenant_id,json=tenantId,proto3" json:"tenant_id,omitempty"`
	Name           string                 `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	SetupCompleted bool                   `protobuf:"varint,3,opt,name=setup_completed,json=setupCompleted,proto3" json:"setup_completed,omitempty"`
	CreatedAt      int64                  `protobuf:"varint,4,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *GetTenantResponse) Reset() {
	*x = GetTenantResponse{}
	mi := &file_server_v1_server_proto_msgTypes[36]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetTenantResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetTenantResponse) ProtoMessage() {}

func (x *GetTenantResponse) ProtoReflect() protoreflect.Message {
	mi := &file_server_v1_server_proto_msgTypes[36]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetTenantResponse.ProtoReflect.Descriptor instead.
func (*GetTenantResponse) Descriptor() ([]byte, []int) {
	return file_server_v1_server_proto_rawDescGZIP(), []int{36}
}

func (x *GetTenantResponse) GetTenantId() string {
	if x != nil {
		return x.TenantId
	}
	return ""
}

func (x *GetTenantResponse) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *GetTenantResponse) GetSetupCompleted() bool {
	if x != nil {
		return x.SetupCompleted
	}
	return false
}

func (x *GetTenantResponse) GetCreatedAt() int64 {
	if x != nil {
		return x.CreatedAt
	}
	return 0
}

// Request message for updating tenant details
type UpdateTenantRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	TenantId      string                 `protobuf:"bytes,1,opt,name=tenant_id,json=tenantId,proto3" json:"tenant_id,omitempty"`
	Name          string                 `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UpdateTenantRequest) Reset() {
	*x = UpdateTenantRequest{}
	mi := &file_server_v1_server_proto_msgTypes[37]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateTenantRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateTenantRequest) ProtoMessage() {}

func (x *UpdateTenantRequest) ProtoReflect() protoreflect.Message {
	mi := &file_server_v1_server_proto_msgTypes[37]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateTenantRequest.ProtoReflect.Descriptor instead.
func (*UpdateTenantRequest) Descriptor() ([]byte, []int) {
	return file_server_v1_server_proto_rawDescGZIP(), []int{37}
}

func (x *UpdateTenantRequest) GetTenantId() string {
	if x != nil {
		return x.TenantId
	}
	return ""
}

func (x *UpdateTenantRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

// Response message for updating tenant details
type UpdateTenantResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	TenantId      string                 `protobuf:"bytes,1,opt,name=tenant_id,json=tenantId,proto3" json:"tenant_id,omitempty"`
	Name          string                 `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Message       string                 `protobuf:"bytes,3,opt,name=message,proto3" json:"message,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UpdateTenantResponse) Reset() {
	*x = UpdateTenantResponse{}
	mi := &file_server_v1_server_proto_msgTypes[38]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateTenantResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateTenantResponse) ProtoMessage() {}

func (x *UpdateTenantResponse) ProtoReflect() protoreflect.Message {
	mi := &file_server_v1_server_proto_msgTypes[38]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateTenantResponse.ProtoReflect.Descriptor instead.
func (*UpdateTenantResponse) Descriptor() ([]byte, []int) {
	return file_server_v1_server_proto_rawDescGZIP(), []int{38}
}

func (x *UpdateTenantResponse) GetTenantId() string {
	if x != nil {
		return x.TenantId
	}
	return ""
}

func (x *UpdateTenantResponse) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *UpdateTenantResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

// Request message for linking user to tenant
type LinkUserToTenantRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	UserId        string                 `protobuf:"bytes,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	TenantId      string                 `protobuf:"bytes,2,opt,name=tenant_id,json=tenantId,proto3" json:"tenant_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *LinkUserToTenantRequest) Reset() {
	*x = LinkUserToTenantRequest{}
	mi := &file_server_v1_server_proto_msgTypes[39]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *LinkUserToTenantRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LinkUserToTenantRequest) ProtoMessage() {}

func (x *LinkUserToTenantRequest) ProtoReflect() protoreflect.Message {
	mi := &file_server_v1_server_proto_msgTypes[39]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LinkUserToTenantRequest.ProtoReflect.Descriptor instead.
func (*LinkUserToTenantRequest) Descriptor() ([]byte, []int) {
	return file_server_v1_server_proto_rawDescGZIP(), []int{39}
}

func (x *LinkUserToTenantRequest) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *LinkUserToTenantRequest) GetTenantId() string {
	if x != nil {
		return x.TenantId
	}
	return ""
}

// Response message for linking user to tenant
type LinkUserToTenantResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Message       string                 `protobuf:"bytes,1,opt,name=message,proto3" json:"message,omitempty"` // Success message
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *LinkUserToTenantResponse) Reset() {
	*x = LinkUserToTenantResponse{}
	mi := &file_server_v1_server_proto_msgTypes[40]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *LinkUserToTenantResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LinkUserToTenantResponse) ProtoMessage() {}

func (x *LinkUserToTenantResponse) ProtoReflect() protoreflect.Message {
	mi := &file_server_v1_server_proto_msgTypes[40]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LinkUserToTenantResponse.ProtoReflect.Descriptor instead.
func (*LinkUserToTenantResponse) Descriptor() ([]byte, []int) {
	return file_server_v1_server_proto_rawDescGZIP(), []int{40}
}

func (x *LinkUserToTenantResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

// Request message for getting policy count for tenant
type GetPolicyCountForTenantRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	ReviewedOnly  bool                   `protobuf:"varint,1,opt,name=reviewed_only,json=reviewedOnly,proto3" json:"reviewed_only,omitempty"` // If true, count only reviewed policies; if false, count all policies
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetPolicyCountForTenantRequest) Reset() {
	*x = GetPolicyCountForTenantRequest{}
	mi := &file_server_v1_server_proto_msgTypes[41]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetPolicyCountForTenantRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetPolicyCountForTenantRequest) ProtoMessage() {}

func (x *GetPolicyCountForTenantRequest) ProtoReflect() protoreflect.Message {
	mi := &file_server_v1_server_proto_msgTypes[41]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetPolicyCountForTenantRequest.ProtoReflect.Descriptor instead.
func (*GetPolicyCountForTenantRequest) Descriptor() ([]byte, []int) {
	return file_server_v1_server_proto_rawDescGZIP(), []int{41}
}

func (x *GetPolicyCountForTenantRequest) GetReviewedOnly() bool {
	if x != nil {
		return x.ReviewedOnly
	}
	return false
}

// Response message for getting policy count for tenant
type GetPolicyCountForTenantResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	PolicyCount   int32                  `protobuf:"varint,1,opt,name=policy_count,json=policyCount,proto3" json:"policy_count,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetPolicyCountForTenantResponse) Reset() {
	*x = GetPolicyCountForTenantResponse{}
	mi := &file_server_v1_server_proto_msgTypes[42]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetPolicyCountForTenantResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetPolicyCountForTenantResponse) ProtoMessage() {}

func (x *GetPolicyCountForTenantResponse) ProtoReflect() protoreflect.Message {
	mi := &file_server_v1_server_proto_msgTypes[42]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetPolicyCountForTenantResponse.ProtoReflect.Descriptor instead.
func (*GetPolicyCountForTenantResponse) Descriptor() ([]byte, []int) {
	return file_server_v1_server_proto_rawDescGZIP(), []int{42}
}

func (x *GetPolicyCountForTenantResponse) GetPolicyCount() int32 {
	if x != nil {
		return x.PolicyCount
	}
	return 0
}

// Request message for getting user count for tenant
type GetUserCountForTenantRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetUserCountForTenantRequest) Reset() {
	*x = GetUserCountForTenantRequest{}
	mi := &file_server_v1_server_proto_msgTypes[43]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetUserCountForTenantRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetUserCountForTenantRequest) ProtoMessage() {}

func (x *GetUserCountForTenantRequest) ProtoReflect() protoreflect.Message {
	mi := &file_server_v1_server_proto_msgTypes[43]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetUserCountForTenantRequest.ProtoReflect.Descriptor instead.
func (*GetUserCountForTenantRequest) Descriptor() ([]byte, []int) {
	return file_server_v1_server_proto_rawDescGZIP(), []int{43}
}

// Response message for getting user count for tenant
type GetUserCountForTenantResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	UserCount     int32                  `protobuf:"varint,1,opt,name=user_count,json=userCount,proto3" json:"user_count,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetUserCountForTenantResponse) Reset() {
	*x = GetUserCountForTenantResponse{}
	mi := &file_server_v1_server_proto_msgTypes[44]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetUserCountForTenantResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetUserCountForTenantResponse) ProtoMessage() {}

func (x *GetUserCountForTenantResponse) ProtoReflect() protoreflect.Message {
	mi := &file_server_v1_server_proto_msgTypes[44]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetUserCountForTenantResponse.ProtoReflect.Descriptor instead.
func (*GetUserCountForTenantResponse) Descriptor() ([]byte, []int) {
	return file_server_v1_server_proto_rawDescGZIP(), []int{44}
}

func (x *GetUserCountForTenantResponse) GetUserCount() int32 {
	if x != nil {
		return x.UserCount
	}
	return 0
}

// Recent activity messages
type GetRecentPoliciesForTenantRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Reviewed      *wrapperspb.BoolValue  `protobuf:"bytes,1,opt,name=reviewed,proto3" json:"reviewed,omitempty"` // optional filter for reviewed/unreviewed
	Limit         int32                  `protobuf:"varint,2,opt,name=limit,proto3" json:"limit,omitempty"`      // maximum number of policies to return
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetRecentPoliciesForTenantRequest) Reset() {
	*x = GetRecentPoliciesForTenantRequest{}
	mi := &file_server_v1_server_proto_msgTypes[45]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetRecentPoliciesForTenantRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetRecentPoliciesForTenantRequest) ProtoMessage() {}

func (x *GetRecentPoliciesForTenantRequest) ProtoReflect() protoreflect.Message {
	mi := &file_server_v1_server_proto_msgTypes[45]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetRecentPoliciesForTenantRequest.ProtoReflect.Descriptor instead.
func (*GetRecentPoliciesForTenantRequest) Descriptor() ([]byte, []int) {
	return file_server_v1_server_proto_rawDescGZIP(), []int{45}
}

func (x *GetRecentPoliciesForTenantRequest) GetReviewed() *wrapperspb.BoolValue {
	if x != nil {
		return x.Reviewed
	}
	return nil
}

func (x *GetRecentPoliciesForTenantRequest) GetLimit() int32 {
	if x != nil {
		return x.Limit
	}
	return 0
}

type RecentPolicy struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Namespace     string                 `protobuf:"bytes,2,opt,name=namespace,proto3" json:"namespace,omitempty"`
	ClusterName   string                 `protobuf:"bytes,3,opt,name=cluster_name,json=clusterName,proto3" json:"cluster_name,omitempty"`
	CreatedAt     int64                  `protobuf:"varint,4,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"` // Unix timestamp
	Reviewed      bool                   `protobuf:"varint,5,opt,name=reviewed,proto3" json:"reviewed,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RecentPolicy) Reset() {
	*x = RecentPolicy{}
	mi := &file_server_v1_server_proto_msgTypes[46]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RecentPolicy) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RecentPolicy) ProtoMessage() {}

func (x *RecentPolicy) ProtoReflect() protoreflect.Message {
	mi := &file_server_v1_server_proto_msgTypes[46]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RecentPolicy.ProtoReflect.Descriptor instead.
func (*RecentPolicy) Descriptor() ([]byte, []int) {
	return file_server_v1_server_proto_rawDescGZIP(), []int{46}
}

func (x *RecentPolicy) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *RecentPolicy) GetNamespace() string {
	if x != nil {
		return x.Namespace
	}
	return ""
}

func (x *RecentPolicy) GetClusterName() string {
	if x != nil {
		return x.ClusterName
	}
	return ""
}

func (x *RecentPolicy) GetCreatedAt() int64 {
	if x != nil {
		return x.CreatedAt
	}
	return 0
}

func (x *RecentPolicy) GetReviewed() bool {
	if x != nil {
		return x.Reviewed
	}
	return false
}

type GetRecentPoliciesForTenantResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Policies      []*RecentPolicy        `protobuf:"bytes,1,rep,name=policies,proto3" json:"policies,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetRecentPoliciesForTenantResponse) Reset() {
	*x = GetRecentPoliciesForTenantResponse{}
	mi := &file_server_v1_server_proto_msgTypes[47]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetRecentPoliciesForTenantResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetRecentPoliciesForTenantResponse) ProtoMessage() {}

func (x *GetRecentPoliciesForTenantResponse) ProtoReflect() protoreflect.Message {
	mi := &file_server_v1_server_proto_msgTypes[47]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetRecentPoliciesForTenantResponse.ProtoReflect.Descriptor instead.
func (*GetRecentPoliciesForTenantResponse) Descriptor() ([]byte, []int) {
	return file_server_v1_server_proto_rawDescGZIP(), []int{47}
}

func (x *GetRecentPoliciesForTenantResponse) GetPolicies() []*RecentPolicy {
	if x != nil {
		return x.Policies
	}
	return nil
}

type GetRecentAuthorizationPoliciesForTenantRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Reviewed      *wrapperspb.BoolValue  `protobuf:"bytes,1,opt,name=reviewed,proto3" json:"reviewed,omitempty"` // optional filter for reviewed/unreviewed
	Limit         int32                  `protobuf:"varint,2,opt,name=limit,proto3" json:"limit,omitempty"`      // maximum number of policies to return
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetRecentAuthorizationPoliciesForTenantRequest) Reset() {
	*x = GetRecentAuthorizationPoliciesForTenantRequest{}
	mi := &file_server_v1_server_proto_msgTypes[48]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetRecentAuthorizationPoliciesForTenantRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetRecentAuthorizationPoliciesForTenantRequest) ProtoMessage() {}

func (x *GetRecentAuthorizationPoliciesForTenantRequest) ProtoReflect() protoreflect.Message {
	mi := &file_server_v1_server_proto_msgTypes[48]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetRecentAuthorizationPoliciesForTenantRequest.ProtoReflect.Descriptor instead.
func (*GetRecentAuthorizationPoliciesForTenantRequest) Descriptor() ([]byte, []int) {
	return file_server_v1_server_proto_rawDescGZIP(), []int{48}
}

func (x *GetRecentAuthorizationPoliciesForTenantRequest) GetReviewed() *wrapperspb.BoolValue {
	if x != nil {
		return x.Reviewed
	}
	return nil
}

func (x *GetRecentAuthorizationPoliciesForTenantRequest) GetLimit() int32 {
	if x != nil {
		return x.Limit
	}
	return 0
}

type GetRecentAuthorizationPoliciesForTenantResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Policies      []*RecentPolicy        `protobuf:"bytes,1,rep,name=policies,proto3" json:"policies,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetRecentAuthorizationPoliciesForTenantResponse) Reset() {
	*x = GetRecentAuthorizationPoliciesForTenantResponse{}
	mi := &file_server_v1_server_proto_msgTypes[49]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetRecentAuthorizationPoliciesForTenantResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetRecentAuthorizationPoliciesForTenantResponse) ProtoMessage() {}

func (x *GetRecentAuthorizationPoliciesForTenantResponse) ProtoReflect() protoreflect.Message {
	mi := &file_server_v1_server_proto_msgTypes[49]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetRecentAuthorizationPoliciesForTenantResponse.ProtoReflect.Descriptor instead.
func (*GetRecentAuthorizationPoliciesForTenantResponse) Descriptor() ([]byte, []int) {
	return file_server_v1_server_proto_rawDescGZIP(), []int{49}
}

func (x *GetRecentAuthorizationPoliciesForTenantResponse) GetPolicies() []*RecentPolicy {
	if x != nil {
		return x.Policies
	}
	return nil
}

type GetRecentClustersForTenantRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Limit         int32                  `protobuf:"varint,1,opt,name=limit,proto3" json:"limit,omitempty"` // maximum number of clusters to return
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetRecentClustersForTenantRequest) Reset() {
	*x = GetRecentClustersForTenantRequest{}
	mi := &file_server_v1_server_proto_msgTypes[50]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetRecentClustersForTenantRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetRecentClustersForTenantRequest) ProtoMessage() {}

func (x *GetRecentClustersForTenantRequest) ProtoReflect() protoreflect.Message {
	mi := &file_server_v1_server_proto_msgTypes[50]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetRecentClustersForTenantRequest.ProtoReflect.Descriptor instead.
func (*GetRecentClustersForTenantRequest) Descriptor() ([]byte, []int) {
	return file_server_v1_server_proto_rawDescGZIP(), []int{50}
}

func (x *GetRecentClustersForTenantRequest) GetLimit() int32 {
	if x != nil {
		return x.Limit
	}
	return 0
}

type RecentCluster struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	ClusterName   string                 `protobuf:"bytes,2,opt,name=cluster_name,json=clusterName,proto3" json:"cluster_name,omitempty"`
	Description   string                 `protobuf:"bytes,3,opt,name=description,proto3" json:"description,omitempty"`
	CreatedAt     int64                  `protobuf:"varint,4,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"` // Unix timestamp
	LastSeen      int64                  `protobuf:"varint,5,opt,name=last_seen,json=lastSeen,proto3" json:"last_seen,omitempty"`    // Unix timestamp, 0 if never seen
	IsConnected   bool                   `protobuf:"varint,6,opt,name=is_connected,json=isConnected,proto3" json:"is_connected,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RecentCluster) Reset() {
	*x = RecentCluster{}
	mi := &file_server_v1_server_proto_msgTypes[51]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RecentCluster) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RecentCluster) ProtoMessage() {}

func (x *RecentCluster) ProtoReflect() protoreflect.Message {
	mi := &file_server_v1_server_proto_msgTypes[51]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RecentCluster.ProtoReflect.Descriptor instead.
func (*RecentCluster) Descriptor() ([]byte, []int) {
	return file_server_v1_server_proto_rawDescGZIP(), []int{51}
}

func (x *RecentCluster) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *RecentCluster) GetClusterName() string {
	if x != nil {
		return x.ClusterName
	}
	return ""
}

func (x *RecentCluster) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *RecentCluster) GetCreatedAt() int64 {
	if x != nil {
		return x.CreatedAt
	}
	return 0
}

func (x *RecentCluster) GetLastSeen() int64 {
	if x != nil {
		return x.LastSeen
	}
	return 0
}

func (x *RecentCluster) GetIsConnected() bool {
	if x != nil {
		return x.IsConnected
	}
	return false
}

type GetRecentClustersForTenantResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Clusters      []*RecentCluster       `protobuf:"bytes,1,rep,name=clusters,proto3" json:"clusters,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetRecentClustersForTenantResponse) Reset() {
	*x = GetRecentClustersForTenantResponse{}
	mi := &file_server_v1_server_proto_msgTypes[52]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetRecentClustersForTenantResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetRecentClustersForTenantResponse) ProtoMessage() {}

func (x *GetRecentClustersForTenantResponse) ProtoReflect() protoreflect.Message {
	mi := &file_server_v1_server_proto_msgTypes[52]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetRecentClustersForTenantResponse.ProtoReflect.Descriptor instead.
func (*GetRecentClustersForTenantResponse) Descriptor() ([]byte, []int) {
	return file_server_v1_server_proto_rawDescGZIP(), []int{52}
}

func (x *GetRecentClustersForTenantResponse) GetClusters() []*RecentCluster {
	if x != nil {
		return x.Clusters
	}
	return nil
}

type GetRecentUsersForTenantRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Limit         int32                  `protobuf:"varint,1,opt,name=limit,proto3" json:"limit,omitempty"` // maximum number of users to return
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetRecentUsersForTenantRequest) Reset() {
	*x = GetRecentUsersForTenantRequest{}
	mi := &file_server_v1_server_proto_msgTypes[53]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetRecentUsersForTenantRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetRecentUsersForTenantRequest) ProtoMessage() {}

func (x *GetRecentUsersForTenantRequest) ProtoReflect() protoreflect.Message {
	mi := &file_server_v1_server_proto_msgTypes[53]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetRecentUsersForTenantRequest.ProtoReflect.Descriptor instead.
func (*GetRecentUsersForTenantRequest) Descriptor() ([]byte, []int) {
	return file_server_v1_server_proto_rawDescGZIP(), []int{53}
}

func (x *GetRecentUsersForTenantRequest) GetLimit() int32 {
	if x != nil {
		return x.Limit
	}
	return 0
}

type RecentUser struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Email         string                 `protobuf:"bytes,2,opt,name=email,proto3" json:"email,omitempty"`
	CreatedAt     int64                  `protobuf:"varint,3,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"` // Unix timestamp
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RecentUser) Reset() {
	*x = RecentUser{}
	mi := &file_server_v1_server_proto_msgTypes[54]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RecentUser) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RecentUser) ProtoMessage() {}

func (x *RecentUser) ProtoReflect() protoreflect.Message {
	mi := &file_server_v1_server_proto_msgTypes[54]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RecentUser.ProtoReflect.Descriptor instead.
func (*RecentUser) Descriptor() ([]byte, []int) {
	return file_server_v1_server_proto_rawDescGZIP(), []int{54}
}

func (x *RecentUser) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *RecentUser) GetEmail() string {
	if x != nil {
		return x.Email
	}
	return ""
}

func (x *RecentUser) GetCreatedAt() int64 {
	if x != nil {
		return x.CreatedAt
	}
	return 0
}

type GetRecentUsersForTenantResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Users         []*RecentUser          `protobuf:"bytes,1,rep,name=users,proto3" json:"users,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetRecentUsersForTenantResponse) Reset() {
	*x = GetRecentUsersForTenantResponse{}
	mi := &file_server_v1_server_proto_msgTypes[55]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetRecentUsersForTenantResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetRecentUsersForTenantResponse) ProtoMessage() {}

func (x *GetRecentUsersForTenantResponse) ProtoReflect() protoreflect.Message {
	mi := &file_server_v1_server_proto_msgTypes[55]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetRecentUsersForTenantResponse.ProtoReflect.Descriptor instead.
func (*GetRecentUsersForTenantResponse) Descriptor() ([]byte, []int) {
	return file_server_v1_server_proto_rawDescGZIP(), []int{55}
}

func (x *GetRecentUsersForTenantResponse) GetUsers() []*RecentUser {
	if x != nil {
		return x.Users
	}
	return nil
}

// Request message for offboarding a cluster
type OffboardClusterRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	ClusterId     string                 `protobuf:"bytes,1,opt,name=cluster_id,json=clusterId,proto3" json:"cluster_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *OffboardClusterRequest) Reset() {
	*x = OffboardClusterRequest{}
	mi := &file_server_v1_server_proto_msgTypes[56]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *OffboardClusterRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OffboardClusterRequest) ProtoMessage() {}

func (x *OffboardClusterRequest) ProtoReflect() protoreflect.Message {
	mi := &file_server_v1_server_proto_msgTypes[56]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OffboardClusterRequest.ProtoReflect.Descriptor instead.
func (*OffboardClusterRequest) Descriptor() ([]byte, []int) {
	return file_server_v1_server_proto_rawDescGZIP(), []int{56}
}

func (x *OffboardClusterRequest) GetClusterId() string {
	if x != nil {
		return x.ClusterId
	}
	return ""
}

// Response message for offboarding a cluster
type OffboardClusterResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *OffboardClusterResponse) Reset() {
	*x = OffboardClusterResponse{}
	mi := &file_server_v1_server_proto_msgTypes[57]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *OffboardClusterResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OffboardClusterResponse) ProtoMessage() {}

func (x *OffboardClusterResponse) ProtoReflect() protoreflect.Message {
	mi := &file_server_v1_server_proto_msgTypes[57]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OffboardClusterResponse.ProtoReflect.Descriptor instead.
func (*OffboardClusterResponse) Descriptor() ([]byte, []int) {
	return file_server_v1_server_proto_rawDescGZIP(), []int{57}
}

// Request message for listing cluster summaries
type ListClusterSummariesRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The maximum number of results to return (server may return fewer).
	// Defaults to 50, maximum 100.
	PageSize int32 `protobuf:"varint,1,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`
	// An opaque token returned by a previous call. Treated as the cursor.
	PageToken     string `protobuf:"bytes,2,opt,name=page_token,json=pageToken,proto3" json:"page_token,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListClusterSummariesRequest) Reset() {
	*x = ListClusterSummariesRequest{}
	mi := &file_server_v1_server_proto_msgTypes[58]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListClusterSummariesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListClusterSummariesRequest) ProtoMessage() {}

func (x *ListClusterSummariesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_server_v1_server_proto_msgTypes[58]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListClusterSummariesRequest.ProtoReflect.Descriptor instead.
func (*ListClusterSummariesRequest) Descriptor() ([]byte, []int) {
	return file_server_v1_server_proto_rawDescGZIP(), []int{58}
}

func (x *ListClusterSummariesRequest) GetPageSize() int32 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *ListClusterSummariesRequest) GetPageToken() string {
	if x != nil {
		return x.PageToken
	}
	return ""
}

// Cluster summary for listing operator credentials
type ClusterSummary struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	ClusterId     string                 `protobuf:"bytes,1,opt,name=cluster_id,json=clusterId,proto3" json:"cluster_id,omitempty"`        // Unique cluster identifier
	ClusterName   string                 `protobuf:"bytes,2,opt,name=cluster_name,json=clusterName,proto3" json:"cluster_name,omitempty"`  // Cluster name provided by user
	Description   string                 `protobuf:"bytes,3,opt,name=description,proto3" json:"description,omitempty"`                     // Description provided during creation
	CreatedAt     int64                  `protobuf:"varint,4,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`       // Unix timestamp when cluster was created
	ExpiresAt     int64                  `protobuf:"varint,5,opt,name=expires_at,json=expiresAt,proto3" json:"expires_at,omitempty"`       // Unix timestamp when token expires
	IsExpired     bool                   `protobuf:"varint,6,opt,name=is_expired,json=isExpired,proto3" json:"is_expired,omitempty"`       // Whether the token has expired
	LastSeen      int64                  `protobuf:"varint,7,opt,name=last_seen,json=lastSeen,proto3" json:"last_seen,omitempty"`          // Unix timestamp when cluster was last seen (0 if never connected)
	IsConnected   bool                   `protobuf:"varint,8,opt,name=is_connected,json=isConnected,proto3" json:"is_connected,omitempty"` // Whether the cluster is currently connected (last seen within 5 minutes)
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ClusterSummary) Reset() {
	*x = ClusterSummary{}
	mi := &file_server_v1_server_proto_msgTypes[59]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ClusterSummary) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClusterSummary) ProtoMessage() {}

func (x *ClusterSummary) ProtoReflect() protoreflect.Message {
	mi := &file_server_v1_server_proto_msgTypes[59]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClusterSummary.ProtoReflect.Descriptor instead.
func (*ClusterSummary) Descriptor() ([]byte, []int) {
	return file_server_v1_server_proto_rawDescGZIP(), []int{59}
}

func (x *ClusterSummary) GetClusterId() string {
	if x != nil {
		return x.ClusterId
	}
	return ""
}

func (x *ClusterSummary) GetClusterName() string {
	if x != nil {
		return x.ClusterName
	}
	return ""
}

func (x *ClusterSummary) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *ClusterSummary) GetCreatedAt() int64 {
	if x != nil {
		return x.CreatedAt
	}
	return 0
}

func (x *ClusterSummary) GetExpiresAt() int64 {
	if x != nil {
		return x.ExpiresAt
	}
	return 0
}

func (x *ClusterSummary) GetIsExpired() bool {
	if x != nil {
		return x.IsExpired
	}
	return false
}

func (x *ClusterSummary) GetLastSeen() int64 {
	if x != nil {
		return x.LastSeen
	}
	return 0
}

func (x *ClusterSummary) GetIsConnected() bool {
	if x != nil {
		return x.IsConnected
	}
	return false
}

// Response message for listing cluster summaries
type ListClusterSummariesResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Clusters      []*ClusterSummary      `protobuf:"bytes,1,rep,name=clusters,proto3" json:"clusters,omitempty"`                                  // List of cluster summaries
	NextPageToken string                 `protobuf:"bytes,2,opt,name=next_page_token,json=nextPageToken,proto3" json:"next_page_token,omitempty"` // empty = last page
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListClusterSummariesResponse) Reset() {
	*x = ListClusterSummariesResponse{}
	mi := &file_server_v1_server_proto_msgTypes[60]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListClusterSummariesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListClusterSummariesResponse) ProtoMessage() {}

func (x *ListClusterSummariesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_server_v1_server_proto_msgTypes[60]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListClusterSummariesResponse.ProtoReflect.Descriptor instead.
func (*ListClusterSummariesResponse) Descriptor() ([]byte, []int) {
	return file_server_v1_server_proto_rawDescGZIP(), []int{60}
}

func (x *ListClusterSummariesResponse) GetClusters() []*ClusterSummary {
	if x != nil {
		return x.Clusters
	}
	return nil
}

func (x *ListClusterSummariesResponse) GetNextPageToken() string {
	if x != nil {
		return x.NextPageToken
	}
	return ""
}

// Request message for getting current user
type GetCurrentUserRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetCurrentUserRequest) Reset() {
	*x = GetCurrentUserRequest{}
	mi := &file_server_v1_server_proto_msgTypes[61]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetCurrentUserRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetCurrentUserRequest) ProtoMessage() {}

func (x *GetCurrentUserRequest) ProtoReflect() protoreflect.Message {
	mi := &file_server_v1_server_proto_msgTypes[61]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetCurrentUserRequest.ProtoReflect.Descriptor instead.
func (*GetCurrentUserRequest) Descriptor() ([]byte, []int) {
	return file_server_v1_server_proto_rawDescGZIP(), []int{61}
}

// Response message for getting current user
type GetCurrentUserResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	UserId        string                 `protobuf:"bytes,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	Email         string                 `protobuf:"bytes,2,opt,name=email,proto3" json:"email,omitempty"`
	Role          string                 `protobuf:"bytes,3,opt,name=role,proto3" json:"role,omitempty"`
	TenantId      string                 `protobuf:"bytes,4,opt,name=tenant_id,json=tenantId,proto3" json:"tenant_id,omitempty"`
	CreatedAt     int64                  `protobuf:"varint,5,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetCurrentUserResponse) Reset() {
	*x = GetCurrentUserResponse{}
	mi := &file_server_v1_server_proto_msgTypes[62]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetCurrentUserResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetCurrentUserResponse) ProtoMessage() {}

func (x *GetCurrentUserResponse) ProtoReflect() protoreflect.Message {
	mi := &file_server_v1_server_proto_msgTypes[62]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetCurrentUserResponse.ProtoReflect.Descriptor instead.
func (*GetCurrentUserResponse) Descriptor() ([]byte, []int) {
	return file_server_v1_server_proto_rawDescGZIP(), []int{62}
}

func (x *GetCurrentUserResponse) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *GetCurrentUserResponse) GetEmail() string {
	if x != nil {
		return x.Email
	}
	return ""
}

func (x *GetCurrentUserResponse) GetRole() string {
	if x != nil {
		return x.Role
	}
	return ""
}

func (x *GetCurrentUserResponse) GetTenantId() string {
	if x != nil {
		return x.TenantId
	}
	return ""
}

func (x *GetCurrentUserResponse) GetCreatedAt() int64 {
	if x != nil {
		return x.CreatedAt
	}
	return 0
}

// Request message for updating user profile
type UpdateUserProfileRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Email         string                 `protobuf:"bytes,1,opt,name=email,proto3" json:"email,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UpdateUserProfileRequest) Reset() {
	*x = UpdateUserProfileRequest{}
	mi := &file_server_v1_server_proto_msgTypes[63]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateUserProfileRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateUserProfileRequest) ProtoMessage() {}

func (x *UpdateUserProfileRequest) ProtoReflect() protoreflect.Message {
	mi := &file_server_v1_server_proto_msgTypes[63]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateUserProfileRequest.ProtoReflect.Descriptor instead.
func (*UpdateUserProfileRequest) Descriptor() ([]byte, []int) {
	return file_server_v1_server_proto_rawDescGZIP(), []int{63}
}

func (x *UpdateUserProfileRequest) GetEmail() string {
	if x != nil {
		return x.Email
	}
	return ""
}

// Response message for updating user profile
type UpdateUserProfileResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Message       string                 `protobuf:"bytes,1,opt,name=message,proto3" json:"message,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UpdateUserProfileResponse) Reset() {
	*x = UpdateUserProfileResponse{}
	mi := &file_server_v1_server_proto_msgTypes[64]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateUserProfileResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateUserProfileResponse) ProtoMessage() {}

func (x *UpdateUserProfileResponse) ProtoReflect() protoreflect.Message {
	mi := &file_server_v1_server_proto_msgTypes[64]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateUserProfileResponse.ProtoReflect.Descriptor instead.
func (*UpdateUserProfileResponse) Descriptor() ([]byte, []int) {
	return file_server_v1_server_proto_rawDescGZIP(), []int{64}
}

func (x *UpdateUserProfileResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

// Request message for updating user role
type UpdateUserRoleRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	UserId        string                 `protobuf:"bytes,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	Role          string                 `protobuf:"bytes,2,opt,name=role,proto3" json:"role,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UpdateUserRoleRequest) Reset() {
	*x = UpdateUserRoleRequest{}
	mi := &file_server_v1_server_proto_msgTypes[65]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateUserRoleRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateUserRoleRequest) ProtoMessage() {}

func (x *UpdateUserRoleRequest) ProtoReflect() protoreflect.Message {
	mi := &file_server_v1_server_proto_msgTypes[65]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateUserRoleRequest.ProtoReflect.Descriptor instead.
func (*UpdateUserRoleRequest) Descriptor() ([]byte, []int) {
	return file_server_v1_server_proto_rawDescGZIP(), []int{65}
}

func (x *UpdateUserRoleRequest) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *UpdateUserRoleRequest) GetRole() string {
	if x != nil {
		return x.Role
	}
	return ""
}

// Response message for updating user role
type UpdateUserRoleResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Message       string                 `protobuf:"bytes,1,opt,name=message,proto3" json:"message,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UpdateUserRoleResponse) Reset() {
	*x = UpdateUserRoleResponse{}
	mi := &file_server_v1_server_proto_msgTypes[66]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateUserRoleResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateUserRoleResponse) ProtoMessage() {}

func (x *UpdateUserRoleResponse) ProtoReflect() protoreflect.Message {
	mi := &file_server_v1_server_proto_msgTypes[66]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateUserRoleResponse.ProtoReflect.Descriptor instead.
func (*UpdateUserRoleResponse) Descriptor() ([]byte, []int) {
	return file_server_v1_server_proto_rawDescGZIP(), []int{66}
}

func (x *UpdateUserRoleResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

// Request message for listing tenant users
type ListTenantUsersRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListTenantUsersRequest) Reset() {
	*x = ListTenantUsersRequest{}
	mi := &file_server_v1_server_proto_msgTypes[67]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListTenantUsersRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListTenantUsersRequest) ProtoMessage() {}

func (x *ListTenantUsersRequest) ProtoReflect() protoreflect.Message {
	mi := &file_server_v1_server_proto_msgTypes[67]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListTenantUsersRequest.ProtoReflect.Descriptor instead.
func (*ListTenantUsersRequest) Descriptor() ([]byte, []int) {
	return file_server_v1_server_proto_rawDescGZIP(), []int{67}
}

// Response message for listing tenant users
type ListTenantUsersResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Users         []*TenantUser          `protobuf:"bytes,1,rep,name=users,proto3" json:"users,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListTenantUsersResponse) Reset() {
	*x = ListTenantUsersResponse{}
	mi := &file_server_v1_server_proto_msgTypes[68]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListTenantUsersResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListTenantUsersResponse) ProtoMessage() {}

func (x *ListTenantUsersResponse) ProtoReflect() protoreflect.Message {
	mi := &file_server_v1_server_proto_msgTypes[68]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListTenantUsersResponse.ProtoReflect.Descriptor instead.
func (*ListTenantUsersResponse) Descriptor() ([]byte, []int) {
	return file_server_v1_server_proto_rawDescGZIP(), []int{68}
}

func (x *ListTenantUsersResponse) GetUsers() []*TenantUser {
	if x != nil {
		return x.Users
	}
	return nil
}

// Tenant user information
type TenantUser struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	UserId        string                 `protobuf:"bytes,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	Email         string                 `protobuf:"bytes,2,opt,name=email,proto3" json:"email,omitempty"`
	Role          string                 `protobuf:"bytes,3,opt,name=role,proto3" json:"role,omitempty"`
	CreatedAt     int64                  `protobuf:"varint,4,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TenantUser) Reset() {
	*x = TenantUser{}
	mi := &file_server_v1_server_proto_msgTypes[69]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TenantUser) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TenantUser) ProtoMessage() {}

func (x *TenantUser) ProtoReflect() protoreflect.Message {
	mi := &file_server_v1_server_proto_msgTypes[69]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TenantUser.ProtoReflect.Descriptor instead.
func (*TenantUser) Descriptor() ([]byte, []int) {
	return file_server_v1_server_proto_rawDescGZIP(), []int{69}
}

func (x *TenantUser) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *TenantUser) GetEmail() string {
	if x != nil {
		return x.Email
	}
	return ""
}

func (x *TenantUser) GetRole() string {
	if x != nil {
		return x.Role
	}
	return ""
}

func (x *TenantUser) GetCreatedAt() int64 {
	if x != nil {
		return x.CreatedAt
	}
	return 0
}

// Request message for inviting a user
type InviteUserRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Email         string                 `protobuf:"bytes,1,opt,name=email,proto3" json:"email,omitempty"`
	Role          string                 `protobuf:"bytes,2,opt,name=role,proto3" json:"role,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *InviteUserRequest) Reset() {
	*x = InviteUserRequest{}
	mi := &file_server_v1_server_proto_msgTypes[70]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *InviteUserRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InviteUserRequest) ProtoMessage() {}

func (x *InviteUserRequest) ProtoReflect() protoreflect.Message {
	mi := &file_server_v1_server_proto_msgTypes[70]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InviteUserRequest.ProtoReflect.Descriptor instead.
func (*InviteUserRequest) Descriptor() ([]byte, []int) {
	return file_server_v1_server_proto_rawDescGZIP(), []int{70}
}

func (x *InviteUserRequest) GetEmail() string {
	if x != nil {
		return x.Email
	}
	return ""
}

func (x *InviteUserRequest) GetRole() string {
	if x != nil {
		return x.Role
	}
	return ""
}

// Response message for inviting a user
type InviteUserResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	InvitationId  string                 `protobuf:"bytes,1,opt,name=invitation_id,json=invitationId,proto3" json:"invitation_id,omitempty"`
	Message       string                 `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *InviteUserResponse) Reset() {
	*x = InviteUserResponse{}
	mi := &file_server_v1_server_proto_msgTypes[71]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *InviteUserResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InviteUserResponse) ProtoMessage() {}

func (x *InviteUserResponse) ProtoReflect() protoreflect.Message {
	mi := &file_server_v1_server_proto_msgTypes[71]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InviteUserResponse.ProtoReflect.Descriptor instead.
func (*InviteUserResponse) Descriptor() ([]byte, []int) {
	return file_server_v1_server_proto_rawDescGZIP(), []int{71}
}

func (x *InviteUserResponse) GetInvitationId() string {
	if x != nil {
		return x.InvitationId
	}
	return ""
}

func (x *InviteUserResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

type RemoveUserFromOrgRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	UserId        string                 `protobuf:"bytes,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RemoveUserFromOrgRequest) Reset() {
	*x = RemoveUserFromOrgRequest{}
	mi := &file_server_v1_server_proto_msgTypes[72]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RemoveUserFromOrgRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RemoveUserFromOrgRequest) ProtoMessage() {}

func (x *RemoveUserFromOrgRequest) ProtoReflect() protoreflect.Message {
	mi := &file_server_v1_server_proto_msgTypes[72]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RemoveUserFromOrgRequest.ProtoReflect.Descriptor instead.
func (*RemoveUserFromOrgRequest) Descriptor() ([]byte, []int) {
	return file_server_v1_server_proto_rawDescGZIP(), []int{72}
}

func (x *RemoveUserFromOrgRequest) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

type RemoveUserFromOrgResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Message       string                 `protobuf:"bytes,1,opt,name=message,proto3" json:"message,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RemoveUserFromOrgResponse) Reset() {
	*x = RemoveUserFromOrgResponse{}
	mi := &file_server_v1_server_proto_msgTypes[73]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RemoveUserFromOrgResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RemoveUserFromOrgResponse) ProtoMessage() {}

func (x *RemoveUserFromOrgResponse) ProtoReflect() protoreflect.Message {
	mi := &file_server_v1_server_proto_msgTypes[73]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RemoveUserFromOrgResponse.ProtoReflect.Descriptor instead.
func (*RemoveUserFromOrgResponse) Descriptor() ([]byte, []int) {
	return file_server_v1_server_proto_rawDescGZIP(), []int{73}
}

func (x *RemoveUserFromOrgResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

// Request message for listing invitations
type ListInvitationsRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListInvitationsRequest) Reset() {
	*x = ListInvitationsRequest{}
	mi := &file_server_v1_server_proto_msgTypes[74]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListInvitationsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListInvitationsRequest) ProtoMessage() {}

func (x *ListInvitationsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_server_v1_server_proto_msgTypes[74]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListInvitationsRequest.ProtoReflect.Descriptor instead.
func (*ListInvitationsRequest) Descriptor() ([]byte, []int) {
	return file_server_v1_server_proto_rawDescGZIP(), []int{74}
}

// Response message for listing invitations
type ListInvitationsResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Invitations   []*Invitation          `protobuf:"bytes,1,rep,name=invitations,proto3" json:"invitations,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListInvitationsResponse) Reset() {
	*x = ListInvitationsResponse{}
	mi := &file_server_v1_server_proto_msgTypes[75]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListInvitationsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListInvitationsResponse) ProtoMessage() {}

func (x *ListInvitationsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_server_v1_server_proto_msgTypes[75]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListInvitationsResponse.ProtoReflect.Descriptor instead.
func (*ListInvitationsResponse) Descriptor() ([]byte, []int) {
	return file_server_v1_server_proto_rawDescGZIP(), []int{75}
}

func (x *ListInvitationsResponse) GetInvitations() []*Invitation {
	if x != nil {
		return x.Invitations
	}
	return nil
}

// Invitation information
type Invitation struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	InvitationId  string                 `protobuf:"bytes,1,opt,name=invitation_id,json=invitationId,proto3" json:"invitation_id,omitempty"`
	Email         string                 `protobuf:"bytes,2,opt,name=email,proto3" json:"email,omitempty"`
	Role          string                 `protobuf:"bytes,3,opt,name=role,proto3" json:"role,omitempty"`
	InvitedBy     string                 `protobuf:"bytes,4,opt,name=invited_by,json=invitedBy,proto3" json:"invited_by,omitempty"`
	CreatedAt     int64                  `protobuf:"varint,5,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	ExpiresAt     int64                  `protobuf:"varint,6,opt,name=expires_at,json=expiresAt,proto3" json:"expires_at,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Invitation) Reset() {
	*x = Invitation{}
	mi := &file_server_v1_server_proto_msgTypes[76]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Invitation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Invitation) ProtoMessage() {}

func (x *Invitation) ProtoReflect() protoreflect.Message {
	mi := &file_server_v1_server_proto_msgTypes[76]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Invitation.ProtoReflect.Descriptor instead.
func (*Invitation) Descriptor() ([]byte, []int) {
	return file_server_v1_server_proto_rawDescGZIP(), []int{76}
}

func (x *Invitation) GetInvitationId() string {
	if x != nil {
		return x.InvitationId
	}
	return ""
}

func (x *Invitation) GetEmail() string {
	if x != nil {
		return x.Email
	}
	return ""
}

func (x *Invitation) GetRole() string {
	if x != nil {
		return x.Role
	}
	return ""
}

func (x *Invitation) GetInvitedBy() string {
	if x != nil {
		return x.InvitedBy
	}
	return ""
}

func (x *Invitation) GetCreatedAt() int64 {
	if x != nil {
		return x.CreatedAt
	}
	return 0
}

func (x *Invitation) GetExpiresAt() int64 {
	if x != nil {
		return x.ExpiresAt
	}
	return 0
}

// Request message for revoking an invitation
type RevokeInvitationRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	InvitationId  string                 `protobuf:"bytes,1,opt,name=invitation_id,json=invitationId,proto3" json:"invitation_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RevokeInvitationRequest) Reset() {
	*x = RevokeInvitationRequest{}
	mi := &file_server_v1_server_proto_msgTypes[77]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RevokeInvitationRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RevokeInvitationRequest) ProtoMessage() {}

func (x *RevokeInvitationRequest) ProtoReflect() protoreflect.Message {
	mi := &file_server_v1_server_proto_msgTypes[77]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RevokeInvitationRequest.ProtoReflect.Descriptor instead.
func (*RevokeInvitationRequest) Descriptor() ([]byte, []int) {
	return file_server_v1_server_proto_rawDescGZIP(), []int{77}
}

func (x *RevokeInvitationRequest) GetInvitationId() string {
	if x != nil {
		return x.InvitationId
	}
	return ""
}

// Response message for revoking an invitation
type RevokeInvitationResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Message       string                 `protobuf:"bytes,1,opt,name=message,proto3" json:"message,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RevokeInvitationResponse) Reset() {
	*x = RevokeInvitationResponse{}
	mi := &file_server_v1_server_proto_msgTypes[78]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RevokeInvitationResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RevokeInvitationResponse) ProtoMessage() {}

func (x *RevokeInvitationResponse) ProtoReflect() protoreflect.Message {
	mi := &file_server_v1_server_proto_msgTypes[78]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RevokeInvitationResponse.ProtoReflect.Descriptor instead.
func (*RevokeInvitationResponse) Descriptor() ([]byte, []int) {
	return file_server_v1_server_proto_rawDescGZIP(), []int{78}
}

func (x *RevokeInvitationResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

// Request message for assigning a namespace owner
type AssignNamespaceOwnerRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	UserId        string                 `protobuf:"bytes,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	NamespaceId   string                 `protobuf:"bytes,2,opt,name=namespace_id,json=namespaceId,proto3" json:"namespace_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *AssignNamespaceOwnerRequest) Reset() {
	*x = AssignNamespaceOwnerRequest{}
	mi := &file_server_v1_server_proto_msgTypes[79]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AssignNamespaceOwnerRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AssignNamespaceOwnerRequest) ProtoMessage() {}

func (x *AssignNamespaceOwnerRequest) ProtoReflect() protoreflect.Message {
	mi := &file_server_v1_server_proto_msgTypes[79]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AssignNamespaceOwnerRequest.ProtoReflect.Descriptor instead.
func (*AssignNamespaceOwnerRequest) Descriptor() ([]byte, []int) {
	return file_server_v1_server_proto_rawDescGZIP(), []int{79}
}

func (x *AssignNamespaceOwnerRequest) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *AssignNamespaceOwnerRequest) GetNamespaceId() string {
	if x != nil {
		return x.NamespaceId
	}
	return ""
}

// Response message for assigning a namespace owner
type AssignNamespaceOwnerResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Message       string                 `protobuf:"bytes,1,opt,name=message,proto3" json:"message,omitempty"` // Success message
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *AssignNamespaceOwnerResponse) Reset() {
	*x = AssignNamespaceOwnerResponse{}
	mi := &file_server_v1_server_proto_msgTypes[80]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AssignNamespaceOwnerResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AssignNamespaceOwnerResponse) ProtoMessage() {}

func (x *AssignNamespaceOwnerResponse) ProtoReflect() protoreflect.Message {
	mi := &file_server_v1_server_proto_msgTypes[80]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AssignNamespaceOwnerResponse.ProtoReflect.Descriptor instead.
func (*AssignNamespaceOwnerResponse) Descriptor() ([]byte, []int) {
	return file_server_v1_server_proto_rawDescGZIP(), []int{80}
}

func (x *AssignNamespaceOwnerResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

// Request message for removing a namespace owner
type RemoveNamespaceOwnerRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	UserId        string                 `protobuf:"bytes,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	NamespaceId   string                 `protobuf:"bytes,2,opt,name=namespace_id,json=namespaceId,proto3" json:"namespace_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RemoveNamespaceOwnerRequest) Reset() {
	*x = RemoveNamespaceOwnerRequest{}
	mi := &file_server_v1_server_proto_msgTypes[81]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RemoveNamespaceOwnerRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RemoveNamespaceOwnerRequest) ProtoMessage() {}

func (x *RemoveNamespaceOwnerRequest) ProtoReflect() protoreflect.Message {
	mi := &file_server_v1_server_proto_msgTypes[81]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RemoveNamespaceOwnerRequest.ProtoReflect.Descriptor instead.
func (*RemoveNamespaceOwnerRequest) Descriptor() ([]byte, []int) {
	return file_server_v1_server_proto_rawDescGZIP(), []int{81}
}

func (x *RemoveNamespaceOwnerRequest) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *RemoveNamespaceOwnerRequest) GetNamespaceId() string {
	if x != nil {
		return x.NamespaceId
	}
	return ""
}

// Response message for removing a namespace owner
type RemoveNamespaceOwnerResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Message       string                 `protobuf:"bytes,1,opt,name=message,proto3" json:"message,omitempty"` // Success message
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RemoveNamespaceOwnerResponse) Reset() {
	*x = RemoveNamespaceOwnerResponse{}
	mi := &file_server_v1_server_proto_msgTypes[82]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RemoveNamespaceOwnerResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RemoveNamespaceOwnerResponse) ProtoMessage() {}

func (x *RemoveNamespaceOwnerResponse) ProtoReflect() protoreflect.Message {
	mi := &file_server_v1_server_proto_msgTypes[82]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RemoveNamespaceOwnerResponse.ProtoReflect.Descriptor instead.
func (*RemoveNamespaceOwnerResponse) Descriptor() ([]byte, []int) {
	return file_server_v1_server_proto_rawDescGZIP(), []int{82}
}

func (x *RemoveNamespaceOwnerResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

// Request message for getting owners of a namespace
type GetNamespaceOwnersRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	NamespaceId   string                 `protobuf:"bytes,1,opt,name=namespace_id,json=namespaceId,proto3" json:"namespace_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetNamespaceOwnersRequest) Reset() {
	*x = GetNamespaceOwnersRequest{}
	mi := &file_server_v1_server_proto_msgTypes[83]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetNamespaceOwnersRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetNamespaceOwnersRequest) ProtoMessage() {}

func (x *GetNamespaceOwnersRequest) ProtoReflect() protoreflect.Message {
	mi := &file_server_v1_server_proto_msgTypes[83]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetNamespaceOwnersRequest.ProtoReflect.Descriptor instead.
func (*GetNamespaceOwnersRequest) Descriptor() ([]byte, []int) {
	return file_server_v1_server_proto_rawDescGZIP(), []int{83}
}

func (x *GetNamespaceOwnersRequest) GetNamespaceId() string {
	if x != nil {
		return x.NamespaceId
	}
	return ""
}

// Response message for getting owners of a namespace
type GetNamespaceOwnersResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	UserIds       []string               `protobuf:"bytes,1,rep,name=user_ids,json=userIds,proto3" json:"user_ids,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetNamespaceOwnersResponse) Reset() {
	*x = GetNamespaceOwnersResponse{}
	mi := &file_server_v1_server_proto_msgTypes[84]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetNamespaceOwnersResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetNamespaceOwnersResponse) ProtoMessage() {}

func (x *GetNamespaceOwnersResponse) ProtoReflect() protoreflect.Message {
	mi := &file_server_v1_server_proto_msgTypes[84]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetNamespaceOwnersResponse.ProtoReflect.Descriptor instead.
func (*GetNamespaceOwnersResponse) Descriptor() ([]byte, []int) {
	return file_server_v1_server_proto_rawDescGZIP(), []int{84}
}

func (x *GetNamespaceOwnersResponse) GetUserIds() []string {
	if x != nil {
		return x.UserIds
	}
	return nil
}

type RequestNamespaceOwnershipRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	NamespaceId   string                 `protobuf:"bytes,1,opt,name=namespace_id,json=namespaceId,proto3" json:"namespace_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RequestNamespaceOwnershipRequest) Reset() {
	*x = RequestNamespaceOwnershipRequest{}
	mi := &file_server_v1_server_proto_msgTypes[85]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RequestNamespaceOwnershipRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RequestNamespaceOwnershipRequest) ProtoMessage() {}

func (x *RequestNamespaceOwnershipRequest) ProtoReflect() protoreflect.Message {
	mi := &file_server_v1_server_proto_msgTypes[85]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RequestNamespaceOwnershipRequest.ProtoReflect.Descriptor instead.
func (*RequestNamespaceOwnershipRequest) Descriptor() ([]byte, []int) {
	return file_server_v1_server_proto_rawDescGZIP(), []int{85}
}

func (x *RequestNamespaceOwnershipRequest) GetNamespaceId() string {
	if x != nil {
		return x.NamespaceId
	}
	return ""
}

type RequestNamespaceOwnershipResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	RequestId     string                 `protobuf:"bytes,1,opt,name=request_id,json=requestId,proto3" json:"request_id,omitempty"`
	Message       string                 `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RequestNamespaceOwnershipResponse) Reset() {
	*x = RequestNamespaceOwnershipResponse{}
	mi := &file_server_v1_server_proto_msgTypes[86]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RequestNamespaceOwnershipResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RequestNamespaceOwnershipResponse) ProtoMessage() {}

func (x *RequestNamespaceOwnershipResponse) ProtoReflect() protoreflect.Message {
	mi := &file_server_v1_server_proto_msgTypes[86]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RequestNamespaceOwnershipResponse.ProtoReflect.Descriptor instead.
func (*RequestNamespaceOwnershipResponse) Descriptor() ([]byte, []int) {
	return file_server_v1_server_proto_rawDescGZIP(), []int{86}
}

func (x *RequestNamespaceOwnershipResponse) GetRequestId() string {
	if x != nil {
		return x.RequestId
	}
	return ""
}

func (x *RequestNamespaceOwnershipResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

type ListNamespaceOwnershipRequestsRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListNamespaceOwnershipRequestsRequest) Reset() {
	*x = ListNamespaceOwnershipRequestsRequest{}
	mi := &file_server_v1_server_proto_msgTypes[87]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListNamespaceOwnershipRequestsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListNamespaceOwnershipRequestsRequest) ProtoMessage() {}

func (x *ListNamespaceOwnershipRequestsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_server_v1_server_proto_msgTypes[87]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListNamespaceOwnershipRequestsRequest.ProtoReflect.Descriptor instead.
func (*ListNamespaceOwnershipRequestsRequest) Descriptor() ([]byte, []int) {
	return file_server_v1_server_proto_rawDescGZIP(), []int{87}
}

type ListNamespaceOwnershipRequestsResponse struct {
	state         protoimpl.MessageState       `protogen:"open.v1"`
	Requests      []*NamespaceOwnershipRequest `protobuf:"bytes,1,rep,name=requests,proto3" json:"requests,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListNamespaceOwnershipRequestsResponse) Reset() {
	*x = ListNamespaceOwnershipRequestsResponse{}
	mi := &file_server_v1_server_proto_msgTypes[88]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListNamespaceOwnershipRequestsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListNamespaceOwnershipRequestsResponse) ProtoMessage() {}

func (x *ListNamespaceOwnershipRequestsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_server_v1_server_proto_msgTypes[88]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListNamespaceOwnershipRequestsResponse.ProtoReflect.Descriptor instead.
func (*ListNamespaceOwnershipRequestsResponse) Descriptor() ([]byte, []int) {
	return file_server_v1_server_proto_rawDescGZIP(), []int{88}
}

func (x *ListNamespaceOwnershipRequestsResponse) GetRequests() []*NamespaceOwnershipRequest {
	if x != nil {
		return x.Requests
	}
	return nil
}

type NamespaceOwnershipRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	NamespaceId   string                 `protobuf:"bytes,2,opt,name=namespace_id,json=namespaceId,proto3" json:"namespace_id,omitempty"`
	UserId        string                 `protobuf:"bytes,3,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	Status        string                 `protobuf:"bytes,4,opt,name=status,proto3" json:"status,omitempty"`
	CreatedAt     int64                  `protobuf:"varint,5,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	UserEmail     string                 `protobuf:"bytes,6,opt,name=user_email,json=userEmail,proto3" json:"user_email,omitempty"`
	NamespaceName string                 `protobuf:"bytes,7,opt,name=namespace_name,json=namespaceName,proto3" json:"namespace_name,omitempty"`
	ClusterName   string                 `protobuf:"bytes,8,opt,name=cluster_name,json=clusterName,proto3" json:"cluster_name,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *NamespaceOwnershipRequest) Reset() {
	*x = NamespaceOwnershipRequest{}
	mi := &file_server_v1_server_proto_msgTypes[89]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *NamespaceOwnershipRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NamespaceOwnershipRequest) ProtoMessage() {}

func (x *NamespaceOwnershipRequest) ProtoReflect() protoreflect.Message {
	mi := &file_server_v1_server_proto_msgTypes[89]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NamespaceOwnershipRequest.ProtoReflect.Descriptor instead.
func (*NamespaceOwnershipRequest) Descriptor() ([]byte, []int) {
	return file_server_v1_server_proto_rawDescGZIP(), []int{89}
}

func (x *NamespaceOwnershipRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *NamespaceOwnershipRequest) GetNamespaceId() string {
	if x != nil {
		return x.NamespaceId
	}
	return ""
}

func (x *NamespaceOwnershipRequest) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *NamespaceOwnershipRequest) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *NamespaceOwnershipRequest) GetCreatedAt() int64 {
	if x != nil {
		return x.CreatedAt
	}
	return 0
}

func (x *NamespaceOwnershipRequest) GetUserEmail() string {
	if x != nil {
		return x.UserEmail
	}
	return ""
}

func (x *NamespaceOwnershipRequest) GetNamespaceName() string {
	if x != nil {
		return x.NamespaceName
	}
	return ""
}

func (x *NamespaceOwnershipRequest) GetClusterName() string {
	if x != nil {
		return x.ClusterName
	}
	return ""
}

type ApproveOwnershipRequestRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	RequestId     string                 `protobuf:"bytes,1,opt,name=request_id,json=requestId,proto3" json:"request_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ApproveOwnershipRequestRequest) Reset() {
	*x = ApproveOwnershipRequestRequest{}
	mi := &file_server_v1_server_proto_msgTypes[90]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ApproveOwnershipRequestRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ApproveOwnershipRequestRequest) ProtoMessage() {}

func (x *ApproveOwnershipRequestRequest) ProtoReflect() protoreflect.Message {
	mi := &file_server_v1_server_proto_msgTypes[90]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ApproveOwnershipRequestRequest.ProtoReflect.Descriptor instead.
func (*ApproveOwnershipRequestRequest) Descriptor() ([]byte, []int) {
	return file_server_v1_server_proto_rawDescGZIP(), []int{90}
}

func (x *ApproveOwnershipRequestRequest) GetRequestId() string {
	if x != nil {
		return x.RequestId
	}
	return ""
}

type ApproveOwnershipRequestResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Message       string                 `protobuf:"bytes,1,opt,name=message,proto3" json:"message,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ApproveOwnershipRequestResponse) Reset() {
	*x = ApproveOwnershipRequestResponse{}
	mi := &file_server_v1_server_proto_msgTypes[91]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ApproveOwnershipRequestResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ApproveOwnershipRequestResponse) ProtoMessage() {}

func (x *ApproveOwnershipRequestResponse) ProtoReflect() protoreflect.Message {
	mi := &file_server_v1_server_proto_msgTypes[91]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ApproveOwnershipRequestResponse.ProtoReflect.Descriptor instead.
func (*ApproveOwnershipRequestResponse) Descriptor() ([]byte, []int) {
	return file_server_v1_server_proto_rawDescGZIP(), []int{91}
}

func (x *ApproveOwnershipRequestResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

type RejectOwnershipRequestRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	RequestId     string                 `protobuf:"bytes,1,opt,name=request_id,json=requestId,proto3" json:"request_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RejectOwnershipRequestRequest) Reset() {
	*x = RejectOwnershipRequestRequest{}
	mi := &file_server_v1_server_proto_msgTypes[92]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RejectOwnershipRequestRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RejectOwnershipRequestRequest) ProtoMessage() {}

func (x *RejectOwnershipRequestRequest) ProtoReflect() protoreflect.Message {
	mi := &file_server_v1_server_proto_msgTypes[92]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RejectOwnershipRequestRequest.ProtoReflect.Descriptor instead.
func (*RejectOwnershipRequestRequest) Descriptor() ([]byte, []int) {
	return file_server_v1_server_proto_rawDescGZIP(), []int{92}
}

func (x *RejectOwnershipRequestRequest) GetRequestId() string {
	if x != nil {
		return x.RequestId
	}
	return ""
}

type RejectOwnershipRequestResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Message       string                 `protobuf:"bytes,1,opt,name=message,proto3" json:"message,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RejectOwnershipRequestResponse) Reset() {
	*x = RejectOwnershipRequestResponse{}
	mi := &file_server_v1_server_proto_msgTypes[93]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RejectOwnershipRequestResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RejectOwnershipRequestResponse) ProtoMessage() {}

func (x *RejectOwnershipRequestResponse) ProtoReflect() protoreflect.Message {
	mi := &file_server_v1_server_proto_msgTypes[93]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RejectOwnershipRequestResponse.ProtoReflect.Descriptor instead.
func (*RejectOwnershipRequestResponse) Descriptor() ([]byte, []int) {
	return file_server_v1_server_proto_rawDescGZIP(), []int{93}
}

func (x *RejectOwnershipRequestResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

type GetAllNamespaceOwnershipMappingsRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetAllNamespaceOwnershipMappingsRequest) Reset() {
	*x = GetAllNamespaceOwnershipMappingsRequest{}
	mi := &file_server_v1_server_proto_msgTypes[94]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetAllNamespaceOwnershipMappingsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetAllNamespaceOwnershipMappingsRequest) ProtoMessage() {}

func (x *GetAllNamespaceOwnershipMappingsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_server_v1_server_proto_msgTypes[94]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetAllNamespaceOwnershipMappingsRequest.ProtoReflect.Descriptor instead.
func (*GetAllNamespaceOwnershipMappingsRequest) Descriptor() ([]byte, []int) {
	return file_server_v1_server_proto_rawDescGZIP(), []int{94}
}

type NamespaceAssignment struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	UserId        string                 `protobuf:"bytes,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	NamespaceId   string                 `protobuf:"bytes,2,opt,name=namespace_id,json=namespaceId,proto3" json:"namespace_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *NamespaceAssignment) Reset() {
	*x = NamespaceAssignment{}
	mi := &file_server_v1_server_proto_msgTypes[95]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *NamespaceAssignment) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NamespaceAssignment) ProtoMessage() {}

func (x *NamespaceAssignment) ProtoReflect() protoreflect.Message {
	mi := &file_server_v1_server_proto_msgTypes[95]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NamespaceAssignment.ProtoReflect.Descriptor instead.
func (*NamespaceAssignment) Descriptor() ([]byte, []int) {
	return file_server_v1_server_proto_rawDescGZIP(), []int{95}
}

func (x *NamespaceAssignment) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *NamespaceAssignment) GetNamespaceId() string {
	if x != nil {
		return x.NamespaceId
	}
	return ""
}

type GetAllNamespaceOwnershipMappingsResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Assignments   []*NamespaceAssignment `protobuf:"bytes,1,rep,name=assignments,proto3" json:"assignments,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetAllNamespaceOwnershipMappingsResponse) Reset() {
	*x = GetAllNamespaceOwnershipMappingsResponse{}
	mi := &file_server_v1_server_proto_msgTypes[96]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetAllNamespaceOwnershipMappingsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetAllNamespaceOwnershipMappingsResponse) ProtoMessage() {}

func (x *GetAllNamespaceOwnershipMappingsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_server_v1_server_proto_msgTypes[96]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetAllNamespaceOwnershipMappingsResponse.ProtoReflect.Descriptor instead.
func (*GetAllNamespaceOwnershipMappingsResponse) Descriptor() ([]byte, []int) {
	return file_server_v1_server_proto_rawDescGZIP(), []int{96}
}

func (x *GetAllNamespaceOwnershipMappingsResponse) GetAssignments() []*NamespaceAssignment {
	if x != nil {
		return x.Assignments
	}
	return nil
}

type OwnedNamespace struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Name          string                 `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	ClusterId     string                 `protobuf:"bytes,3,opt,name=cluster_id,json=clusterId,proto3" json:"cluster_id,omitempty"`
	ClusterName   string                 `protobuf:"bytes,4,opt,name=cluster_name,json=clusterName,proto3" json:"cluster_name,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *OwnedNamespace) Reset() {
	*x = OwnedNamespace{}
	mi := &file_server_v1_server_proto_msgTypes[97]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *OwnedNamespace) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OwnedNamespace) ProtoMessage() {}

func (x *OwnedNamespace) ProtoReflect() protoreflect.Message {
	mi := &file_server_v1_server_proto_msgTypes[97]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OwnedNamespace.ProtoReflect.Descriptor instead.
func (*OwnedNamespace) Descriptor() ([]byte, []int) {
	return file_server_v1_server_proto_rawDescGZIP(), []int{97}
}

func (x *OwnedNamespace) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *OwnedNamespace) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *OwnedNamespace) GetClusterId() string {
	if x != nil {
		return x.ClusterId
	}
	return ""
}

func (x *OwnedNamespace) GetClusterName() string {
	if x != nil {
		return x.ClusterName
	}
	return ""
}

type ListMyNamespacesRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListMyNamespacesRequest) Reset() {
	*x = ListMyNamespacesRequest{}
	mi := &file_server_v1_server_proto_msgTypes[98]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListMyNamespacesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListMyNamespacesRequest) ProtoMessage() {}

func (x *ListMyNamespacesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_server_v1_server_proto_msgTypes[98]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListMyNamespacesRequest.ProtoReflect.Descriptor instead.
func (*ListMyNamespacesRequest) Descriptor() ([]byte, []int) {
	return file_server_v1_server_proto_rawDescGZIP(), []int{98}
}

type ListMyNamespacesResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Namespaces    []*OwnedNamespace      `protobuf:"bytes,1,rep,name=namespaces,proto3" json:"namespaces,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListMyNamespacesResponse) Reset() {
	*x = ListMyNamespacesResponse{}
	mi := &file_server_v1_server_proto_msgTypes[99]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListMyNamespacesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListMyNamespacesResponse) ProtoMessage() {}

func (x *ListMyNamespacesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_server_v1_server_proto_msgTypes[99]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListMyNamespacesResponse.ProtoReflect.Descriptor instead.
func (*ListMyNamespacesResponse) Descriptor() ([]byte, []int) {
	return file_server_v1_server_proto_rawDescGZIP(), []int{99}
}

func (x *ListMyNamespacesResponse) GetNamespaces() []*OwnedNamespace {
	if x != nil {
		return x.Namespaces
	}
	return nil
}

// Policy Review Messages
type GetPoliciesAwaitingMyReviewRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The maximum number of results to return (server may return fewer).
	// Defaults to 50, maximum 100.
	PageSize int32 `protobuf:"varint,1,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`
	// An opaque token returned by a previous call. Treated as the cursor.
	PageToken     string `protobuf:"bytes,2,opt,name=page_token,json=pageToken,proto3" json:"page_token,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetPoliciesAwaitingMyReviewRequest) Reset() {
	*x = GetPoliciesAwaitingMyReviewRequest{}
	mi := &file_server_v1_server_proto_msgTypes[100]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetPoliciesAwaitingMyReviewRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetPoliciesAwaitingMyReviewRequest) ProtoMessage() {}

func (x *GetPoliciesAwaitingMyReviewRequest) ProtoReflect() protoreflect.Message {
	mi := &file_server_v1_server_proto_msgTypes[100]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetPoliciesAwaitingMyReviewRequest.ProtoReflect.Descriptor instead.
func (*GetPoliciesAwaitingMyReviewRequest) Descriptor() ([]byte, []int) {
	return file_server_v1_server_proto_rawDescGZIP(), []int{100}
}

func (x *GetPoliciesAwaitingMyReviewRequest) GetPageSize() int32 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *GetPoliciesAwaitingMyReviewRequest) GetPageToken() string {
	if x != nil {
		return x.PageToken
	}
	return ""
}

type PolicyAwaitingReview struct {
	state              protoimpl.MessageState `protogen:"open.v1"`
	PolicyId           string                 `protobuf:"bytes,1,opt,name=policy_id,json=policyId,proto3" json:"policy_id,omitempty"`
	PolicyName         string                 `protobuf:"bytes,2,opt,name=policy_name,json=policyName,proto3" json:"policy_name,omitempty"`
	Namespace          string                 `protobuf:"bytes,3,opt,name=namespace,proto3" json:"namespace,omitempty"`
	ClusterName        string                 `protobuf:"bytes,4,opt,name=cluster_name,json=clusterName,proto3" json:"cluster_name,omitempty"`
	TargetWorkloadName string                 `protobuf:"bytes,5,opt,name=target_workload_name,json=targetWorkloadName,proto3" json:"target_workload_name,omitempty"`
	TargetWorkloadKind string                 `protobuf:"bytes,6,opt,name=target_workload_kind,json=targetWorkloadKind,proto3" json:"target_workload_kind,omitempty"`
	RiskScore          int32                  `protobuf:"varint,7,opt,name=risk_score,json=riskScore,proto3" json:"risk_score,omitempty"`
	RiskRationale      string                 `protobuf:"bytes,8,opt,name=risk_rationale,json=riskRationale,proto3" json:"risk_rationale,omitempty"`
	DestNamespaces     []string               `protobuf:"bytes,9,rep,name=dest_namespaces,json=destNamespaces,proto3" json:"dest_namespaces,omitempty"`
	CreatedAt          int64                  `protobuf:"varint,10,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`         // Unix timestamp
	ReviewerType       string                 `protobuf:"bytes,11,opt,name=reviewer_type,json=reviewerType,proto3" json:"reviewer_type,omitempty"` // "app_developer", "security_admin", or "org_admin"
	NamespaceId        string                 `protobuf:"bytes,12,opt,name=namespace_id,json=namespaceId,proto3" json:"namespace_id,omitempty"`    // Only present for app_developer reviews
	unknownFields      protoimpl.UnknownFields
	sizeCache          protoimpl.SizeCache
}

func (x *PolicyAwaitingReview) Reset() {
	*x = PolicyAwaitingReview{}
	mi := &file_server_v1_server_proto_msgTypes[101]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PolicyAwaitingReview) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PolicyAwaitingReview) ProtoMessage() {}

func (x *PolicyAwaitingReview) ProtoReflect() protoreflect.Message {
	mi := &file_server_v1_server_proto_msgTypes[101]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PolicyAwaitingReview.ProtoReflect.Descriptor instead.
func (*PolicyAwaitingReview) Descriptor() ([]byte, []int) {
	return file_server_v1_server_proto_rawDescGZIP(), []int{101}
}

func (x *PolicyAwaitingReview) GetPolicyId() string {
	if x != nil {
		return x.PolicyId
	}
	return ""
}

func (x *PolicyAwaitingReview) GetPolicyName() string {
	if x != nil {
		return x.PolicyName
	}
	return ""
}

func (x *PolicyAwaitingReview) GetNamespace() string {
	if x != nil {
		return x.Namespace
	}
	return ""
}

func (x *PolicyAwaitingReview) GetClusterName() string {
	if x != nil {
		return x.ClusterName
	}
	return ""
}

func (x *PolicyAwaitingReview) GetTargetWorkloadName() string {
	if x != nil {
		return x.TargetWorkloadName
	}
	return ""
}

func (x *PolicyAwaitingReview) GetTargetWorkloadKind() string {
	if x != nil {
		return x.TargetWorkloadKind
	}
	return ""
}

func (x *PolicyAwaitingReview) GetRiskScore() int32 {
	if x != nil {
		return x.RiskScore
	}
	return 0
}

func (x *PolicyAwaitingReview) GetRiskRationale() string {
	if x != nil {
		return x.RiskRationale
	}
	return ""
}

func (x *PolicyAwaitingReview) GetDestNamespaces() []string {
	if x != nil {
		return x.DestNamespaces
	}
	return nil
}

func (x *PolicyAwaitingReview) GetCreatedAt() int64 {
	if x != nil {
		return x.CreatedAt
	}
	return 0
}

func (x *PolicyAwaitingReview) GetReviewerType() string {
	if x != nil {
		return x.ReviewerType
	}
	return ""
}

func (x *PolicyAwaitingReview) GetNamespaceId() string {
	if x != nil {
		return x.NamespaceId
	}
	return ""
}

type GetPoliciesAwaitingMyReviewResponse struct {
	state         protoimpl.MessageState  `protogen:"open.v1"`
	Policies      []*PolicyAwaitingReview `protobuf:"bytes,1,rep,name=policies,proto3" json:"policies,omitempty"`
	NextPageToken string                  `protobuf:"bytes,2,opt,name=next_page_token,json=nextPageToken,proto3" json:"next_page_token,omitempty"` // empty = last page
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetPoliciesAwaitingMyReviewResponse) Reset() {
	*x = GetPoliciesAwaitingMyReviewResponse{}
	mi := &file_server_v1_server_proto_msgTypes[102]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetPoliciesAwaitingMyReviewResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetPoliciesAwaitingMyReviewResponse) ProtoMessage() {}

func (x *GetPoliciesAwaitingMyReviewResponse) ProtoReflect() protoreflect.Message {
	mi := &file_server_v1_server_proto_msgTypes[102]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetPoliciesAwaitingMyReviewResponse.ProtoReflect.Descriptor instead.
func (*GetPoliciesAwaitingMyReviewResponse) Descriptor() ([]byte, []int) {
	return file_server_v1_server_proto_rawDescGZIP(), []int{102}
}

func (x *GetPoliciesAwaitingMyReviewResponse) GetPolicies() []*PolicyAwaitingReview {
	if x != nil {
		return x.Policies
	}
	return nil
}

func (x *GetPoliciesAwaitingMyReviewResponse) GetNextPageToken() string {
	if x != nil {
		return x.NextPageToken
	}
	return ""
}

type GetMyPendingReviewCountRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetMyPendingReviewCountRequest) Reset() {
	*x = GetMyPendingReviewCountRequest{}
	mi := &file_server_v1_server_proto_msgTypes[103]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetMyPendingReviewCountRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetMyPendingReviewCountRequest) ProtoMessage() {}

func (x *GetMyPendingReviewCountRequest) ProtoReflect() protoreflect.Message {
	mi := &file_server_v1_server_proto_msgTypes[103]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetMyPendingReviewCountRequest.ProtoReflect.Descriptor instead.
func (*GetMyPendingReviewCountRequest) Descriptor() ([]byte, []int) {
	return file_server_v1_server_proto_rawDescGZIP(), []int{103}
}

type GetMyPendingReviewCountResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	PendingCount  int32                  `protobuf:"varint,1,opt,name=pending_count,json=pendingCount,proto3" json:"pending_count,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetMyPendingReviewCountResponse) Reset() {
	*x = GetMyPendingReviewCountResponse{}
	mi := &file_server_v1_server_proto_msgTypes[104]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetMyPendingReviewCountResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetMyPendingReviewCountResponse) ProtoMessage() {}

func (x *GetMyPendingReviewCountResponse) ProtoReflect() protoreflect.Message {
	mi := &file_server_v1_server_proto_msgTypes[104]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetMyPendingReviewCountResponse.ProtoReflect.Descriptor instead.
func (*GetMyPendingReviewCountResponse) Descriptor() ([]byte, []int) {
	return file_server_v1_server_proto_rawDescGZIP(), []int{104}
}

func (x *GetMyPendingReviewCountResponse) GetPendingCount() int32 {
	if x != nil {
		return x.PendingCount
	}
	return 0
}

type SubmitPolicyReviewRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	PolicyId      string                 `protobuf:"bytes,1,opt,name=policy_id,json=policyId,proto3" json:"policy_id,omitempty"`
	Status        PolicyReviewStatus     `protobuf:"varint,2,opt,name=status,proto3,enum=server.v1.PolicyReviewStatus" json:"status,omitempty"` // POLICY_REVIEW_STATUS_APPROVED or POLICY_REVIEW_STATUS_REJECTED
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SubmitPolicyReviewRequest) Reset() {
	*x = SubmitPolicyReviewRequest{}
	mi := &file_server_v1_server_proto_msgTypes[105]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SubmitPolicyReviewRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SubmitPolicyReviewRequest) ProtoMessage() {}

func (x *SubmitPolicyReviewRequest) ProtoReflect() protoreflect.Message {
	mi := &file_server_v1_server_proto_msgTypes[105]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SubmitPolicyReviewRequest.ProtoReflect.Descriptor instead.
func (*SubmitPolicyReviewRequest) Descriptor() ([]byte, []int) {
	return file_server_v1_server_proto_rawDescGZIP(), []int{105}
}

func (x *SubmitPolicyReviewRequest) GetPolicyId() string {
	if x != nil {
		return x.PolicyId
	}
	return ""
}

func (x *SubmitPolicyReviewRequest) GetStatus() PolicyReviewStatus {
	if x != nil {
		return x.Status
	}
	return PolicyReviewStatus_POLICY_REVIEW_STATUS_UNSPECIFIED
}

type SubmitPolicyReviewResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Message       string                 `protobuf:"bytes,1,opt,name=message,proto3" json:"message,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SubmitPolicyReviewResponse) Reset() {
	*x = SubmitPolicyReviewResponse{}
	mi := &file_server_v1_server_proto_msgTypes[106]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SubmitPolicyReviewResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SubmitPolicyReviewResponse) ProtoMessage() {}

func (x *SubmitPolicyReviewResponse) ProtoReflect() protoreflect.Message {
	mi := &file_server_v1_server_proto_msgTypes[106]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SubmitPolicyReviewResponse.ProtoReflect.Descriptor instead.
func (*SubmitPolicyReviewResponse) Descriptor() ([]byte, []int) {
	return file_server_v1_server_proto_rawDescGZIP(), []int{106}
}

func (x *SubmitPolicyReviewResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

type GetPolicyReviewStatusRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	PolicyId      string                 `protobuf:"bytes,1,opt,name=policy_id,json=policyId,proto3" json:"policy_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetPolicyReviewStatusRequest) Reset() {
	*x = GetPolicyReviewStatusRequest{}
	mi := &file_server_v1_server_proto_msgTypes[107]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetPolicyReviewStatusRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetPolicyReviewStatusRequest) ProtoMessage() {}

func (x *GetPolicyReviewStatusRequest) ProtoReflect() protoreflect.Message {
	mi := &file_server_v1_server_proto_msgTypes[107]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetPolicyReviewStatusRequest.ProtoReflect.Descriptor instead.
func (*GetPolicyReviewStatusRequest) Descriptor() ([]byte, []int) {
	return file_server_v1_server_proto_rawDescGZIP(), []int{107}
}

func (x *GetPolicyReviewStatusRequest) GetPolicyId() string {
	if x != nil {
		return x.PolicyId
	}
	return ""
}

type PolicyReviewAssignment struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	UserId        string                 `protobuf:"bytes,2,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	UserEmail     string                 `protobuf:"bytes,3,opt,name=user_email,json=userEmail,proto3" json:"user_email,omitempty"`             // for display
	ReviewerType  string                 `protobuf:"bytes,4,opt,name=reviewer_type,json=reviewerType,proto3" json:"reviewer_type,omitempty"`    // "app_developer", "security_admin", or "org_admin"
	NamespaceId   string                 `protobuf:"bytes,5,opt,name=namespace_id,json=namespaceId,proto3" json:"namespace_id,omitempty"`       // Only present for app_developer reviews
	NamespaceName string                 `protobuf:"bytes,6,opt,name=namespace_name,json=namespaceName,proto3" json:"namespace_name,omitempty"` // For display
	Status        PolicyReviewStatus     `protobuf:"varint,7,opt,name=status,proto3,enum=server.v1.PolicyReviewStatus" json:"status,omitempty"` // POLICY_REVIEW_STATUS_PENDING, POLICY_REVIEW_STATUS_APPROVED, POLICY_REVIEW_STATUS_REJECTED
	ReviewedAt    int64                  `protobuf:"varint,8,opt,name=reviewed_at,json=reviewedAt,proto3" json:"reviewed_at,omitempty"`         // Unix timestamp, 0 if not reviewed
	CreatedAt     int64                  `protobuf:"varint,9,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`            // Unix timestamp
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *PolicyReviewAssignment) Reset() {
	*x = PolicyReviewAssignment{}
	mi := &file_server_v1_server_proto_msgTypes[108]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PolicyReviewAssignment) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PolicyReviewAssignment) ProtoMessage() {}

func (x *PolicyReviewAssignment) ProtoReflect() protoreflect.Message {
	mi := &file_server_v1_server_proto_msgTypes[108]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PolicyReviewAssignment.ProtoReflect.Descriptor instead.
func (*PolicyReviewAssignment) Descriptor() ([]byte, []int) {
	return file_server_v1_server_proto_rawDescGZIP(), []int{108}
}

func (x *PolicyReviewAssignment) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *PolicyReviewAssignment) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *PolicyReviewAssignment) GetUserEmail() string {
	if x != nil {
		return x.UserEmail
	}
	return ""
}

func (x *PolicyReviewAssignment) GetReviewerType() string {
	if x != nil {
		return x.ReviewerType
	}
	return ""
}

func (x *PolicyReviewAssignment) GetNamespaceId() string {
	if x != nil {
		return x.NamespaceId
	}
	return ""
}

func (x *PolicyReviewAssignment) GetNamespaceName() string {
	if x != nil {
		return x.NamespaceName
	}
	return ""
}

func (x *PolicyReviewAssignment) GetStatus() PolicyReviewStatus {
	if x != nil {
		return x.Status
	}
	return PolicyReviewStatus_POLICY_REVIEW_STATUS_UNSPECIFIED
}

func (x *PolicyReviewAssignment) GetReviewedAt() int64 {
	if x != nil {
		return x.ReviewedAt
	}
	return 0
}

func (x *PolicyReviewAssignment) GetCreatedAt() int64 {
	if x != nil {
		return x.CreatedAt
	}
	return 0
}

type PolicyReviewSummary struct {
	state                       protoimpl.MessageState `protogen:"open.v1"`
	PolicyId                    string                 `protobuf:"bytes,1,opt,name=policy_id,json=policyId,proto3" json:"policy_id,omitempty"`
	TotalReviewers              int32                  `protobuf:"varint,2,opt,name=total_reviewers,json=totalReviewers,proto3" json:"total_reviewers,omitempty"`
	ApprovedReviews             int32                  `protobuf:"varint,3,opt,name=approved_reviews,json=approvedReviews,proto3" json:"approved_reviews,omitempty"`
	RejectedReviews             int32                  `protobuf:"varint,4,opt,name=rejected_reviews,json=rejectedReviews,proto3" json:"rejected_reviews,omitempty"`
	PendingReviews              int32                  `protobuf:"varint,5,opt,name=pending_reviews,json=pendingReviews,proto3" json:"pending_reviews,omitempty"`
	RequiresSecurityAdminReview bool                   `protobuf:"varint,6,opt,name=requires_security_admin_review,json=requiresSecurityAdminReview,proto3" json:"requires_security_admin_review,omitempty"`
	SecurityAdminTotal          int32                  `protobuf:"varint,7,opt,name=security_admin_total,json=securityAdminTotal,proto3" json:"security_admin_total,omitempty"`
	SecurityAdminApprovals      int32                  `protobuf:"varint,8,opt,name=security_admin_approvals,json=securityAdminApprovals,proto3" json:"security_admin_approvals,omitempty"`
	HasSecurityAdminApproval    bool                   `protobuf:"varint,9,opt,name=has_security_admin_approval,json=hasSecurityAdminApproval,proto3" json:"has_security_admin_approval,omitempty"` // At least one security admin approved
	AllAppDevelopersApproved    bool                   `protobuf:"varint,10,opt,name=all_app_developers_approved,json=allAppDevelopersApproved,proto3" json:"all_app_developers_approved,omitempty"`
	CanBeApplied                bool                   `protobuf:"varint,11,opt,name=can_be_applied,json=canBeApplied,proto3" json:"can_be_applied,omitempty"`
	unknownFields               protoimpl.UnknownFields
	sizeCache                   protoimpl.SizeCache
}

func (x *PolicyReviewSummary) Reset() {
	*x = PolicyReviewSummary{}
	mi := &file_server_v1_server_proto_msgTypes[109]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PolicyReviewSummary) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PolicyReviewSummary) ProtoMessage() {}

func (x *PolicyReviewSummary) ProtoReflect() protoreflect.Message {
	mi := &file_server_v1_server_proto_msgTypes[109]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PolicyReviewSummary.ProtoReflect.Descriptor instead.
func (*PolicyReviewSummary) Descriptor() ([]byte, []int) {
	return file_server_v1_server_proto_rawDescGZIP(), []int{109}
}

func (x *PolicyReviewSummary) GetPolicyId() string {
	if x != nil {
		return x.PolicyId
	}
	return ""
}

func (x *PolicyReviewSummary) GetTotalReviewers() int32 {
	if x != nil {
		return x.TotalReviewers
	}
	return 0
}

func (x *PolicyReviewSummary) GetApprovedReviews() int32 {
	if x != nil {
		return x.ApprovedReviews
	}
	return 0
}

func (x *PolicyReviewSummary) GetRejectedReviews() int32 {
	if x != nil {
		return x.RejectedReviews
	}
	return 0
}

func (x *PolicyReviewSummary) GetPendingReviews() int32 {
	if x != nil {
		return x.PendingReviews
	}
	return 0
}

func (x *PolicyReviewSummary) GetRequiresSecurityAdminReview() bool {
	if x != nil {
		return x.RequiresSecurityAdminReview
	}
	return false
}

func (x *PolicyReviewSummary) GetSecurityAdminTotal() int32 {
	if x != nil {
		return x.SecurityAdminTotal
	}
	return 0
}

func (x *PolicyReviewSummary) GetSecurityAdminApprovals() int32 {
	if x != nil {
		return x.SecurityAdminApprovals
	}
	return 0
}

func (x *PolicyReviewSummary) GetHasSecurityAdminApproval() bool {
	if x != nil {
		return x.HasSecurityAdminApproval
	}
	return false
}

func (x *PolicyReviewSummary) GetAllAppDevelopersApproved() bool {
	if x != nil {
		return x.AllAppDevelopersApproved
	}
	return false
}

func (x *PolicyReviewSummary) GetCanBeApplied() bool {
	if x != nil {
		return x.CanBeApplied
	}
	return false
}

type GetPolicyReviewStatusResponse struct {
	state         protoimpl.MessageState    `protogen:"open.v1"`
	Summary       *PolicyReviewSummary      `protobuf:"bytes,1,opt,name=summary,proto3" json:"summary,omitempty"`
	Assignments   []*PolicyReviewAssignment `protobuf:"bytes,2,rep,name=assignments,proto3" json:"assignments,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetPolicyReviewStatusResponse) Reset() {
	*x = GetPolicyReviewStatusResponse{}
	mi := &file_server_v1_server_proto_msgTypes[110]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetPolicyReviewStatusResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetPolicyReviewStatusResponse) ProtoMessage() {}

func (x *GetPolicyReviewStatusResponse) ProtoReflect() protoreflect.Message {
	mi := &file_server_v1_server_proto_msgTypes[110]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetPolicyReviewStatusResponse.ProtoReflect.Descriptor instead.
func (*GetPolicyReviewStatusResponse) Descriptor() ([]byte, []int) {
	return file_server_v1_server_proto_rawDescGZIP(), []int{110}
}

func (x *GetPolicyReviewStatusResponse) GetSummary() *PolicyReviewSummary {
	if x != nil {
		return x.Summary
	}
	return nil
}

func (x *GetPolicyReviewStatusResponse) GetAssignments() []*PolicyReviewAssignment {
	if x != nil {
		return x.Assignments
	}
	return nil
}

// Risk Assessment Messages
type TriggerRiskAssessmentRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	ClusterId     string                 `protobuf:"bytes,1,opt,name=cluster_id,json=clusterId,proto3" json:"cluster_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TriggerRiskAssessmentRequest) Reset() {
	*x = TriggerRiskAssessmentRequest{}
	mi := &file_server_v1_server_proto_msgTypes[111]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TriggerRiskAssessmentRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TriggerRiskAssessmentRequest) ProtoMessage() {}

func (x *TriggerRiskAssessmentRequest) ProtoReflect() protoreflect.Message {
	mi := &file_server_v1_server_proto_msgTypes[111]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TriggerRiskAssessmentRequest.ProtoReflect.Descriptor instead.
func (*TriggerRiskAssessmentRequest) Descriptor() ([]byte, []int) {
	return file_server_v1_server_proto_rawDescGZIP(), []int{111}
}

func (x *TriggerRiskAssessmentRequest) GetClusterId() string {
	if x != nil {
		return x.ClusterId
	}
	return ""
}

type TriggerRiskAssessmentResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	AssessmentId  string                 `protobuf:"bytes,1,opt,name=assessment_id,json=assessmentId,proto3" json:"assessment_id,omitempty"`
	Message       string                 `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TriggerRiskAssessmentResponse) Reset() {
	*x = TriggerRiskAssessmentResponse{}
	mi := &file_server_v1_server_proto_msgTypes[112]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TriggerRiskAssessmentResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TriggerRiskAssessmentResponse) ProtoMessage() {}

func (x *TriggerRiskAssessmentResponse) ProtoReflect() protoreflect.Message {
	mi := &file_server_v1_server_proto_msgTypes[112]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TriggerRiskAssessmentResponse.ProtoReflect.Descriptor instead.
func (*TriggerRiskAssessmentResponse) Descriptor() ([]byte, []int) {
	return file_server_v1_server_proto_rawDescGZIP(), []int{112}
}

func (x *TriggerRiskAssessmentResponse) GetAssessmentId() string {
	if x != nil {
		return x.AssessmentId
	}
	return ""
}

func (x *TriggerRiskAssessmentResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

type GetRiskAssessmentStatusRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	AssessmentId  string                 `protobuf:"bytes,1,opt,name=assessment_id,json=assessmentId,proto3" json:"assessment_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetRiskAssessmentStatusRequest) Reset() {
	*x = GetRiskAssessmentStatusRequest{}
	mi := &file_server_v1_server_proto_msgTypes[113]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetRiskAssessmentStatusRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetRiskAssessmentStatusRequest) ProtoMessage() {}

func (x *GetRiskAssessmentStatusRequest) ProtoReflect() protoreflect.Message {
	mi := &file_server_v1_server_proto_msgTypes[113]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetRiskAssessmentStatusRequest.ProtoReflect.Descriptor instead.
func (*GetRiskAssessmentStatusRequest) Descriptor() ([]byte, []int) {
	return file_server_v1_server_proto_rawDescGZIP(), []int{113}
}

func (x *GetRiskAssessmentStatusRequest) GetAssessmentId() string {
	if x != nil {
		return x.AssessmentId
	}
	return ""
}

type RiskAssessmentAgentThinking struct {
	state            protoimpl.MessageState  `protogen:"open.v1"`
	AgentType        RiskAssessmentAgentType `protobuf:"varint,1,opt,name=agent_type,json=agentType,proto3,enum=server.v1.RiskAssessmentAgentType" json:"agent_type,omitempty"`
	ThinkingOverview string                  `protobuf:"bytes,2,opt,name=thinking_overview,json=thinkingOverview,proto3" json:"thinking_overview,omitempty"`
	TurnNumber       int32                   `protobuf:"varint,3,opt,name=turn_number,json=turnNumber,proto3" json:"turn_number,omitempty"`
	ToolCalls        []*ToolCall             `protobuf:"bytes,4,rep,name=tool_calls,json=toolCalls,proto3" json:"tool_calls,omitempty"`
	Findings         string                  `protobuf:"bytes,5,opt,name=findings,proto3" json:"findings,omitempty"`
	CreatedAt        int64                   `protobuf:"varint,6,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"` // Unix timestamp
	unknownFields    protoimpl.UnknownFields
	sizeCache        protoimpl.SizeCache
}

func (x *RiskAssessmentAgentThinking) Reset() {
	*x = RiskAssessmentAgentThinking{}
	mi := &file_server_v1_server_proto_msgTypes[114]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RiskAssessmentAgentThinking) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RiskAssessmentAgentThinking) ProtoMessage() {}

func (x *RiskAssessmentAgentThinking) ProtoReflect() protoreflect.Message {
	mi := &file_server_v1_server_proto_msgTypes[114]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RiskAssessmentAgentThinking.ProtoReflect.Descriptor instead.
func (*RiskAssessmentAgentThinking) Descriptor() ([]byte, []int) {
	return file_server_v1_server_proto_rawDescGZIP(), []int{114}
}

func (x *RiskAssessmentAgentThinking) GetAgentType() RiskAssessmentAgentType {
	if x != nil {
		return x.AgentType
	}
	return RiskAssessmentAgentType_RISK_ASSESSMENT_AGENT_TYPE_UNSPECIFIED
}

func (x *RiskAssessmentAgentThinking) GetThinkingOverview() string {
	if x != nil {
		return x.ThinkingOverview
	}
	return ""
}

func (x *RiskAssessmentAgentThinking) GetTurnNumber() int32 {
	if x != nil {
		return x.TurnNumber
	}
	return 0
}

func (x *RiskAssessmentAgentThinking) GetToolCalls() []*ToolCall {
	if x != nil {
		return x.ToolCalls
	}
	return nil
}

func (x *RiskAssessmentAgentThinking) GetFindings() string {
	if x != nil {
		return x.Findings
	}
	return ""
}

func (x *RiskAssessmentAgentThinking) GetCreatedAt() int64 {
	if x != nil {
		return x.CreatedAt
	}
	return 0
}

type ToolCall struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Tool          string                 `protobuf:"bytes,1,opt,name=tool,proto3" json:"tool,omitempty"` // kubectl, bash, cilium
	Cmd           string                 `protobuf:"bytes,2,opt,name=cmd,proto3" json:"cmd,omitempty"`
	Output        string                 `protobuf:"bytes,3,opt,name=output,proto3" json:"output,omitempty"`
	Success       bool                   `protobuf:"varint,4,opt,name=success,proto3" json:"success,omitempty"`
	Error         string                 `protobuf:"bytes,5,opt,name=error,proto3" json:"error,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ToolCall) Reset() {
	*x = ToolCall{}
	mi := &file_server_v1_server_proto_msgTypes[115]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ToolCall) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ToolCall) ProtoMessage() {}

func (x *ToolCall) ProtoReflect() protoreflect.Message {
	mi := &file_server_v1_server_proto_msgTypes[115]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ToolCall.ProtoReflect.Descriptor instead.
func (*ToolCall) Descriptor() ([]byte, []int) {
	return file_server_v1_server_proto_rawDescGZIP(), []int{115}
}

func (x *ToolCall) GetTool() string {
	if x != nil {
		return x.Tool
	}
	return ""
}

func (x *ToolCall) GetCmd() string {
	if x != nil {
		return x.Cmd
	}
	return ""
}

func (x *ToolCall) GetOutput() string {
	if x != nil {
		return x.Output
	}
	return ""
}

func (x *ToolCall) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *ToolCall) GetError() string {
	if x != nil {
		return x.Error
	}
	return ""
}

type GetRiskAssessmentStatusResponse struct {
	state              protoimpl.MessageState         `protogen:"open.v1"`
	AssessmentId       string                         `protobuf:"bytes,1,opt,name=assessment_id,json=assessmentId,proto3" json:"assessment_id,omitempty"`
	ClusterId          string                         `protobuf:"bytes,2,opt,name=cluster_id,json=clusterId,proto3" json:"cluster_id,omitempty"`
	ClusterName        string                         `protobuf:"bytes,3,opt,name=cluster_name,json=clusterName,proto3" json:"cluster_name,omitempty"` // Added from RiskAssessmentSummary
	Status             RiskAssessmentStatus           `protobuf:"varint,4,opt,name=status,proto3,enum=server.v1.RiskAssessmentStatus" json:"status,omitempty"`
	AgentThinking      []*RiskAssessmentAgentThinking `protobuf:"bytes,5,rep,name=agent_thinking,json=agentThinking,proto3" json:"agent_thinking,omitempty"`
	FinalReport        string                         `protobuf:"bytes,6,opt,name=final_report,json=finalReport,proto3" json:"final_report,omitempty"`
	ErrorMessage       string                         `protobuf:"bytes,7,opt,name=error_message,json=errorMessage,proto3" json:"error_message,omitempty"`
	CreatedAt          int64                          `protobuf:"varint,8,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`               // Unix timestamp
	CompletedAt        int64                          `protobuf:"varint,9,opt,name=completed_at,json=completedAt,proto3" json:"completed_at,omitempty"`         // Unix timestamp, 0 if not completed
	FindingsCount      int32                          `protobuf:"varint,10,opt,name=findings_count,json=findingsCount,proto3" json:"findings_count,omitempty"`  // Total number of findings
	SeverityScore      float32                        `protobuf:"fixed32,11,opt,name=severity_score,json=severityScore,proto3" json:"severity_score,omitempty"` // 0-10 scale derived from final report
	HighRiskFindings   int32                          `protobuf:"varint,12,opt,name=high_risk_findings,json=highRiskFindings,proto3" json:"high_risk_findings,omitempty"`
	MediumRiskFindings int32                          `protobuf:"varint,13,opt,name=medium_risk_findings,json=mediumRiskFindings,proto3" json:"medium_risk_findings,omitempty"`
	LowRiskFindings    int32                          `protobuf:"varint,14,opt,name=low_risk_findings,json=lowRiskFindings,proto3" json:"low_risk_findings,omitempty"`
	StructuredFindings []*RiskFinding                 `protobuf:"bytes,15,rep,name=structured_findings,json=structuredFindings,proto3" json:"structured_findings,omitempty"`
	unknownFields      protoimpl.UnknownFields
	sizeCache          protoimpl.SizeCache
}

func (x *GetRiskAssessmentStatusResponse) Reset() {
	*x = GetRiskAssessmentStatusResponse{}
	mi := &file_server_v1_server_proto_msgTypes[116]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetRiskAssessmentStatusResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetRiskAssessmentStatusResponse) ProtoMessage() {}

func (x *GetRiskAssessmentStatusResponse) ProtoReflect() protoreflect.Message {
	mi := &file_server_v1_server_proto_msgTypes[116]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetRiskAssessmentStatusResponse.ProtoReflect.Descriptor instead.
func (*GetRiskAssessmentStatusResponse) Descriptor() ([]byte, []int) {
	return file_server_v1_server_proto_rawDescGZIP(), []int{116}
}

func (x *GetRiskAssessmentStatusResponse) GetAssessmentId() string {
	if x != nil {
		return x.AssessmentId
	}
	return ""
}

func (x *GetRiskAssessmentStatusResponse) GetClusterId() string {
	if x != nil {
		return x.ClusterId
	}
	return ""
}

func (x *GetRiskAssessmentStatusResponse) GetClusterName() string {
	if x != nil {
		return x.ClusterName
	}
	return ""
}

func (x *GetRiskAssessmentStatusResponse) GetStatus() RiskAssessmentStatus {
	if x != nil {
		return x.Status
	}
	return RiskAssessmentStatus_RISK_ASSESSMENT_STATUS_UNSPECIFIED
}

func (x *GetRiskAssessmentStatusResponse) GetAgentThinking() []*RiskAssessmentAgentThinking {
	if x != nil {
		return x.AgentThinking
	}
	return nil
}

func (x *GetRiskAssessmentStatusResponse) GetFinalReport() string {
	if x != nil {
		return x.FinalReport
	}
	return ""
}

func (x *GetRiskAssessmentStatusResponse) GetErrorMessage() string {
	if x != nil {
		return x.ErrorMessage
	}
	return ""
}

func (x *GetRiskAssessmentStatusResponse) GetCreatedAt() int64 {
	if x != nil {
		return x.CreatedAt
	}
	return 0
}

func (x *GetRiskAssessmentStatusResponse) GetCompletedAt() int64 {
	if x != nil {
		return x.CompletedAt
	}
	return 0
}

func (x *GetRiskAssessmentStatusResponse) GetFindingsCount() int32 {
	if x != nil {
		return x.FindingsCount
	}
	return 0
}

func (x *GetRiskAssessmentStatusResponse) GetSeverityScore() float32 {
	if x != nil {
		return x.SeverityScore
	}
	return 0
}

func (x *GetRiskAssessmentStatusResponse) GetHighRiskFindings() int32 {
	if x != nil {
		return x.HighRiskFindings
	}
	return 0
}

func (x *GetRiskAssessmentStatusResponse) GetMediumRiskFindings() int32 {
	if x != nil {
		return x.MediumRiskFindings
	}
	return 0
}

func (x *GetRiskAssessmentStatusResponse) GetLowRiskFindings() int32 {
	if x != nil {
		return x.LowRiskFindings
	}
	return 0
}

func (x *GetRiskAssessmentStatusResponse) GetStructuredFindings() []*RiskFinding {
	if x != nil {
		return x.StructuredFindings
	}
	return nil
}

type ListRiskAssessmentsRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Optional cluster ID to filter assessments for a specific cluster
	ClusterId string `protobuf:"bytes,1,opt,name=cluster_id,json=clusterId,proto3" json:"cluster_id,omitempty"`
	// The maximum number of results to return (server may return fewer).
	// Defaults to 50, maximum 100.
	PageSize int32 `protobuf:"varint,2,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`
	// An opaque token returned by a previous call. Treated as the cursor.
	PageToken     string `protobuf:"bytes,3,opt,name=page_token,json=pageToken,proto3" json:"page_token,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListRiskAssessmentsRequest) Reset() {
	*x = ListRiskAssessmentsRequest{}
	mi := &file_server_v1_server_proto_msgTypes[117]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListRiskAssessmentsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListRiskAssessmentsRequest) ProtoMessage() {}

func (x *ListRiskAssessmentsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_server_v1_server_proto_msgTypes[117]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListRiskAssessmentsRequest.ProtoReflect.Descriptor instead.
func (*ListRiskAssessmentsRequest) Descriptor() ([]byte, []int) {
	return file_server_v1_server_proto_rawDescGZIP(), []int{117}
}

func (x *ListRiskAssessmentsRequest) GetClusterId() string {
	if x != nil {
		return x.ClusterId
	}
	return ""
}

func (x *ListRiskAssessmentsRequest) GetPageSize() int32 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *ListRiskAssessmentsRequest) GetPageToken() string {
	if x != nil {
		return x.PageToken
	}
	return ""
}

type RiskFinding struct {
	state             protoimpl.MessageState `protogen:"open.v1"`
	Id                string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Title             string                 `protobuf:"bytes,2,opt,name=title,proto3" json:"title,omitempty"`
	Description       string                 `protobuf:"bytes,3,opt,name=description,proto3" json:"description,omitempty"`
	Severity          string                 `protobuf:"bytes,4,opt,name=severity,proto3" json:"severity,omitempty"`
	Category          string                 `protobuf:"bytes,5,opt,name=category,proto3" json:"category,omitempty"`
	Recommendation    string                 `protobuf:"bytes,6,opt,name=recommendation,proto3" json:"recommendation,omitempty"`
	AffectedResources []string               `protobuf:"bytes,7,rep,name=affected_resources,json=affectedResources,proto3" json:"affected_resources,omitempty"`
	unknownFields     protoimpl.UnknownFields
	sizeCache         protoimpl.SizeCache
}

func (x *RiskFinding) Reset() {
	*x = RiskFinding{}
	mi := &file_server_v1_server_proto_msgTypes[118]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RiskFinding) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RiskFinding) ProtoMessage() {}

func (x *RiskFinding) ProtoReflect() protoreflect.Message {
	mi := &file_server_v1_server_proto_msgTypes[118]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RiskFinding.ProtoReflect.Descriptor instead.
func (*RiskFinding) Descriptor() ([]byte, []int) {
	return file_server_v1_server_proto_rawDescGZIP(), []int{118}
}

func (x *RiskFinding) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *RiskFinding) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *RiskFinding) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *RiskFinding) GetSeverity() string {
	if x != nil {
		return x.Severity
	}
	return ""
}

func (x *RiskFinding) GetCategory() string {
	if x != nil {
		return x.Category
	}
	return ""
}

func (x *RiskFinding) GetRecommendation() string {
	if x != nil {
		return x.Recommendation
	}
	return ""
}

func (x *RiskFinding) GetAffectedResources() []string {
	if x != nil {
		return x.AffectedResources
	}
	return nil
}

type RiskAssessmentSummary struct {
	state              protoimpl.MessageState `protogen:"open.v1"`
	AssessmentId       string                 `protobuf:"bytes,1,opt,name=assessment_id,json=assessmentId,proto3" json:"assessment_id,omitempty"`
	ClusterId          string                 `protobuf:"bytes,2,opt,name=cluster_id,json=clusterId,proto3" json:"cluster_id,omitempty"`
	ClusterName        string                 `protobuf:"bytes,3,opt,name=cluster_name,json=clusterName,proto3" json:"cluster_name,omitempty"`
	Status             RiskAssessmentStatus   `protobuf:"varint,4,opt,name=status,proto3,enum=server.v1.RiskAssessmentStatus" json:"status,omitempty"`
	FinalReport        string                 `protobuf:"bytes,5,opt,name=final_report,json=finalReport,proto3" json:"final_report,omitempty"`
	ErrorMessage       string                 `protobuf:"bytes,6,opt,name=error_message,json=errorMessage,proto3" json:"error_message,omitempty"`
	CreatedAt          int64                  `protobuf:"varint,7,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`               // Unix timestamp
	CompletedAt        int64                  `protobuf:"varint,8,opt,name=completed_at,json=completedAt,proto3" json:"completed_at,omitempty"`         // Unix timestamp, 0 if not completed
	FindingsCount      int32                  `protobuf:"varint,9,opt,name=findings_count,json=findingsCount,proto3" json:"findings_count,omitempty"`   // Total number of findings
	SeverityScore      float32                `protobuf:"fixed32,10,opt,name=severity_score,json=severityScore,proto3" json:"severity_score,omitempty"` // 0-10 scale derived from final report
	HighRiskFindings   int32                  `protobuf:"varint,11,opt,name=high_risk_findings,json=highRiskFindings,proto3" json:"high_risk_findings,omitempty"`
	MediumRiskFindings int32                  `protobuf:"varint,12,opt,name=medium_risk_findings,json=mediumRiskFindings,proto3" json:"medium_risk_findings,omitempty"`
	LowRiskFindings    int32                  `protobuf:"varint,13,opt,name=low_risk_findings,json=lowRiskFindings,proto3" json:"low_risk_findings,omitempty"`
	StructuredFindings []*RiskFinding         `protobuf:"bytes,14,rep,name=structured_findings,json=structuredFindings,proto3" json:"structured_findings,omitempty"`
	unknownFields      protoimpl.UnknownFields
	sizeCache          protoimpl.SizeCache
}

func (x *RiskAssessmentSummary) Reset() {
	*x = RiskAssessmentSummary{}
	mi := &file_server_v1_server_proto_msgTypes[119]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RiskAssessmentSummary) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RiskAssessmentSummary) ProtoMessage() {}

func (x *RiskAssessmentSummary) ProtoReflect() protoreflect.Message {
	mi := &file_server_v1_server_proto_msgTypes[119]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RiskAssessmentSummary.ProtoReflect.Descriptor instead.
func (*RiskAssessmentSummary) Descriptor() ([]byte, []int) {
	return file_server_v1_server_proto_rawDescGZIP(), []int{119}
}

func (x *RiskAssessmentSummary) GetAssessmentId() string {
	if x != nil {
		return x.AssessmentId
	}
	return ""
}

func (x *RiskAssessmentSummary) GetClusterId() string {
	if x != nil {
		return x.ClusterId
	}
	return ""
}

func (x *RiskAssessmentSummary) GetClusterName() string {
	if x != nil {
		return x.ClusterName
	}
	return ""
}

func (x *RiskAssessmentSummary) GetStatus() RiskAssessmentStatus {
	if x != nil {
		return x.Status
	}
	return RiskAssessmentStatus_RISK_ASSESSMENT_STATUS_UNSPECIFIED
}

func (x *RiskAssessmentSummary) GetFinalReport() string {
	if x != nil {
		return x.FinalReport
	}
	return ""
}

func (x *RiskAssessmentSummary) GetErrorMessage() string {
	if x != nil {
		return x.ErrorMessage
	}
	return ""
}

func (x *RiskAssessmentSummary) GetCreatedAt() int64 {
	if x != nil {
		return x.CreatedAt
	}
	return 0
}

func (x *RiskAssessmentSummary) GetCompletedAt() int64 {
	if x != nil {
		return x.CompletedAt
	}
	return 0
}

func (x *RiskAssessmentSummary) GetFindingsCount() int32 {
	if x != nil {
		return x.FindingsCount
	}
	return 0
}

func (x *RiskAssessmentSummary) GetSeverityScore() float32 {
	if x != nil {
		return x.SeverityScore
	}
	return 0
}

func (x *RiskAssessmentSummary) GetHighRiskFindings() int32 {
	if x != nil {
		return x.HighRiskFindings
	}
	return 0
}

func (x *RiskAssessmentSummary) GetMediumRiskFindings() int32 {
	if x != nil {
		return x.MediumRiskFindings
	}
	return 0
}

func (x *RiskAssessmentSummary) GetLowRiskFindings() int32 {
	if x != nil {
		return x.LowRiskFindings
	}
	return 0
}

func (x *RiskAssessmentSummary) GetStructuredFindings() []*RiskFinding {
	if x != nil {
		return x.StructuredFindings
	}
	return nil
}

type ListRiskAssessmentsResponse struct {
	state         protoimpl.MessageState   `protogen:"open.v1"`
	Assessments   []*RiskAssessmentSummary `protobuf:"bytes,1,rep,name=assessments,proto3" json:"assessments,omitempty"`
	NextPageToken string                   `protobuf:"bytes,2,opt,name=next_page_token,json=nextPageToken,proto3" json:"next_page_token,omitempty"` // empty = last page
	TotalCount    int32                    `protobuf:"varint,3,opt,name=total_count,json=totalCount,proto3" json:"total_count,omitempty"`           // total number of assessments matching the filters
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListRiskAssessmentsResponse) Reset() {
	*x = ListRiskAssessmentsResponse{}
	mi := &file_server_v1_server_proto_msgTypes[120]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListRiskAssessmentsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListRiskAssessmentsResponse) ProtoMessage() {}

func (x *ListRiskAssessmentsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_server_v1_server_proto_msgTypes[120]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListRiskAssessmentsResponse.ProtoReflect.Descriptor instead.
func (*ListRiskAssessmentsResponse) Descriptor() ([]byte, []int) {
	return file_server_v1_server_proto_rawDescGZIP(), []int{120}
}

func (x *ListRiskAssessmentsResponse) GetAssessments() []*RiskAssessmentSummary {
	if x != nil {
		return x.Assessments
	}
	return nil
}

func (x *ListRiskAssessmentsResponse) GetNextPageToken() string {
	if x != nil {
		return x.NextPageToken
	}
	return ""
}

func (x *ListRiskAssessmentsResponse) GetTotalCount() int32 {
	if x != nil {
		return x.TotalCount
	}
	return 0
}

// Request to get a recommended authorization policy by ID.
// Tenant ID is passed in the gRPC request metadata.
type GetAuthorizationPolicyRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetAuthorizationPolicyRequest) Reset() {
	*x = GetAuthorizationPolicyRequest{}
	mi := &file_server_v1_server_proto_msgTypes[121]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetAuthorizationPolicyRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetAuthorizationPolicyRequest) ProtoMessage() {}

func (x *GetAuthorizationPolicyRequest) ProtoReflect() protoreflect.Message {
	mi := &file_server_v1_server_proto_msgTypes[121]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetAuthorizationPolicyRequest.ProtoReflect.Descriptor instead.
func (*GetAuthorizationPolicyRequest) Descriptor() ([]byte, []int) {
	return file_server_v1_server_proto_rawDescGZIP(), []int{121}
}

func (x *GetAuthorizationPolicyRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type GetAuthorizationPolicyResponse struct {
	state         protoimpl.MessageState          `protogen:"open.v1"`
	Policy        *AuthorizationPolicyWithCluster `protobuf:"bytes,1,opt,name=policy,proto3" json:"policy,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetAuthorizationPolicyResponse) Reset() {
	*x = GetAuthorizationPolicyResponse{}
	mi := &file_server_v1_server_proto_msgTypes[122]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetAuthorizationPolicyResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetAuthorizationPolicyResponse) ProtoMessage() {}

func (x *GetAuthorizationPolicyResponse) ProtoReflect() protoreflect.Message {
	mi := &file_server_v1_server_proto_msgTypes[122]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetAuthorizationPolicyResponse.ProtoReflect.Descriptor instead.
func (*GetAuthorizationPolicyResponse) Descriptor() ([]byte, []int) {
	return file_server_v1_server_proto_rawDescGZIP(), []int{122}
}

func (x *GetAuthorizationPolicyResponse) GetPolicy() *AuthorizationPolicyWithCluster {
	if x != nil {
		return x.Policy
	}
	return nil
}

// Request to list all recommended authorization policies.
// Tenant ID is passed in the gRPC request metadata.
type ListAuthorizationPoliciesRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The maximum number of results to return (server may return fewer).
	// Defaults to 50, maximum 100.
	PageSize int32 `protobuf:"varint,1,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`
	// An opaque token returned by a previous call. Treated as the cursor.
	PageToken string `protobuf:"bytes,2,opt,name=page_token,json=pageToken,proto3" json:"page_token,omitempty"`
	// Optional cluster ID to filter policies for a specific cluster
	ClusterId string `protobuf:"bytes,3,opt,name=cluster_id,json=clusterId,proto3" json:"cluster_id,omitempty"`
	// Optional review status filter
	ReviewStatus  PolicyReviewStatus `protobuf:"varint,4,opt,name=review_status,json=reviewStatus,proto3,enum=server.v1.PolicyReviewStatus" json:"review_status,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListAuthorizationPoliciesRequest) Reset() {
	*x = ListAuthorizationPoliciesRequest{}
	mi := &file_server_v1_server_proto_msgTypes[123]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListAuthorizationPoliciesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListAuthorizationPoliciesRequest) ProtoMessage() {}

func (x *ListAuthorizationPoliciesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_server_v1_server_proto_msgTypes[123]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListAuthorizationPoliciesRequest.ProtoReflect.Descriptor instead.
func (*ListAuthorizationPoliciesRequest) Descriptor() ([]byte, []int) {
	return file_server_v1_server_proto_rawDescGZIP(), []int{123}
}

func (x *ListAuthorizationPoliciesRequest) GetPageSize() int32 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *ListAuthorizationPoliciesRequest) GetPageToken() string {
	if x != nil {
		return x.PageToken
	}
	return ""
}

func (x *ListAuthorizationPoliciesRequest) GetClusterId() string {
	if x != nil {
		return x.ClusterId
	}
	return ""
}

func (x *ListAuthorizationPoliciesRequest) GetReviewStatus() PolicyReviewStatus {
	if x != nil {
		return x.ReviewStatus
	}
	return PolicyReviewStatus_POLICY_REVIEW_STATUS_UNSPECIFIED
}

type ListAuthorizationPoliciesResponse struct {
	state         protoimpl.MessageState            `protogen:"open.v1"`
	Policies      []*AuthorizationPolicyWithCluster `protobuf:"bytes,1,rep,name=policies,proto3" json:"policies,omitempty"`
	NextPageToken string                            `protobuf:"bytes,2,opt,name=next_page_token,json=nextPageToken,proto3" json:"next_page_token,omitempty"` // empty = last page
	TotalCount    int32                             `protobuf:"varint,3,opt,name=total_count,json=totalCount,proto3" json:"total_count,omitempty"`           // total number of policies matching the filters (for pagination)
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListAuthorizationPoliciesResponse) Reset() {
	*x = ListAuthorizationPoliciesResponse{}
	mi := &file_server_v1_server_proto_msgTypes[124]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListAuthorizationPoliciesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListAuthorizationPoliciesResponse) ProtoMessage() {}

func (x *ListAuthorizationPoliciesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_server_v1_server_proto_msgTypes[124]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListAuthorizationPoliciesResponse.ProtoReflect.Descriptor instead.
func (*ListAuthorizationPoliciesResponse) Descriptor() ([]byte, []int) {
	return file_server_v1_server_proto_rawDescGZIP(), []int{124}
}

func (x *ListAuthorizationPoliciesResponse) GetPolicies() []*AuthorizationPolicyWithCluster {
	if x != nil {
		return x.Policies
	}
	return nil
}

func (x *ListAuthorizationPoliciesResponse) GetNextPageToken() string {
	if x != nil {
		return x.NextPageToken
	}
	return ""
}

func (x *ListAuthorizationPoliciesResponse) GetTotalCount() int32 {
	if x != nil {
		return x.TotalCount
	}
	return 0
}

type AuthorizationPolicyWithCluster struct {
	state              protoimpl.MessageState             `protogen:"open.v1"`
	Id                 string                             `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	ClusterId          string                             `protobuf:"bytes,2,opt,name=cluster_id,json=clusterId,proto3" json:"cluster_id,omitempty"`
	ClusterName        string                             `protobuf:"bytes,3,opt,name=cluster_name,json=clusterName,proto3" json:"cluster_name,omitempty"`
	Namespace          string                             `protobuf:"bytes,4,opt,name=namespace,proto3" json:"namespace,omitempty"`
	Name               string                             `protobuf:"bytes,5,opt,name=name,proto3" json:"name,omitempty"`
	TargetWorkloadName string                             `protobuf:"bytes,6,opt,name=target_workload_name,json=targetWorkloadName,proto3" json:"target_workload_name,omitempty"`
	TargetWorkloadKind string                             `protobuf:"bytes,7,opt,name=target_workload_kind,json=targetWorkloadKind,proto3" json:"target_workload_kind,omitempty"`
	AllowAllYaml       string                             `protobuf:"bytes,8,opt,name=allow_all_yaml,json=allowAllYaml,proto3" json:"allow_all_yaml,omitempty"`
	TrimmedYaml        string                             `protobuf:"bytes,9,opt,name=trimmed_yaml,json=trimmedYaml,proto3" json:"trimmed_yaml,omitempty"`
	RiskScore          int32                              `protobuf:"varint,10,opt,name=risk_score,json=riskScore,proto3" json:"risk_score,omitempty"`
	RiskRationale      string                             `protobuf:"bytes,11,opt,name=risk_rationale,json=riskRationale,proto3" json:"risk_rationale,omitempty"`
	DestNamespaces     []string                           `protobuf:"bytes,12,rep,name=dest_namespaces,json=destNamespaces,proto3" json:"dest_namespaces,omitempty"`         // Destination namespaces referenced in the policy
	SuspiciousL7Logs   []*SuspiciousL7AccessLogWithReason `protobuf:"bytes,13,rep,name=suspicious_l7_logs,json=suspiciousL7Logs,proto3" json:"suspicious_l7_logs,omitempty"` // Suspicious L7 logs with reasons
	AllowedL7Logs      []*L7AccessLog                     `protobuf:"bytes,14,rep,name=allowed_l7_logs,json=allowedL7Logs,proto3" json:"allowed_l7_logs,omitempty"`          // Allowed L7 logs
	unknownFields      protoimpl.UnknownFields
	sizeCache          protoimpl.SizeCache
}

func (x *AuthorizationPolicyWithCluster) Reset() {
	*x = AuthorizationPolicyWithCluster{}
	mi := &file_server_v1_server_proto_msgTypes[125]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AuthorizationPolicyWithCluster) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AuthorizationPolicyWithCluster) ProtoMessage() {}

func (x *AuthorizationPolicyWithCluster) ProtoReflect() protoreflect.Message {
	mi := &file_server_v1_server_proto_msgTypes[125]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AuthorizationPolicyWithCluster.ProtoReflect.Descriptor instead.
func (*AuthorizationPolicyWithCluster) Descriptor() ([]byte, []int) {
	return file_server_v1_server_proto_rawDescGZIP(), []int{125}
}

func (x *AuthorizationPolicyWithCluster) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *AuthorizationPolicyWithCluster) GetClusterId() string {
	if x != nil {
		return x.ClusterId
	}
	return ""
}

func (x *AuthorizationPolicyWithCluster) GetClusterName() string {
	if x != nil {
		return x.ClusterName
	}
	return ""
}

func (x *AuthorizationPolicyWithCluster) GetNamespace() string {
	if x != nil {
		return x.Namespace
	}
	return ""
}

func (x *AuthorizationPolicyWithCluster) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *AuthorizationPolicyWithCluster) GetTargetWorkloadName() string {
	if x != nil {
		return x.TargetWorkloadName
	}
	return ""
}

func (x *AuthorizationPolicyWithCluster) GetTargetWorkloadKind() string {
	if x != nil {
		return x.TargetWorkloadKind
	}
	return ""
}

func (x *AuthorizationPolicyWithCluster) GetAllowAllYaml() string {
	if x != nil {
		return x.AllowAllYaml
	}
	return ""
}

func (x *AuthorizationPolicyWithCluster) GetTrimmedYaml() string {
	if x != nil {
		return x.TrimmedYaml
	}
	return ""
}

func (x *AuthorizationPolicyWithCluster) GetRiskScore() int32 {
	if x != nil {
		return x.RiskScore
	}
	return 0
}

func (x *AuthorizationPolicyWithCluster) GetRiskRationale() string {
	if x != nil {
		return x.RiskRationale
	}
	return ""
}

func (x *AuthorizationPolicyWithCluster) GetDestNamespaces() []string {
	if x != nil {
		return x.DestNamespaces
	}
	return nil
}

func (x *AuthorizationPolicyWithCluster) GetSuspiciousL7Logs() []*SuspiciousL7AccessLogWithReason {
	if x != nil {
		return x.SuspiciousL7Logs
	}
	return nil
}

func (x *AuthorizationPolicyWithCluster) GetAllowedL7Logs() []*L7AccessLog {
	if x != nil {
		return x.AllowedL7Logs
	}
	return nil
}

// SuspiciousL7AccessLogWithReason pairs a suspicious L7 access log with its classification reason
type SuspiciousL7AccessLogWithReason struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	SuspiciousLog *L7AccessLog           `protobuf:"bytes,1,opt,name=suspicious_log,json=suspiciousLog,proto3" json:"suspicious_log,omitempty"`
	Reason        string                 `protobuf:"bytes,2,opt,name=reason,proto3" json:"reason,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SuspiciousL7AccessLogWithReason) Reset() {
	*x = SuspiciousL7AccessLogWithReason{}
	mi := &file_server_v1_server_proto_msgTypes[126]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SuspiciousL7AccessLogWithReason) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SuspiciousL7AccessLogWithReason) ProtoMessage() {}

func (x *SuspiciousL7AccessLogWithReason) ProtoReflect() protoreflect.Message {
	mi := &file_server_v1_server_proto_msgTypes[126]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SuspiciousL7AccessLogWithReason.ProtoReflect.Descriptor instead.
func (*SuspiciousL7AccessLogWithReason) Descriptor() ([]byte, []int) {
	return file_server_v1_server_proto_rawDescGZIP(), []int{126}
}

func (x *SuspiciousL7AccessLogWithReason) GetSuspiciousLog() *L7AccessLog {
	if x != nil {
		return x.SuspiciousLog
	}
	return nil
}

func (x *SuspiciousL7AccessLogWithReason) GetReason() string {
	if x != nil {
		return x.Reason
	}
	return ""
}

// L7AccessLog represents an L7 access log entry for authorization policies
type L7AccessLog struct {
	state                protoimpl.MessageState `protogen:"open.v1"`
	Source               *L7Endpoint            `protobuf:"bytes,1,opt,name=source,proto3" json:"source,omitempty"`
	Destination          *L7Endpoint            `protobuf:"bytes,2,opt,name=destination,proto3" json:"destination,omitempty"`
	Protocol             string                 `protobuf:"bytes,3,opt,name=protocol,proto3" json:"protocol,omitempty"`
	Allowed              bool                   `protobuf:"varint,4,opt,name=allowed,proto3" json:"allowed,omitempty"`
	Count                int64                  `protobuf:"varint,5,opt,name=count,proto3" json:"count,omitempty"`
	FirstSeen            *timestamppb.Timestamp `protobuf:"bytes,6,opt,name=first_seen,json=firstSeen,proto3" json:"first_seen,omitempty"`
	LastSeen             *timestamppb.Timestamp `protobuf:"bytes,7,opt,name=last_seen,json=lastSeen,proto3" json:"last_seen,omitempty"`
	HttpData             *HttpData              `protobuf:"bytes,8,opt,name=http_data,json=httpData,proto3" json:"http_data,omitempty"`
	Classification       string                 `protobuf:"bytes,9,opt,name=classification,proto3" json:"classification,omitempty"`                                          // "required", "suspicious", or "unknown"
	ClassificationReason string                 `protobuf:"bytes,10,opt,name=classification_reason,json=classificationReason,proto3" json:"classification_reason,omitempty"` // Reason for suspicious classification
	unknownFields        protoimpl.UnknownFields
	sizeCache            protoimpl.SizeCache
}

func (x *L7AccessLog) Reset() {
	*x = L7AccessLog{}
	mi := &file_server_v1_server_proto_msgTypes[127]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *L7AccessLog) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*L7AccessLog) ProtoMessage() {}

func (x *L7AccessLog) ProtoReflect() protoreflect.Message {
	mi := &file_server_v1_server_proto_msgTypes[127]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use L7AccessLog.ProtoReflect.Descriptor instead.
func (*L7AccessLog) Descriptor() ([]byte, []int) {
	return file_server_v1_server_proto_rawDescGZIP(), []int{127}
}

func (x *L7AccessLog) GetSource() *L7Endpoint {
	if x != nil {
		return x.Source
	}
	return nil
}

func (x *L7AccessLog) GetDestination() *L7Endpoint {
	if x != nil {
		return x.Destination
	}
	return nil
}

func (x *L7AccessLog) GetProtocol() string {
	if x != nil {
		return x.Protocol
	}
	return ""
}

func (x *L7AccessLog) GetAllowed() bool {
	if x != nil {
		return x.Allowed
	}
	return false
}

func (x *L7AccessLog) GetCount() int64 {
	if x != nil {
		return x.Count
	}
	return 0
}

func (x *L7AccessLog) GetFirstSeen() *timestamppb.Timestamp {
	if x != nil {
		return x.FirstSeen
	}
	return nil
}

func (x *L7AccessLog) GetLastSeen() *timestamppb.Timestamp {
	if x != nil {
		return x.LastSeen
	}
	return nil
}

func (x *L7AccessLog) GetHttpData() *HttpData {
	if x != nil {
		return x.HttpData
	}
	return nil
}

func (x *L7AccessLog) GetClassification() string {
	if x != nil {
		return x.Classification
	}
	return ""
}

func (x *L7AccessLog) GetClassificationReason() string {
	if x != nil {
		return x.ClassificationReason
	}
	return ""
}

// L7Endpoint represents a source or destination endpoint for L7 flows
type L7Endpoint struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Namespace     string                 `protobuf:"bytes,1,opt,name=namespace,proto3" json:"namespace,omitempty"`
	Kind          string                 `protobuf:"bytes,2,opt,name=kind,proto3" json:"kind,omitempty"`
	Name          string                 `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	ServiceName   string                 `protobuf:"bytes,4,opt,name=service_name,json=serviceName,proto3" json:"service_name,omitempty"`
	Port          uint32                 `protobuf:"varint,5,opt,name=port,proto3" json:"port,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *L7Endpoint) Reset() {
	*x = L7Endpoint{}
	mi := &file_server_v1_server_proto_msgTypes[128]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *L7Endpoint) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*L7Endpoint) ProtoMessage() {}

func (x *L7Endpoint) ProtoReflect() protoreflect.Message {
	mi := &file_server_v1_server_proto_msgTypes[128]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use L7Endpoint.ProtoReflect.Descriptor instead.
func (*L7Endpoint) Descriptor() ([]byte, []int) {
	return file_server_v1_server_proto_rawDescGZIP(), []int{128}
}

func (x *L7Endpoint) GetNamespace() string {
	if x != nil {
		return x.Namespace
	}
	return ""
}

func (x *L7Endpoint) GetKind() string {
	if x != nil {
		return x.Kind
	}
	return ""
}

func (x *L7Endpoint) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *L7Endpoint) GetServiceName() string {
	if x != nil {
		return x.ServiceName
	}
	return ""
}

func (x *L7Endpoint) GetPort() uint32 {
	if x != nil {
		return x.Port
	}
	return 0
}

// HttpData represents HTTP-specific data from L7 access logs
type HttpData struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Method        string                 `protobuf:"bytes,1,opt,name=method,proto3" json:"method,omitempty"`
	Path          string                 `protobuf:"bytes,2,opt,name=path,proto3" json:"path,omitempty"`
	ResponseCode  int32                  `protobuf:"varint,3,opt,name=response_code,json=responseCode,proto3" json:"response_code,omitempty"`
	BytesSent     int64                  `protobuf:"varint,4,opt,name=bytes_sent,json=bytesSent,proto3" json:"bytes_sent,omitempty"`
	BytesReceived int64                  `protobuf:"varint,5,opt,name=bytes_received,json=bytesReceived,proto3" json:"bytes_received,omitempty"`
	DurationMs    int64                  `protobuf:"varint,6,opt,name=duration_ms,json=durationMs,proto3" json:"duration_ms,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *HttpData) Reset() {
	*x = HttpData{}
	mi := &file_server_v1_server_proto_msgTypes[129]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *HttpData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HttpData) ProtoMessage() {}

func (x *HttpData) ProtoReflect() protoreflect.Message {
	mi := &file_server_v1_server_proto_msgTypes[129]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HttpData.ProtoReflect.Descriptor instead.
func (*HttpData) Descriptor() ([]byte, []int) {
	return file_server_v1_server_proto_rawDescGZIP(), []int{129}
}

func (x *HttpData) GetMethod() string {
	if x != nil {
		return x.Method
	}
	return ""
}

func (x *HttpData) GetPath() string {
	if x != nil {
		return x.Path
	}
	return ""
}

func (x *HttpData) GetResponseCode() int32 {
	if x != nil {
		return x.ResponseCode
	}
	return 0
}

func (x *HttpData) GetBytesSent() int64 {
	if x != nil {
		return x.BytesSent
	}
	return 0
}

func (x *HttpData) GetBytesReceived() int64 {
	if x != nil {
		return x.BytesReceived
	}
	return 0
}

func (x *HttpData) GetDurationMs() int64 {
	if x != nil {
		return x.DurationMs
	}
	return 0
}

// Request to get an existing authorization policy by ID.
// Tenant ID is passed in the gRPC request metadata.
type GetExistingAuthorizationPolicyRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetExistingAuthorizationPolicyRequest) Reset() {
	*x = GetExistingAuthorizationPolicyRequest{}
	mi := &file_server_v1_server_proto_msgTypes[130]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetExistingAuthorizationPolicyRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetExistingAuthorizationPolicyRequest) ProtoMessage() {}

func (x *GetExistingAuthorizationPolicyRequest) ProtoReflect() protoreflect.Message {
	mi := &file_server_v1_server_proto_msgTypes[130]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetExistingAuthorizationPolicyRequest.ProtoReflect.Descriptor instead.
func (*GetExistingAuthorizationPolicyRequest) Descriptor() ([]byte, []int) {
	return file_server_v1_server_proto_rawDescGZIP(), []int{130}
}

func (x *GetExistingAuthorizationPolicyRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type GetExistingAuthorizationPolicyResponse struct {
	state         protoimpl.MessageState                  `protogen:"open.v1"`
	Policy        *ExistingAuthorizationPolicyWithCluster `protobuf:"bytes,1,opt,name=policy,proto3" json:"policy,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetExistingAuthorizationPolicyResponse) Reset() {
	*x = GetExistingAuthorizationPolicyResponse{}
	mi := &file_server_v1_server_proto_msgTypes[131]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetExistingAuthorizationPolicyResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetExistingAuthorizationPolicyResponse) ProtoMessage() {}

func (x *GetExistingAuthorizationPolicyResponse) ProtoReflect() protoreflect.Message {
	mi := &file_server_v1_server_proto_msgTypes[131]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetExistingAuthorizationPolicyResponse.ProtoReflect.Descriptor instead.
func (*GetExistingAuthorizationPolicyResponse) Descriptor() ([]byte, []int) {
	return file_server_v1_server_proto_rawDescGZIP(), []int{131}
}

func (x *GetExistingAuthorizationPolicyResponse) GetPolicy() *ExistingAuthorizationPolicyWithCluster {
	if x != nil {
		return x.Policy
	}
	return nil
}

// Request to list all existing authorization policies.
// Tenant ID is passed in the gRPC request metadata.
type ListExistingAuthorizationPoliciesRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The maximum number of results to return (server may return fewer).
	// Defaults to 50, maximum 100.
	PageSize int32 `protobuf:"varint,1,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`
	// An opaque token returned by a previous call. Treated as the cursor.
	PageToken string `protobuf:"bytes,2,opt,name=page_token,json=pageToken,proto3" json:"page_token,omitempty"`
	// Optional cluster ID to filter policies for a specific cluster
	ClusterId     string `protobuf:"bytes,3,opt,name=cluster_id,json=clusterId,proto3" json:"cluster_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListExistingAuthorizationPoliciesRequest) Reset() {
	*x = ListExistingAuthorizationPoliciesRequest{}
	mi := &file_server_v1_server_proto_msgTypes[132]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListExistingAuthorizationPoliciesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListExistingAuthorizationPoliciesRequest) ProtoMessage() {}

func (x *ListExistingAuthorizationPoliciesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_server_v1_server_proto_msgTypes[132]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListExistingAuthorizationPoliciesRequest.ProtoReflect.Descriptor instead.
func (*ListExistingAuthorizationPoliciesRequest) Descriptor() ([]byte, []int) {
	return file_server_v1_server_proto_rawDescGZIP(), []int{132}
}

func (x *ListExistingAuthorizationPoliciesRequest) GetPageSize() int32 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *ListExistingAuthorizationPoliciesRequest) GetPageToken() string {
	if x != nil {
		return x.PageToken
	}
	return ""
}

func (x *ListExistingAuthorizationPoliciesRequest) GetClusterId() string {
	if x != nil {
		return x.ClusterId
	}
	return ""
}

type ListExistingAuthorizationPoliciesResponse struct {
	state         protoimpl.MessageState                    `protogen:"open.v1"`
	Policies      []*ExistingAuthorizationPolicyWithCluster `protobuf:"bytes,1,rep,name=policies,proto3" json:"policies,omitempty"`
	NextPageToken string                                    `protobuf:"bytes,2,opt,name=next_page_token,json=nextPageToken,proto3" json:"next_page_token,omitempty"` // empty = last page
	TotalCount    int32                                     `protobuf:"varint,3,opt,name=total_count,json=totalCount,proto3" json:"total_count,omitempty"`           // total number of policies matching the filters (for pagination)
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListExistingAuthorizationPoliciesResponse) Reset() {
	*x = ListExistingAuthorizationPoliciesResponse{}
	mi := &file_server_v1_server_proto_msgTypes[133]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListExistingAuthorizationPoliciesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListExistingAuthorizationPoliciesResponse) ProtoMessage() {}

func (x *ListExistingAuthorizationPoliciesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_server_v1_server_proto_msgTypes[133]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListExistingAuthorizationPoliciesResponse.ProtoReflect.Descriptor instead.
func (*ListExistingAuthorizationPoliciesResponse) Descriptor() ([]byte, []int) {
	return file_server_v1_server_proto_rawDescGZIP(), []int{133}
}

func (x *ListExistingAuthorizationPoliciesResponse) GetPolicies() []*ExistingAuthorizationPolicyWithCluster {
	if x != nil {
		return x.Policies
	}
	return nil
}

func (x *ListExistingAuthorizationPoliciesResponse) GetNextPageToken() string {
	if x != nil {
		return x.NextPageToken
	}
	return ""
}

func (x *ListExistingAuthorizationPoliciesResponse) GetTotalCount() int32 {
	if x != nil {
		return x.TotalCount
	}
	return 0
}

type ExistingAuthorizationPolicyWithCluster struct {
	state               protoimpl.MessageState `protogen:"open.v1"`
	Id                  string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	ClusterId           string                 `protobuf:"bytes,2,opt,name=cluster_id,json=clusterId,proto3" json:"cluster_id,omitempty"`
	ClusterName         string                 `protobuf:"bytes,3,opt,name=cluster_name,json=clusterName,proto3" json:"cluster_name,omitempty"`
	Namespace           string                 `protobuf:"bytes,4,opt,name=namespace,proto3" json:"namespace,omitempty"`
	Name                string                 `protobuf:"bytes,5,opt,name=name,proto3" json:"name,omitempty"`
	TargetWorkloadName  string                 `protobuf:"bytes,6,opt,name=target_workload_name,json=targetWorkloadName,proto3" json:"target_workload_name,omitempty"`
	TargetWorkloadKind  string                 `protobuf:"bytes,7,opt,name=target_workload_kind,json=targetWorkloadKind,proto3" json:"target_workload_kind,omitempty"`
	Yaml                string                 `protobuf:"bytes,8,opt,name=yaml,proto3" json:"yaml,omitempty"`
	PolicyHitCount      int64                  `protobuf:"varint,9,opt,name=policy_hit_count,json=policyHitCount,proto3" json:"policy_hit_count,omitempty"`
	IngestedAt          int64                  `protobuf:"varint,10,opt,name=ingested_at,json=ingestedAt,proto3" json:"ingested_at,omitempty"`                             // Unix timestamp
	RecommendedPolicyId string                 `protobuf:"bytes,11,opt,name=recommended_policy_id,json=recommendedPolicyId,proto3" json:"recommended_policy_id,omitempty"` // empty if not recommended
	// Policy effectiveness fields (only present if recommended_policy_id is empty)
	SuspiciousL7Logs        []*SuspiciousL7AccessLogWithReason `protobuf:"bytes,12,rep,name=suspicious_l7_logs,json=suspiciousL7Logs,proto3" json:"suspicious_l7_logs,omitempty"`
	AllowedL7Logs           []*L7AccessLog                     `protobuf:"bytes,13,rep,name=allowed_l7_logs,json=allowedL7Logs,proto3" json:"allowed_l7_logs,omitempty"`
	Reasons                 []string                           `protobuf:"bytes,14,rep,name=reasons,proto3" json:"reasons,omitempty"`
	SuspiciousAllowedRatio  float32                            `protobuf:"fixed32,15,opt,name=suspicious_allowed_ratio,json=suspiciousAllowedRatio,proto3" json:"suspicious_allowed_ratio,omitempty"`
	RequiredAllowedRatio    float32                            `protobuf:"fixed32,16,opt,name=required_allowed_ratio,json=requiredAllowedRatio,proto3" json:"required_allowed_ratio,omitempty"`
	EffectivenessReason     string                             `protobuf:"bytes,17,opt,name=effectiveness_reason,json=effectivenessReason,proto3" json:"effectiveness_reason,omitempty"`
	FinalEffectivenessScore float32                            `protobuf:"fixed32,18,opt,name=final_effectiveness_score,json=finalEffectivenessScore,proto3" json:"final_effectiveness_score,omitempty"`
	unknownFields           protoimpl.UnknownFields
	sizeCache               protoimpl.SizeCache
}

func (x *ExistingAuthorizationPolicyWithCluster) Reset() {
	*x = ExistingAuthorizationPolicyWithCluster{}
	mi := &file_server_v1_server_proto_msgTypes[134]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ExistingAuthorizationPolicyWithCluster) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExistingAuthorizationPolicyWithCluster) ProtoMessage() {}

func (x *ExistingAuthorizationPolicyWithCluster) ProtoReflect() protoreflect.Message {
	mi := &file_server_v1_server_proto_msgTypes[134]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExistingAuthorizationPolicyWithCluster.ProtoReflect.Descriptor instead.
func (*ExistingAuthorizationPolicyWithCluster) Descriptor() ([]byte, []int) {
	return file_server_v1_server_proto_rawDescGZIP(), []int{134}
}

func (x *ExistingAuthorizationPolicyWithCluster) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *ExistingAuthorizationPolicyWithCluster) GetClusterId() string {
	if x != nil {
		return x.ClusterId
	}
	return ""
}

func (x *ExistingAuthorizationPolicyWithCluster) GetClusterName() string {
	if x != nil {
		return x.ClusterName
	}
	return ""
}

func (x *ExistingAuthorizationPolicyWithCluster) GetNamespace() string {
	if x != nil {
		return x.Namespace
	}
	return ""
}

func (x *ExistingAuthorizationPolicyWithCluster) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ExistingAuthorizationPolicyWithCluster) GetTargetWorkloadName() string {
	if x != nil {
		return x.TargetWorkloadName
	}
	return ""
}

func (x *ExistingAuthorizationPolicyWithCluster) GetTargetWorkloadKind() string {
	if x != nil {
		return x.TargetWorkloadKind
	}
	return ""
}

func (x *ExistingAuthorizationPolicyWithCluster) GetYaml() string {
	if x != nil {
		return x.Yaml
	}
	return ""
}

func (x *ExistingAuthorizationPolicyWithCluster) GetPolicyHitCount() int64 {
	if x != nil {
		return x.PolicyHitCount
	}
	return 0
}

func (x *ExistingAuthorizationPolicyWithCluster) GetIngestedAt() int64 {
	if x != nil {
		return x.IngestedAt
	}
	return 0
}

func (x *ExistingAuthorizationPolicyWithCluster) GetRecommendedPolicyId() string {
	if x != nil {
		return x.RecommendedPolicyId
	}
	return ""
}

func (x *ExistingAuthorizationPolicyWithCluster) GetSuspiciousL7Logs() []*SuspiciousL7AccessLogWithReason {
	if x != nil {
		return x.SuspiciousL7Logs
	}
	return nil
}

func (x *ExistingAuthorizationPolicyWithCluster) GetAllowedL7Logs() []*L7AccessLog {
	if x != nil {
		return x.AllowedL7Logs
	}
	return nil
}

func (x *ExistingAuthorizationPolicyWithCluster) GetReasons() []string {
	if x != nil {
		return x.Reasons
	}
	return nil
}

func (x *ExistingAuthorizationPolicyWithCluster) GetSuspiciousAllowedRatio() float32 {
	if x != nil {
		return x.SuspiciousAllowedRatio
	}
	return 0
}

func (x *ExistingAuthorizationPolicyWithCluster) GetRequiredAllowedRatio() float32 {
	if x != nil {
		return x.RequiredAllowedRatio
	}
	return 0
}

func (x *ExistingAuthorizationPolicyWithCluster) GetEffectivenessReason() string {
	if x != nil {
		return x.EffectivenessReason
	}
	return ""
}

func (x *ExistingAuthorizationPolicyWithCluster) GetFinalEffectivenessScore() float32 {
	if x != nil {
		return x.FinalEffectivenessScore
	}
	return 0
}

type L7AccessLogSummary struct {
	state           protoimpl.MessageState `protogen:"open.v1"`
	SrcNamespace    string                 `protobuf:"bytes,1,opt,name=src_namespace,json=srcNamespace,proto3" json:"src_namespace,omitempty"`
	SrcKind         string                 `protobuf:"bytes,2,opt,name=src_kind,json=srcKind,proto3" json:"src_kind,omitempty"`
	SrcName         string                 `protobuf:"bytes,3,opt,name=src_name,json=srcName,proto3" json:"src_name,omitempty"`
	SrcServiceName  string                 `protobuf:"bytes,4,opt,name=src_service_name,json=srcServiceName,proto3" json:"src_service_name,omitempty"`
	DstNamespace    string                 `protobuf:"bytes,5,opt,name=dst_namespace,json=dstNamespace,proto3" json:"dst_namespace,omitempty"`
	DstKind         string                 `protobuf:"bytes,6,opt,name=dst_kind,json=dstKind,proto3" json:"dst_kind,omitempty"`
	DstName         string                 `protobuf:"bytes,7,opt,name=dst_name,json=dstName,proto3" json:"dst_name,omitempty"`
	DstServiceName  string                 `protobuf:"bytes,8,opt,name=dst_service_name,json=dstServiceName,proto3" json:"dst_service_name,omitempty"`
	Protocol        string                 `protobuf:"bytes,9,opt,name=protocol,proto3" json:"protocol,omitempty"`
	L7Protocol      string                 `protobuf:"bytes,10,opt,name=l7_protocol,json=l7Protocol,proto3" json:"l7_protocol,omitempty"`
	Port            uint32                 `protobuf:"varint,11,opt,name=port,proto3" json:"port,omitempty"`
	Method          string                 `protobuf:"bytes,12,opt,name=method,proto3" json:"method,omitempty"`                                  // HTTP method
	Path            string                 `protobuf:"bytes,13,opt,name=path,proto3" json:"path,omitempty"`                                      // HTTP path
	ResponseCode    uint32                 `protobuf:"varint,14,opt,name=response_code,json=responseCode,proto3" json:"response_code,omitempty"` // HTTP response code
	Allowed         bool                   `protobuf:"varint,15,opt,name=allowed,proto3" json:"allowed,omitempty"`
	Count           int64                  `protobuf:"varint,16,opt,name=count,proto3" json:"count,omitempty"`
	FirstSeen       int64                  `protobuf:"varint,17,opt,name=first_seen,json=firstSeen,proto3" json:"first_seen,omitempty"`
	LastSeen        int64                  `protobuf:"varint,18,opt,name=last_seen,json=lastSeen,proto3" json:"last_seen,omitempty"`
	TotalDurationMs int64                  `protobuf:"varint,19,opt,name=total_duration_ms,json=totalDurationMs,proto3" json:"total_duration_ms,omitempty"` // Sum of all durations
	BytesSent       uint64                 `protobuf:"varint,20,opt,name=bytes_sent,json=bytesSent,proto3" json:"bytes_sent,omitempty"`                     // Total bytes sent
	BytesReceived   uint64                 `protobuf:"varint,21,opt,name=bytes_received,json=bytesReceived,proto3" json:"bytes_received,omitempty"`         // Total bytes received
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *L7AccessLogSummary) Reset() {
	*x = L7AccessLogSummary{}
	mi := &file_server_v1_server_proto_msgTypes[135]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *L7AccessLogSummary) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*L7AccessLogSummary) ProtoMessage() {}

func (x *L7AccessLogSummary) ProtoReflect() protoreflect.Message {
	mi := &file_server_v1_server_proto_msgTypes[135]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use L7AccessLogSummary.ProtoReflect.Descriptor instead.
func (*L7AccessLogSummary) Descriptor() ([]byte, []int) {
	return file_server_v1_server_proto_rawDescGZIP(), []int{135}
}

func (x *L7AccessLogSummary) GetSrcNamespace() string {
	if x != nil {
		return x.SrcNamespace
	}
	return ""
}

func (x *L7AccessLogSummary) GetSrcKind() string {
	if x != nil {
		return x.SrcKind
	}
	return ""
}

func (x *L7AccessLogSummary) GetSrcName() string {
	if x != nil {
		return x.SrcName
	}
	return ""
}

func (x *L7AccessLogSummary) GetSrcServiceName() string {
	if x != nil {
		return x.SrcServiceName
	}
	return ""
}

func (x *L7AccessLogSummary) GetDstNamespace() string {
	if x != nil {
		return x.DstNamespace
	}
	return ""
}

func (x *L7AccessLogSummary) GetDstKind() string {
	if x != nil {
		return x.DstKind
	}
	return ""
}

func (x *L7AccessLogSummary) GetDstName() string {
	if x != nil {
		return x.DstName
	}
	return ""
}

func (x *L7AccessLogSummary) GetDstServiceName() string {
	if x != nil {
		return x.DstServiceName
	}
	return ""
}

func (x *L7AccessLogSummary) GetProtocol() string {
	if x != nil {
		return x.Protocol
	}
	return ""
}

func (x *L7AccessLogSummary) GetL7Protocol() string {
	if x != nil {
		return x.L7Protocol
	}
	return ""
}

func (x *L7AccessLogSummary) GetPort() uint32 {
	if x != nil {
		return x.Port
	}
	return 0
}

func (x *L7AccessLogSummary) GetMethod() string {
	if x != nil {
		return x.Method
	}
	return ""
}

func (x *L7AccessLogSummary) GetPath() string {
	if x != nil {
		return x.Path
	}
	return ""
}

func (x *L7AccessLogSummary) GetResponseCode() uint32 {
	if x != nil {
		return x.ResponseCode
	}
	return 0
}

func (x *L7AccessLogSummary) GetAllowed() bool {
	if x != nil {
		return x.Allowed
	}
	return false
}

func (x *L7AccessLogSummary) GetCount() int64 {
	if x != nil {
		return x.Count
	}
	return 0
}

func (x *L7AccessLogSummary) GetFirstSeen() int64 {
	if x != nil {
		return x.FirstSeen
	}
	return 0
}

func (x *L7AccessLogSummary) GetLastSeen() int64 {
	if x != nil {
		return x.LastSeen
	}
	return 0
}

func (x *L7AccessLogSummary) GetTotalDurationMs() int64 {
	if x != nil {
		return x.TotalDurationMs
	}
	return 0
}

func (x *L7AccessLogSummary) GetBytesSent() uint64 {
	if x != nil {
		return x.BytesSent
	}
	return 0
}

func (x *L7AccessLogSummary) GetBytesReceived() uint64 {
	if x != nil {
		return x.BytesReceived
	}
	return 0
}

type InventoryL7AccessLogsResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	AccessLogs    []*L7AccessLogSummary  `protobuf:"bytes,1,rep,name=access_logs,json=accessLogs,proto3" json:"access_logs,omitempty"`
	HasMore       bool                   `protobuf:"varint,2,opt,name=has_more,json=hasMore,proto3" json:"has_more,omitempty"`
	NextPageToken string                 `protobuf:"bytes,3,opt,name=next_page_token,json=nextPageToken,proto3" json:"next_page_token,omitempty"`
	TotalReturned int32                  `protobuf:"varint,4,opt,name=total_returned,json=totalReturned,proto3" json:"total_returned,omitempty"`
	Limit         int32                  `protobuf:"varint,5,opt,name=limit,proto3" json:"limit,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *InventoryL7AccessLogsResponse) Reset() {
	*x = InventoryL7AccessLogsResponse{}
	mi := &file_server_v1_server_proto_msgTypes[136]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *InventoryL7AccessLogsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InventoryL7AccessLogsResponse) ProtoMessage() {}

func (x *InventoryL7AccessLogsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_server_v1_server_proto_msgTypes[136]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InventoryL7AccessLogsResponse.ProtoReflect.Descriptor instead.
func (*InventoryL7AccessLogsResponse) Descriptor() ([]byte, []int) {
	return file_server_v1_server_proto_rawDescGZIP(), []int{136}
}

func (x *InventoryL7AccessLogsResponse) GetAccessLogs() []*L7AccessLogSummary {
	if x != nil {
		return x.AccessLogs
	}
	return nil
}

func (x *InventoryL7AccessLogsResponse) GetHasMore() bool {
	if x != nil {
		return x.HasMore
	}
	return false
}

func (x *InventoryL7AccessLogsResponse) GetNextPageToken() string {
	if x != nil {
		return x.NextPageToken
	}
	return ""
}

func (x *InventoryL7AccessLogsResponse) GetTotalReturned() int32 {
	if x != nil {
		return x.TotalReturned
	}
	return 0
}

func (x *InventoryL7AccessLogsResponse) GetLimit() int32 {
	if x != nil {
		return x.Limit
	}
	return 0
}

type GetIndividualL7AccessLogsBetweenNamespacesRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	ClusterId     string                 `protobuf:"bytes,1,opt,name=cluster_id,json=clusterId,proto3" json:"cluster_id,omitempty"`
	SrcNamespace  string                 `protobuf:"bytes,2,opt,name=src_namespace,json=srcNamespace,proto3" json:"src_namespace,omitempty"`
	DstNamespace  string                 `protobuf:"bytes,3,opt,name=dst_namespace,json=dstNamespace,proto3" json:"dst_namespace,omitempty"`
	Limit         int32                  `protobuf:"varint,4,opt,name=limit,proto3" json:"limit,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetIndividualL7AccessLogsBetweenNamespacesRequest) Reset() {
	*x = GetIndividualL7AccessLogsBetweenNamespacesRequest{}
	mi := &file_server_v1_server_proto_msgTypes[137]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetIndividualL7AccessLogsBetweenNamespacesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetIndividualL7AccessLogsBetweenNamespacesRequest) ProtoMessage() {}

func (x *GetIndividualL7AccessLogsBetweenNamespacesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_server_v1_server_proto_msgTypes[137]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetIndividualL7AccessLogsBetweenNamespacesRequest.ProtoReflect.Descriptor instead.
func (*GetIndividualL7AccessLogsBetweenNamespacesRequest) Descriptor() ([]byte, []int) {
	return file_server_v1_server_proto_rawDescGZIP(), []int{137}
}

func (x *GetIndividualL7AccessLogsBetweenNamespacesRequest) GetClusterId() string {
	if x != nil {
		return x.ClusterId
	}
	return ""
}

func (x *GetIndividualL7AccessLogsBetweenNamespacesRequest) GetSrcNamespace() string {
	if x != nil {
		return x.SrcNamespace
	}
	return ""
}

func (x *GetIndividualL7AccessLogsBetweenNamespacesRequest) GetDstNamespace() string {
	if x != nil {
		return x.DstNamespace
	}
	return ""
}

func (x *GetIndividualL7AccessLogsBetweenNamespacesRequest) GetLimit() int32 {
	if x != nil {
		return x.Limit
	}
	return 0
}

type GetIndividualL7AccessLogsBetweenNamespacesResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	AccessLogs    []*L7AccessLogSummary  `protobuf:"bytes,1,rep,name=access_logs,json=accessLogs,proto3" json:"access_logs,omitempty"`
	Total         int32                  `protobuf:"varint,2,opt,name=total,proto3" json:"total,omitempty"`
	Limit         int32                  `protobuf:"varint,3,opt,name=limit,proto3" json:"limit,omitempty"`
	Cluster       string                 `protobuf:"bytes,4,opt,name=cluster,proto3" json:"cluster,omitempty"`
	From          string                 `protobuf:"bytes,5,opt,name=from,proto3" json:"from,omitempty"`
	To            string                 `protobuf:"bytes,6,opt,name=to,proto3" json:"to,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetIndividualL7AccessLogsBetweenNamespacesResponse) Reset() {
	*x = GetIndividualL7AccessLogsBetweenNamespacesResponse{}
	mi := &file_server_v1_server_proto_msgTypes[138]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetIndividualL7AccessLogsBetweenNamespacesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetIndividualL7AccessLogsBetweenNamespacesResponse) ProtoMessage() {}

func (x *GetIndividualL7AccessLogsBetweenNamespacesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_server_v1_server_proto_msgTypes[138]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetIndividualL7AccessLogsBetweenNamespacesResponse.ProtoReflect.Descriptor instead.
func (*GetIndividualL7AccessLogsBetweenNamespacesResponse) Descriptor() ([]byte, []int) {
	return file_server_v1_server_proto_rawDescGZIP(), []int{138}
}

func (x *GetIndividualL7AccessLogsBetweenNamespacesResponse) GetAccessLogs() []*L7AccessLogSummary {
	if x != nil {
		return x.AccessLogs
	}
	return nil
}

func (x *GetIndividualL7AccessLogsBetweenNamespacesResponse) GetTotal() int32 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *GetIndividualL7AccessLogsBetweenNamespacesResponse) GetLimit() int32 {
	if x != nil {
		return x.Limit
	}
	return 0
}

func (x *GetIndividualL7AccessLogsBetweenNamespacesResponse) GetCluster() string {
	if x != nil {
		return x.Cluster
	}
	return ""
}

func (x *GetIndividualL7AccessLogsBetweenNamespacesResponse) GetFrom() string {
	if x != nil {
		return x.From
	}
	return ""
}

func (x *GetIndividualL7AccessLogsBetweenNamespacesResponse) GetTo() string {
	if x != nil {
		return x.To
	}
	return ""
}

// Request/Response messages for L7 access log inventory APIs
type GetInventoryL7AccessLogsRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	NamespaceId   string                 `protobuf:"bytes,1,opt,name=namespace_id,json=namespaceId,proto3" json:"namespace_id,omitempty"`
	Limit         int32                  `protobuf:"varint,2,opt,name=limit,proto3" json:"limit,omitempty"`
	PageToken     string                 `protobuf:"bytes,3,opt,name=page_token,json=pageToken,proto3" json:"page_token,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetInventoryL7AccessLogsRequest) Reset() {
	*x = GetInventoryL7AccessLogsRequest{}
	mi := &file_server_v1_server_proto_msgTypes[139]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetInventoryL7AccessLogsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetInventoryL7AccessLogsRequest) ProtoMessage() {}

func (x *GetInventoryL7AccessLogsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_server_v1_server_proto_msgTypes[139]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetInventoryL7AccessLogsRequest.ProtoReflect.Descriptor instead.
func (*GetInventoryL7AccessLogsRequest) Descriptor() ([]byte, []int) {
	return file_server_v1_server_proto_rawDescGZIP(), []int{139}
}

func (x *GetInventoryL7AccessLogsRequest) GetNamespaceId() string {
	if x != nil {
		return x.NamespaceId
	}
	return ""
}

func (x *GetInventoryL7AccessLogsRequest) GetLimit() int32 {
	if x != nil {
		return x.Limit
	}
	return 0
}

func (x *GetInventoryL7AccessLogsRequest) GetPageToken() string {
	if x != nil {
		return x.PageToken
	}
	return ""
}

type GetInventoryL7AccessLogsResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	AccessLogs    []*L7AccessLogSummary  `protobuf:"bytes,1,rep,name=access_logs,json=accessLogs,proto3" json:"access_logs,omitempty"`
	HasMore       bool                   `protobuf:"varint,2,opt,name=has_more,json=hasMore,proto3" json:"has_more,omitempty"`
	NextPageToken string                 `protobuf:"bytes,3,opt,name=next_page_token,json=nextPageToken,proto3" json:"next_page_token,omitempty"`
	TotalReturned int32                  `protobuf:"varint,4,opt,name=total_returned,json=totalReturned,proto3" json:"total_returned,omitempty"`
	Limit         int32                  `protobuf:"varint,5,opt,name=limit,proto3" json:"limit,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetInventoryL7AccessLogsResponse) Reset() {
	*x = GetInventoryL7AccessLogsResponse{}
	mi := &file_server_v1_server_proto_msgTypes[140]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetInventoryL7AccessLogsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetInventoryL7AccessLogsResponse) ProtoMessage() {}

func (x *GetInventoryL7AccessLogsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_server_v1_server_proto_msgTypes[140]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetInventoryL7AccessLogsResponse.ProtoReflect.Descriptor instead.
func (*GetInventoryL7AccessLogsResponse) Descriptor() ([]byte, []int) {
	return file_server_v1_server_proto_rawDescGZIP(), []int{140}
}

func (x *GetInventoryL7AccessLogsResponse) GetAccessLogs() []*L7AccessLogSummary {
	if x != nil {
		return x.AccessLogs
	}
	return nil
}

func (x *GetInventoryL7AccessLogsResponse) GetHasMore() bool {
	if x != nil {
		return x.HasMore
	}
	return false
}

func (x *GetInventoryL7AccessLogsResponse) GetNextPageToken() string {
	if x != nil {
		return x.NextPageToken
	}
	return ""
}

func (x *GetInventoryL7AccessLogsResponse) GetTotalReturned() int32 {
	if x != nil {
		return x.TotalReturned
	}
	return 0
}

func (x *GetInventoryL7AccessLogsResponse) GetLimit() int32 {
	if x != nil {
		return x.Limit
	}
	return 0
}

type GetInventoryClusterL7AccessLogsRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	ClusterUid    string                 `protobuf:"bytes,1,opt,name=cluster_uid,json=clusterUid,proto3" json:"cluster_uid,omitempty"`
	Limit         int32                  `protobuf:"varint,2,opt,name=limit,proto3" json:"limit,omitempty"`
	PageToken     string                 `protobuf:"bytes,3,opt,name=page_token,json=pageToken,proto3" json:"page_token,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetInventoryClusterL7AccessLogsRequest) Reset() {
	*x = GetInventoryClusterL7AccessLogsRequest{}
	mi := &file_server_v1_server_proto_msgTypes[141]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetInventoryClusterL7AccessLogsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetInventoryClusterL7AccessLogsRequest) ProtoMessage() {}

func (x *GetInventoryClusterL7AccessLogsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_server_v1_server_proto_msgTypes[141]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetInventoryClusterL7AccessLogsRequest.ProtoReflect.Descriptor instead.
func (*GetInventoryClusterL7AccessLogsRequest) Descriptor() ([]byte, []int) {
	return file_server_v1_server_proto_rawDescGZIP(), []int{141}
}

func (x *GetInventoryClusterL7AccessLogsRequest) GetClusterUid() string {
	if x != nil {
		return x.ClusterUid
	}
	return ""
}

func (x *GetInventoryClusterL7AccessLogsRequest) GetLimit() int32 {
	if x != nil {
		return x.Limit
	}
	return 0
}

func (x *GetInventoryClusterL7AccessLogsRequest) GetPageToken() string {
	if x != nil {
		return x.PageToken
	}
	return ""
}

type GetInventoryClusterL7AccessLogsResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	AccessLogs    []*L7AccessLogSummary  `protobuf:"bytes,1,rep,name=access_logs,json=accessLogs,proto3" json:"access_logs,omitempty"`
	HasMore       bool                   `protobuf:"varint,2,opt,name=has_more,json=hasMore,proto3" json:"has_more,omitempty"`
	NextPageToken string                 `protobuf:"bytes,3,opt,name=next_page_token,json=nextPageToken,proto3" json:"next_page_token,omitempty"`
	TotalReturned int32                  `protobuf:"varint,4,opt,name=total_returned,json=totalReturned,proto3" json:"total_returned,omitempty"`
	Limit         int32                  `protobuf:"varint,5,opt,name=limit,proto3" json:"limit,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetInventoryClusterL7AccessLogsResponse) Reset() {
	*x = GetInventoryClusterL7AccessLogsResponse{}
	mi := &file_server_v1_server_proto_msgTypes[142]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetInventoryClusterL7AccessLogsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetInventoryClusterL7AccessLogsResponse) ProtoMessage() {}

func (x *GetInventoryClusterL7AccessLogsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_server_v1_server_proto_msgTypes[142]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetInventoryClusterL7AccessLogsResponse.ProtoReflect.Descriptor instead.
func (*GetInventoryClusterL7AccessLogsResponse) Descriptor() ([]byte, []int) {
	return file_server_v1_server_proto_rawDescGZIP(), []int{142}
}

func (x *GetInventoryClusterL7AccessLogsResponse) GetAccessLogs() []*L7AccessLogSummary {
	if x != nil {
		return x.AccessLogs
	}
	return nil
}

func (x *GetInventoryClusterL7AccessLogsResponse) GetHasMore() bool {
	if x != nil {
		return x.HasMore
	}
	return false
}

func (x *GetInventoryClusterL7AccessLogsResponse) GetNextPageToken() string {
	if x != nil {
		return x.NextPageToken
	}
	return ""
}

func (x *GetInventoryClusterL7AccessLogsResponse) GetTotalReturned() int32 {
	if x != nil {
		return x.TotalReturned
	}
	return 0
}

func (x *GetInventoryClusterL7AccessLogsResponse) GetLimit() int32 {
	if x != nil {
		return x.Limit
	}
	return 0
}

var File_server_v1_server_proto protoreflect.FileDescriptor

var file_server_v1_server_proto_rawDesc = string([]byte{
	0x0a, 0x16, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2f, 0x76, 0x31, 0x2f, 0x73, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x09, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x2e, 0x76, 0x31, 0x1a, 0x1e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2f, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x73, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x22, 0x5c, 0x0a, 0x15, 0x4f, 0x6e, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x43,
	0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x21, 0x0a,
	0x0c, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0b, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65,
	0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x22, 0xbb, 0x01, 0x0a, 0x16, 0x4f, 0x6e, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x43, 0x6c,
	0x75, 0x73, 0x74, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x21, 0x0a,
	0x0c, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0b, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x54, 0x6f, 0x6b, 0x65, 0x6e,
	0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x64, 0x12,
	0x21, 0x0a, 0x0c, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x4e, 0x61,
	0x6d, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x65, 0x78, 0x70, 0x69, 0x72, 0x65, 0x73, 0x5f, 0x69, 0x6e,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x65, 0x78, 0x70, 0x69, 0x72, 0x65, 0x73, 0x49,
	0x6e, 0x12, 0x1d, 0x0a, 0x0a, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x54, 0x79, 0x70, 0x65,
	0x22, 0x3f, 0x0a, 0x18, 0x52, 0x65, 0x6e, 0x65, 0x77, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72,
	0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x23, 0x0a, 0x0d,
	0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0c, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x54, 0x6f, 0x6b, 0x65,
	0x6e, 0x22, 0x7c, 0x0a, 0x19, 0x52, 0x65, 0x6e, 0x65, 0x77, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65,
	0x72, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x21,
	0x0a, 0x0c, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x54, 0x6f, 0x6b, 0x65,
	0x6e, 0x12, 0x1d, 0x0a, 0x0a, 0x65, 0x78, 0x70, 0x69, 0x72, 0x65, 0x73, 0x5f, 0x69, 0x6e, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x65, 0x78, 0x70, 0x69, 0x72, 0x65, 0x73, 0x49, 0x6e,
	0x12, 0x1d, 0x0a, 0x0a, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x22,
	0x29, 0x0a, 0x17, 0x47, 0x65, 0x74, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x50, 0x6f, 0x6c,
	0x69, 0x63, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x22, 0x57, 0x0a, 0x18, 0x47, 0x65,
	0x74, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3b, 0x0a, 0x06, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e,
	0x76, 0x31, 0x2e, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79,
	0x57, 0x69, 0x74, 0x68, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x52, 0x06, 0x70, 0x6f, 0x6c,
	0x69, 0x63, 0x79, 0x22, 0x31, 0x0a, 0x1f, 0x47, 0x65, 0x74, 0x45, 0x78, 0x69, 0x73, 0x74, 0x69,
	0x6e, 0x67, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x22, 0x60, 0x0a, 0x20, 0x47, 0x65, 0x74, 0x45, 0x78, 0x69,
	0x73, 0x74, 0x69, 0x6e, 0x67, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x50, 0x6f, 0x6c, 0x69,
	0x63, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3c, 0x0a, 0x06, 0x70, 0x6f,
	0x6c, 0x69, 0x63, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x73, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x78, 0x69, 0x73, 0x74, 0x69, 0x6e, 0x67, 0x50,
	0x6f, 0x6c, 0x69, 0x63, 0x79, 0x57, 0x69, 0x74, 0x68, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72,
	0x52, 0x06, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x22, 0xbb, 0x01, 0x0a, 0x1a, 0x4c, 0x69, 0x73,
	0x74, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x69, 0x65, 0x73,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x70, 0x61, 0x67, 0x65, 0x5f,
	0x73, 0x69, 0x7a, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x70, 0x61, 0x67, 0x65,
	0x53, 0x69, 0x7a, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x6f, 0x6b,
	0x65, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x61, 0x67, 0x65, 0x54, 0x6f,
	0x6b, 0x65, 0x6e, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x69,
	0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72,
	0x49, 0x64, 0x12, 0x42, 0x0a, 0x0d, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x5f, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1d, 0x2e, 0x73, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x52, 0x65, 0x76, 0x69,
	0x65, 0x77, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x0c, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0xa7, 0x01, 0x0a, 0x1b, 0x4c, 0x69, 0x73, 0x74, 0x4e,
	0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x69, 0x65, 0x73, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3f, 0x0a, 0x08, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x69,
	0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x2e, 0x76, 0x31, 0x2e, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x50, 0x6f, 0x6c, 0x69,
	0x63, 0x79, 0x57, 0x69, 0x74, 0x68, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x52, 0x08, 0x70,
	0x6f, 0x6c, 0x69, 0x63, 0x69, 0x65, 0x73, 0x12, 0x26, 0x0a, 0x0f, 0x6e, 0x65, 0x78, 0x74, 0x5f,
	0x70, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0d, 0x6e, 0x65, 0x78, 0x74, 0x50, 0x61, 0x67, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12,
	0x1f, 0x0a, 0x0b, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x43, 0x6f, 0x75, 0x6e, 0x74,
	0x22, 0xc0, 0x04, 0x0a, 0x18, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x50, 0x6f, 0x6c, 0x69,
	0x63, 0x79, 0x57, 0x69, 0x74, 0x68, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x12, 0x0e, 0x0a,
	0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1d, 0x0a,
	0x0a, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x64, 0x12, 0x21, 0x0a, 0x0c,
	0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0b, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12,
	0x1c, 0x0a, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x12, 0x12, 0x0a,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x12, 0x30, 0x0a, 0x14, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x5f, 0x77, 0x6f, 0x72, 0x6b,
	0x6c, 0x6f, 0x61, 0x64, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x12, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x57, 0x6f, 0x72, 0x6b, 0x6c, 0x6f, 0x61, 0x64, 0x4e,
	0x61, 0x6d, 0x65, 0x12, 0x30, 0x0a, 0x14, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x5f, 0x77, 0x6f,
	0x72, 0x6b, 0x6c, 0x6f, 0x61, 0x64, 0x5f, 0x6b, 0x69, 0x6e, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x12, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x57, 0x6f, 0x72, 0x6b, 0x6c, 0x6f, 0x61,
	0x64, 0x4b, 0x69, 0x6e, 0x64, 0x12, 0x24, 0x0a, 0x0e, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x5f, 0x61,
	0x6c, 0x6c, 0x5f, 0x79, 0x61, 0x6d, 0x6c, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x61,
	0x6c, 0x6c, 0x6f, 0x77, 0x41, 0x6c, 0x6c, 0x59, 0x61, 0x6d, 0x6c, 0x12, 0x21, 0x0a, 0x0c, 0x74,
	0x72, 0x69, 0x6d, 0x6d, 0x65, 0x64, 0x5f, 0x79, 0x61, 0x6d, 0x6c, 0x18, 0x09, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0b, 0x74, 0x72, 0x69, 0x6d, 0x6d, 0x65, 0x64, 0x59, 0x61, 0x6d, 0x6c, 0x12, 0x4e,
	0x0a, 0x10, 0x73, 0x75, 0x73, 0x70, 0x69, 0x63, 0x69, 0x6f, 0x75, 0x73, 0x5f, 0x66, 0x6c, 0x6f,
	0x77, 0x73, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x75, 0x73, 0x70, 0x69, 0x63, 0x69, 0x6f, 0x75, 0x73, 0x46,
	0x6c, 0x6f, 0x77, 0x57, 0x69, 0x74, 0x68, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x52, 0x0f, 0x73,
	0x75, 0x73, 0x70, 0x69, 0x63, 0x69, 0x6f, 0x75, 0x73, 0x46, 0x6c, 0x6f, 0x77, 0x73, 0x12, 0x34,
	0x0a, 0x0d, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x5f, 0x66, 0x6c, 0x6f, 0x77, 0x73, 0x18,
	0x0b, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x76,
	0x31, 0x2e, 0x46, 0x6c, 0x6f, 0x77, 0x52, 0x0c, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x46,
	0x6c, 0x6f, 0x77, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x72, 0x69, 0x73, 0x6b, 0x5f, 0x73, 0x63, 0x6f,
	0x72, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x72, 0x69, 0x73, 0x6b, 0x53, 0x63,
	0x6f, 0x72, 0x65, 0x12, 0x25, 0x0a, 0x0e, 0x72, 0x69, 0x73, 0x6b, 0x5f, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x61, 0x6c, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x72, 0x69, 0x73,
	0x6b, 0x52, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x65, 0x12, 0x27, 0x0a, 0x0f, 0x64, 0x65,
	0x73, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x73, 0x18, 0x0e, 0x20,
	0x03, 0x28, 0x09, 0x52, 0x0e, 0x64, 0x65, 0x73, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61,
	0x63, 0x65, 0x73, 0x22, 0x6c, 0x0a, 0x18, 0x53, 0x75, 0x73, 0x70, 0x69, 0x63, 0x69, 0x6f, 0x75,
	0x73, 0x46, 0x6c, 0x6f, 0x77, 0x57, 0x69, 0x74, 0x68, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x12,
	0x38, 0x0a, 0x0f, 0x73, 0x75, 0x73, 0x70, 0x69, 0x63, 0x69, 0x6f, 0x75, 0x73, 0x5f, 0x66, 0x6c,
	0x6f, 0x77, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x2e, 0x76, 0x31, 0x2e, 0x46, 0x6c, 0x6f, 0x77, 0x52, 0x0e, 0x73, 0x75, 0x73, 0x70, 0x69,
	0x63, 0x69, 0x6f, 0x75, 0x73, 0x46, 0x6c, 0x6f, 0x77, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x61,
	0x73, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x65, 0x61, 0x73, 0x6f,
	0x6e, 0x22, 0xf4, 0x03, 0x0a, 0x04, 0x46, 0x6c, 0x6f, 0x77, 0x12, 0x15, 0x0a, 0x06, 0x73, 0x72,
	0x63, 0x5f, 0x69, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x73, 0x72, 0x63, 0x49,
	0x70, 0x12, 0x15, 0x0a, 0x06, 0x64, 0x73, 0x74, 0x5f, 0x69, 0x70, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x64, 0x73, 0x74, 0x49, 0x70, 0x12, 0x25, 0x0a, 0x03, 0x73, 0x72, 0x63, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x76,
	0x31, 0x2e, 0x45, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x52, 0x03, 0x73, 0x72, 0x63, 0x12,
	0x25, 0x0a, 0x03, 0x64, 0x73, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x73,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e,
	0x74, 0x52, 0x03, 0x64, 0x73, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x64, 0x69, 0x72, 0x65, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x04, 0x70, 0x6f, 0x72, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x63, 0x6f, 0x6c, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x63, 0x6f, 0x6c, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x12, 0x14,
	0x0a, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x12, 0x39, 0x0a, 0x0a, 0x66, 0x69, 0x72, 0x73, 0x74, 0x5f, 0x73, 0x65,
	0x65, 0x6e, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x66, 0x69, 0x72, 0x73, 0x74, 0x53, 0x65, 0x65, 0x6e, 0x12,
	0x37, 0x0a, 0x09, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x73, 0x65, 0x65, 0x6e, 0x18, 0x0b, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x08,
	0x6c, 0x61, 0x73, 0x74, 0x53, 0x65, 0x65, 0x6e, 0x12, 0x3f, 0x0a, 0x12, 0x69, 0x6e, 0x67, 0x72,
	0x65, 0x73, 0x73, 0x5f, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x5f, 0x62, 0x79, 0x18, 0x0c,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31,
	0x2e, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x52, 0x10, 0x69, 0x6e, 0x67, 0x72, 0x65, 0x73, 0x73,
	0x41, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x42, 0x79, 0x12, 0x3d, 0x0a, 0x11, 0x65, 0x67, 0x72,
	0x65, 0x73, 0x73, 0x5f, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x5f, 0x62, 0x79, 0x18, 0x0d,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31,
	0x2e, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x52, 0x0f, 0x65, 0x67, 0x72, 0x65, 0x73, 0x73, 0x41,
	0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x42, 0x79, 0x22, 0x5a, 0x0a, 0x08, 0x45, 0x6e, 0x64, 0x70,
	0x6f, 0x69, 0x6e, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x6e, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x02, 0x6e, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x6b, 0x69, 0x6e, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x6b, 0x69, 0x6e, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06,
	0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x09, 0x52, 0x06, 0x6c, 0x61,
	0x62, 0x65, 0x6c, 0x73, 0x22, 0x82, 0x01, 0x0a, 0x06, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x12,
	0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63,
	0x65, 0x12, 0x16, 0x0a, 0x06, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28,
	0x09, 0x52, 0x06, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x72, 0x65, 0x76,
	0x69, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x72, 0x65, 0x76,
	0x69, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x6b, 0x69, 0x6e, 0x64, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x6b, 0x69, 0x6e, 0x64, 0x22, 0x7f, 0x0a, 0x22, 0x4c, 0x69, 0x73,
	0x74, 0x45, 0x78, 0x69, 0x73, 0x74, 0x69, 0x6e, 0x67, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b,
	0x50, 0x6f, 0x6c, 0x69, 0x63, 0x69, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x1b, 0x0a, 0x09, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x1d, 0x0a, 0x0a,
	0x70, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x70, 0x61, 0x67, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x1d, 0x0a, 0x0a, 0x63,
	0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x09, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x64, 0x22, 0xb0, 0x01, 0x0a, 0x23, 0x4c,
	0x69, 0x73, 0x74, 0x45, 0x78, 0x69, 0x73, 0x74, 0x69, 0x6e, 0x67, 0x4e, 0x65, 0x74, 0x77, 0x6f,
	0x72, 0x6b, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x69, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x40, 0x0a, 0x08, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x69, 0x65, 0x73, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31,
	0x2e, 0x45, 0x78, 0x69, 0x73, 0x74, 0x69, 0x6e, 0x67, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x57,
	0x69, 0x74, 0x68, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x52, 0x08, 0x70, 0x6f, 0x6c, 0x69,
	0x63, 0x69, 0x65, 0x73, 0x12, 0x26, 0x0a, 0x0f, 0x6e, 0x65, 0x78, 0x74, 0x5f, 0x70, 0x61, 0x67,
	0x65, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x6e,
	0x65, 0x78, 0x74, 0x50, 0x61, 0x67, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x1f, 0x0a, 0x0b,
	0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x0a, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0x95, 0x06,
	0x0a, 0x19, 0x45, 0x78, 0x69, 0x73, 0x74, 0x69, 0x6e, 0x67, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79,
	0x57, 0x69, 0x74, 0x68, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x12, 0x0e, 0x0a, 0x02, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12,
	0x1c, 0x0a, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x12, 0x30, 0x0a,
	0x14, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x5f, 0x77, 0x6f, 0x72, 0x6b, 0x6c, 0x6f, 0x61, 0x64,
	0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x74, 0x61, 0x72,
	0x67, 0x65, 0x74, 0x57, 0x6f, 0x72, 0x6b, 0x6c, 0x6f, 0x61, 0x64, 0x4e, 0x61, 0x6d, 0x65, 0x12,
	0x30, 0x0a, 0x14, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x5f, 0x77, 0x6f, 0x72, 0x6b, 0x6c, 0x6f,
	0x61, 0x64, 0x5f, 0x6b, 0x69, 0x6e, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x74,
	0x61, 0x72, 0x67, 0x65, 0x74, 0x57, 0x6f, 0x72, 0x6b, 0x6c, 0x6f, 0x61, 0x64, 0x4b, 0x69, 0x6e,
	0x64, 0x12, 0x12, 0x0a, 0x04, 0x79, 0x61, 0x6d, 0x6c, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x79, 0x61, 0x6d, 0x6c, 0x12, 0x28, 0x0a, 0x10, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x5f,
	0x68, 0x69, 0x74, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x0e, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x48, 0x69, 0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12,
	0x32, 0x0a, 0x15, 0x72, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x65, 0x64, 0x5f, 0x70,
	0x6f, 0x6c, 0x69, 0x63, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x13,
	0x72, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x65, 0x64, 0x50, 0x6f, 0x6c, 0x69, 0x63,
	0x79, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x69,
	0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72,
	0x49, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65,
	0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x69, 0x6e, 0x67, 0x65, 0x73, 0x74, 0x65,
	0x64, 0x5f, 0x61, 0x74, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x69, 0x6e, 0x67, 0x65,
	0x73, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x4e, 0x0a, 0x10, 0x73, 0x75, 0x73, 0x70, 0x69, 0x63,
	0x69, 0x6f, 0x75, 0x73, 0x5f, 0x66, 0x6c, 0x6f, 0x77, 0x73, 0x18, 0x0c, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x23, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x75, 0x73,
	0x70, 0x69, 0x63, 0x69, 0x6f, 0x75, 0x73, 0x46, 0x6c, 0x6f, 0x77, 0x57, 0x69, 0x74, 0x68, 0x52,
	0x65, 0x61, 0x73, 0x6f, 0x6e, 0x52, 0x0f, 0x73, 0x75, 0x73, 0x70, 0x69, 0x63, 0x69, 0x6f, 0x75,
	0x73, 0x46, 0x6c, 0x6f, 0x77, 0x73, 0x12, 0x34, 0x0a, 0x0d, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x65,
	0x64, 0x5f, 0x66, 0x6c, 0x6f, 0x77, 0x73, 0x18, 0x0d, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0f, 0x2e,
	0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x46, 0x6c, 0x6f, 0x77, 0x52, 0x0c,
	0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x46, 0x6c, 0x6f, 0x77, 0x73, 0x12, 0x18, 0x0a, 0x07,
	0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x73, 0x18, 0x0e, 0x20, 0x03, 0x28, 0x09, 0x52, 0x07, 0x72,
	0x65, 0x61, 0x73, 0x6f, 0x6e, 0x73, 0x12, 0x38, 0x0a, 0x18, 0x73, 0x75, 0x73, 0x70, 0x69, 0x63,
	0x69, 0x6f, 0x75, 0x73, 0x5f, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x5f, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x02, 0x52, 0x16, 0x73, 0x75, 0x73, 0x70, 0x69, 0x63,
	0x69, 0x6f, 0x75, 0x73, 0x41, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x52, 0x61, 0x74, 0x69, 0x6f,
	0x12, 0x34, 0x0a, 0x16, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x5f, 0x61, 0x6c, 0x6c,
	0x6f, 0x77, 0x65, 0x64, 0x5f, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x18, 0x10, 0x20, 0x01, 0x28, 0x02,
	0x52, 0x14, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x41, 0x6c, 0x6c, 0x6f, 0x77, 0x65,
	0x64, 0x52, 0x61, 0x74, 0x69, 0x6f, 0x12, 0x31, 0x0a, 0x14, 0x65, 0x66, 0x66, 0x65, 0x63, 0x74,
	0x69, 0x76, 0x65, 0x6e, 0x65, 0x73, 0x73, 0x5f, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18, 0x11,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x13, 0x65, 0x66, 0x66, 0x65, 0x63, 0x74, 0x69, 0x76, 0x65, 0x6e,
	0x65, 0x73, 0x73, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x12, 0x3a, 0x0a, 0x19, 0x66, 0x69, 0x6e,
	0x61, 0x6c, 0x5f, 0x65, 0x66, 0x66, 0x65, 0x63, 0x74, 0x69, 0x76, 0x65, 0x6e, 0x65, 0x73, 0x73,
	0x5f, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x18, 0x12, 0x20, 0x01, 0x28, 0x02, 0x52, 0x17, 0x66, 0x69,
	0x6e, 0x61, 0x6c, 0x45, 0x66, 0x66, 0x65, 0x63, 0x74, 0x69, 0x76, 0x65, 0x6e, 0x65, 0x73, 0x73,
	0x53, 0x63, 0x6f, 0x72, 0x65, 0x22, 0x15, 0x0a, 0x13, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x6c, 0x75,
	0x73, 0x74, 0x65, 0x72, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x4a, 0x0a, 0x14,
	0x4c, 0x69, 0x73, 0x74, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x73, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x32, 0x0a, 0x08, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x73,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e,
	0x76, 0x31, 0x2e, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x08,
	0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x73, 0x22, 0x18, 0x0a, 0x16, 0x47, 0x65, 0x74, 0x43,
	0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x22, 0xc7, 0x01, 0x0a, 0x17, 0x47, 0x65, 0x74, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65,
	0x72, 0x53, 0x74, 0x61, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x25,
	0x0a, 0x0e, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x73,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0d, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x43, 0x6c, 0x75,
	0x73, 0x74, 0x65, 0x72, 0x73, 0x12, 0x2d, 0x0a, 0x12, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74,
	0x65, 0x64, 0x5f, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x11, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x65, 0x64, 0x43, 0x6c, 0x75, 0x73,
	0x74, 0x65, 0x72, 0x73, 0x12, 0x33, 0x0a, 0x15, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x6e, 0x6e, 0x65,
	0x63, 0x74, 0x65, 0x64, 0x5f, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x73, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x14, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x65,
	0x64, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x73, 0x12, 0x21, 0x0a, 0x0c, 0x6c, 0x61, 0x73,
	0x74, 0x5f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x0b, 0x6c, 0x61, 0x73, 0x74, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x22, 0xa2, 0x01, 0x0a,
	0x0b, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x0e, 0x0a, 0x02,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x21, 0x0a, 0x0c,
	0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0b, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12,
	0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x21, 0x0a, 0x0c, 0x69, 0x73, 0x5f, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x65,
	0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x69, 0x73, 0x43, 0x6f, 0x6e, 0x6e, 0x65,
	0x63, 0x74, 0x65, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x73, 0x65, 0x65,
	0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x6c, 0x61, 0x73, 0x74, 0x53, 0x65, 0x65,
	0x6e, 0x22, 0x43, 0x0a, 0x0f, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x05, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x61,
	0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x61,
	0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x22, 0x62, 0x0a, 0x10, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74,
	0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73,
	0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65,
	0x72, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x5f, 0x69, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x49, 0x64,
	0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x40, 0x0a, 0x0c, 0x4c, 0x6f,
	0x67, 0x69, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x6d,
	0x61, 0x69, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x65, 0x6d, 0x61, 0x69, 0x6c,
	0x12, 0x1a, 0x0a, 0x08, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x22, 0x6c, 0x0a, 0x0d,
	0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x23, 0x0a,
	0x0d, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x54, 0x6f, 0x6b,
	0x65, 0x6e, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x65,
	0x78, 0x70, 0x69, 0x72, 0x65, 0x73, 0x5f, 0x61, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x09, 0x65, 0x78, 0x70, 0x69, 0x72, 0x65, 0x73, 0x41, 0x74, 0x22, 0x34, 0x0a, 0x0d, 0x4c, 0x6f,
	0x67, 0x6f, 0x75, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x23, 0x0a, 0x0d, 0x73,
	0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0c, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x54, 0x6f, 0x6b, 0x65, 0x6e,
	0x22, 0x10, 0x0a, 0x0e, 0x4c, 0x6f, 0x67, 0x6f, 0x75, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x3d, 0x0a, 0x16, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x53, 0x65,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x23, 0x0a, 0x0d,
	0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0c, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x54, 0x6f, 0x6b, 0x65,
	0x6e, 0x22, 0x7d, 0x0a, 0x17, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x53, 0x65, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x14, 0x0a, 0x05,
	0x76, 0x61, 0x6c, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x76, 0x61, 0x6c,
	0x69, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x65,
	0x6d, 0x61, 0x69, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x65, 0x6d, 0x61, 0x69,
	0x6c, 0x12, 0x1d, 0x0a, 0x0a, 0x65, 0x78, 0x70, 0x69, 0x72, 0x65, 0x73, 0x5f, 0x61, 0x74, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x65, 0x78, 0x70, 0x69, 0x72, 0x65, 0x73, 0x41, 0x74,
	0x22, 0x3c, 0x0a, 0x15, 0x52, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x53, 0x65, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x23, 0x0a, 0x0d, 0x73, 0x65, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0c, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x22, 0x63,
	0x0a, 0x16, 0x52, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2a, 0x0a, 0x11, 0x6e, 0x65, 0x77, 0x5f,
	0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0f, 0x6e, 0x65, 0x77, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x54,
	0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x1d, 0x0a, 0x0a, 0x65, 0x78, 0x70, 0x69, 0x72, 0x65, 0x73, 0x5f,
	0x61, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x65, 0x78, 0x70, 0x69, 0x72, 0x65,
	0x73, 0x41, 0x74, 0x22, 0x4b, 0x0a, 0x13, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x65, 0x6e,
	0x61, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x20,
	0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x22, 0x61, 0x0a, 0x14, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x65, 0x6e, 0x61, 0x6e, 0x74,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x74, 0x65, 0x6e, 0x61,
	0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x74, 0x65, 0x6e,
	0x61, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x22, 0x2f, 0x0a, 0x10, 0x47, 0x65, 0x74, 0x54, 0x65, 0x6e, 0x61, 0x6e, 0x74,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x74, 0x65, 0x6e, 0x61, 0x6e,
	0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x74, 0x65, 0x6e, 0x61,
	0x6e, 0x74, 0x49, 0x64, 0x22, 0x8c, 0x01, 0x0a, 0x11, 0x47, 0x65, 0x74, 0x54, 0x65, 0x6e, 0x61,
	0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x74, 0x65,
	0x6e, 0x61, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x74,
	0x65, 0x6e, 0x61, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x27, 0x0a, 0x0f, 0x73,
	0x65, 0x74, 0x75, 0x70, 0x5f, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x0e, 0x73, 0x65, 0x74, 0x75, 0x70, 0x43, 0x6f, 0x6d, 0x70, 0x6c,
	0x65, 0x74, 0x65, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f,
	0x61, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x64, 0x41, 0x74, 0x22, 0x46, 0x0a, 0x13, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x65, 0x6e,
	0x61, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x74, 0x65,
	0x6e, 0x61, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x74,
	0x65, 0x6e, 0x61, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0x61, 0x0a, 0x14, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x5f, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x49, 0x64,
	0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x4f,
	0x0a, 0x17, 0x4c, 0x69, 0x6e, 0x6b, 0x55, 0x73, 0x65, 0x72, 0x54, 0x6f, 0x54, 0x65, 0x6e, 0x61,
	0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65,
	0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72,
	0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x49, 0x64, 0x22,
	0x34, 0x0a, 0x18, 0x4c, 0x69, 0x6e, 0x6b, 0x55, 0x73, 0x65, 0x72, 0x54, 0x6f, 0x54, 0x65, 0x6e,
	0x61, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x6d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x45, 0x0a, 0x1e, 0x47, 0x65, 0x74, 0x50, 0x6f, 0x6c, 0x69,
	0x63, 0x79, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x46, 0x6f, 0x72, 0x54, 0x65, 0x6e, 0x61, 0x6e, 0x74,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x23, 0x0a, 0x0d, 0x72, 0x65, 0x76, 0x69, 0x65,
	0x77, 0x65, 0x64, 0x5f, 0x6f, 0x6e, 0x6c, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c,
	0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x65, 0x64, 0x4f, 0x6e, 0x6c, 0x79, 0x22, 0x44, 0x0a, 0x1f,
	0x47, 0x65, 0x74, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x46, 0x6f,
	0x72, 0x54, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x21, 0x0a, 0x0c, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x43, 0x6f, 0x75,
	0x6e, 0x74, 0x22, 0x1e, 0x0a, 0x1c, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x43, 0x6f, 0x75,
	0x6e, 0x74, 0x46, 0x6f, 0x72, 0x54, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x22, 0x3e, 0x0a, 0x1d, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x43, 0x6f, 0x75,
	0x6e, 0x74, 0x46, 0x6f, 0x72, 0x54, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x75, 0x73, 0x65, 0x72, 0x43, 0x6f, 0x75,
	0x6e, 0x74, 0x22, 0x71, 0x0a, 0x21, 0x47, 0x65, 0x74, 0x52, 0x65, 0x63, 0x65, 0x6e, 0x74, 0x50,
	0x6f, 0x6c, 0x69, 0x63, 0x69, 0x65, 0x73, 0x46, 0x6f, 0x72, 0x54, 0x65, 0x6e, 0x61, 0x6e, 0x74,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x36, 0x0a, 0x08, 0x72, 0x65, 0x76, 0x69, 0x65,
	0x77, 0x65, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x42, 0x6f, 0x6f, 0x6c,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x08, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x65, 0x64, 0x12,
	0x14, 0x0a, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05,
	0x6c, 0x69, 0x6d, 0x69, 0x74, 0x22, 0x9a, 0x01, 0x0a, 0x0c, 0x52, 0x65, 0x63, 0x65, 0x6e, 0x74,
	0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70,
	0x61, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73,
	0x70, 0x61, 0x63, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x5f,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x63, 0x6c, 0x75, 0x73,
	0x74, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x63, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77,
	0x65, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77,
	0x65, 0x64, 0x22, 0x59, 0x0a, 0x22, 0x47, 0x65, 0x74, 0x52, 0x65, 0x63, 0x65, 0x6e, 0x74, 0x50,
	0x6f, 0x6c, 0x69, 0x63, 0x69, 0x65, 0x73, 0x46, 0x6f, 0x72, 0x54, 0x65, 0x6e, 0x61, 0x6e, 0x74,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x33, 0x0a, 0x08, 0x70, 0x6f, 0x6c, 0x69,
	0x63, 0x69, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x73, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x63, 0x65, 0x6e, 0x74, 0x50, 0x6f, 0x6c,
	0x69, 0x63, 0x79, 0x52, 0x08, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x69, 0x65, 0x73, 0x22, 0x7e, 0x0a,
	0x2e, 0x47, 0x65, 0x74, 0x52, 0x65, 0x63, 0x65, 0x6e, 0x74, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72,
	0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x69, 0x65, 0x73, 0x46,
	0x6f, 0x72, 0x54, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x36, 0x0a, 0x08, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x65, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x08, 0x72,
	0x65, 0x76, 0x69, 0x65, 0x77, 0x65, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x22, 0x66, 0x0a,
	0x2f, 0x47, 0x65, 0x74, 0x52, 0x65, 0x63, 0x65, 0x6e, 0x74, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72,
	0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x69, 0x65, 0x73, 0x46,
	0x6f, 0x72, 0x54, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x33, 0x0a, 0x08, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x69, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x17, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x52,
	0x65, 0x63, 0x65, 0x6e, 0x74, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x52, 0x08, 0x70, 0x6f, 0x6c,
	0x69, 0x63, 0x69, 0x65, 0x73, 0x22, 0x39, 0x0a, 0x21, 0x47, 0x65, 0x74, 0x52, 0x65, 0x63, 0x65,
	0x6e, 0x74, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x73, 0x46, 0x6f, 0x72, 0x54, 0x65, 0x6e,
	0x61, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x69,
	0x6d, 0x69, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74,
	0x22, 0xc3, 0x01, 0x0a, 0x0d, 0x52, 0x65, 0x63, 0x65, 0x6e, 0x74, 0x43, 0x6c, 0x75, 0x73, 0x74,
	0x65, 0x72, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02,
	0x69, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65,
	0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63,
	0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x63, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x73,
	0x65, 0x65, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x6c, 0x61, 0x73, 0x74, 0x53,
	0x65, 0x65, 0x6e, 0x12, 0x21, 0x0a, 0x0c, 0x69, 0x73, 0x5f, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63,
	0x74, 0x65, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x69, 0x73, 0x43, 0x6f, 0x6e,
	0x6e, 0x65, 0x63, 0x74, 0x65, 0x64, 0x22, 0x5a, 0x0a, 0x22, 0x47, 0x65, 0x74, 0x52, 0x65, 0x63,
	0x65, 0x6e, 0x74, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x73, 0x46, 0x6f, 0x72, 0x54, 0x65,
	0x6e, 0x61, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x34, 0x0a, 0x08,
	0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x18,
	0x2e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x63, 0x65, 0x6e,
	0x74, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x52, 0x08, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65,
	0x72, 0x73, 0x22, 0x36, 0x0a, 0x1e, 0x47, 0x65, 0x74, 0x52, 0x65, 0x63, 0x65, 0x6e, 0x74, 0x55,
	0x73, 0x65, 0x72, 0x73, 0x46, 0x6f, 0x72, 0x54, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x22, 0x51, 0x0a, 0x0a, 0x52, 0x65,
	0x63, 0x65, 0x6e, 0x74, 0x55, 0x73, 0x65, 0x72, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x6d, 0x61, 0x69,
	0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x12, 0x1d,
	0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x22, 0x4e, 0x0a,
	0x1f, 0x47, 0x65, 0x74, 0x52, 0x65, 0x63, 0x65, 0x6e, 0x74, 0x55, 0x73, 0x65, 0x72, 0x73, 0x46,
	0x6f, 0x72, 0x54, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x2b, 0x0a, 0x05, 0x75, 0x73, 0x65, 0x72, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x15, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x63, 0x65,
	0x6e, 0x74, 0x55, 0x73, 0x65, 0x72, 0x52, 0x05, 0x75, 0x73, 0x65, 0x72, 0x73, 0x22, 0x37, 0x0a,
	0x16, 0x4f, 0x66, 0x66, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x6c, 0x75, 0x73, 0x74,
	0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x6c, 0x75,
	0x73, 0x74, 0x65, 0x72, 0x49, 0x64, 0x22, 0x19, 0x0a, 0x17, 0x4f, 0x66, 0x66, 0x62, 0x6f, 0x61,
	0x72, 0x64, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x59, 0x0a, 0x1b, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72,
	0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x69, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x1b, 0x0a, 0x09, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x1d, 0x0a,
	0x0a, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x70, 0x61, 0x67, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x22, 0x91, 0x02, 0x0a,
	0x0e, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x12,
	0x1d, 0x0a, 0x0a, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x64, 0x12, 0x21,
	0x0a, 0x0c, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x4e, 0x61, 0x6d,
	0x65, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61,
	0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64,
	0x41, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x65, 0x78, 0x70, 0x69, 0x72, 0x65, 0x73, 0x5f, 0x61, 0x74,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x65, 0x78, 0x70, 0x69, 0x72, 0x65, 0x73, 0x41,
	0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x69, 0x73, 0x5f, 0x65, 0x78, 0x70, 0x69, 0x72, 0x65, 0x64, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x69, 0x73, 0x45, 0x78, 0x70, 0x69, 0x72, 0x65, 0x64,
	0x12, 0x1b, 0x0a, 0x09, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x73, 0x65, 0x65, 0x6e, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x08, 0x6c, 0x61, 0x73, 0x74, 0x53, 0x65, 0x65, 0x6e, 0x12, 0x21, 0x0a,
	0x0c, 0x69, 0x73, 0x5f, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x65, 0x64, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x0b, 0x69, 0x73, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x65, 0x64,
	0x22, 0x7d, 0x0a, 0x1c, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x53,
	0x75, 0x6d, 0x6d, 0x61, 0x72, 0x69, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x35, 0x0a, 0x08, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x73, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x19, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x43,
	0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x52, 0x08, 0x63,
	0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x73, 0x12, 0x26, 0x0a, 0x0f, 0x6e, 0x65, 0x78, 0x74, 0x5f,
	0x70, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0d, 0x6e, 0x65, 0x78, 0x74, 0x50, 0x61, 0x67, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x22,
	0x17, 0x0a, 0x15, 0x47, 0x65, 0x74, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x55, 0x73, 0x65,
	0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x97, 0x01, 0x0a, 0x16, 0x47, 0x65, 0x74,
	0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05,
	0x65, 0x6d, 0x61, 0x69, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x65, 0x6d, 0x61,
	0x69, 0x6c, 0x12, 0x12, 0x0a, 0x04, 0x72, 0x6f, 0x6c, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x72, 0x6f, 0x6c, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74,
	0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x74, 0x65, 0x6e, 0x61, 0x6e,
	0x74, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61,
	0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64,
	0x41, 0x74, 0x22, 0x30, 0x0a, 0x18, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x55, 0x73, 0x65, 0x72,
	0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x14,
	0x0a, 0x05, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x65,
	0x6d, 0x61, 0x69, 0x6c, 0x22, 0x35, 0x0a, 0x19, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x55, 0x73,
	0x65, 0x72, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x44, 0x0a, 0x15, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x55, 0x73, 0x65, 0x72, 0x52, 0x6f, 0x6c, 0x65, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x12, 0x0a,
	0x04, 0x72, 0x6f, 0x6c, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x72, 0x6f, 0x6c,
	0x65, 0x22, 0x32, 0x0a, 0x16, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x55, 0x73, 0x65, 0x72, 0x52,
	0x6f, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x6d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x18, 0x0a, 0x16, 0x4c, 0x69, 0x73, 0x74, 0x54, 0x65, 0x6e,
	0x61, 0x6e, 0x74, 0x55, 0x73, 0x65, 0x72, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22,
	0x46, 0x0a, 0x17, 0x4c, 0x69, 0x73, 0x74, 0x54, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x55, 0x73, 0x65,
	0x72, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2b, 0x0a, 0x05, 0x75, 0x73,
	0x65, 0x72, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x73, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x55, 0x73, 0x65, 0x72,
	0x52, 0x05, 0x75, 0x73, 0x65, 0x72, 0x73, 0x22, 0x6e, 0x0a, 0x0a, 0x54, 0x65, 0x6e, 0x61, 0x6e,
	0x74, 0x55, 0x73, 0x65, 0x72, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x14,
	0x0a, 0x05, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x65,
	0x6d, 0x61, 0x69, 0x6c, 0x12, 0x12, 0x0a, 0x04, 0x72, 0x6f, 0x6c, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x72, 0x6f, 0x6c, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x63, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x22, 0x3d, 0x0a, 0x11, 0x49, 0x6e, 0x76, 0x69, 0x74,
	0x65, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05,
	0x65, 0x6d, 0x61, 0x69, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x65, 0x6d, 0x61,
	0x69, 0x6c, 0x12, 0x12, 0x0a, 0x04, 0x72, 0x6f, 0x6c, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x72, 0x6f, 0x6c, 0x65, 0x22, 0x53, 0x0a, 0x12, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x65,
	0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x23, 0x0a, 0x0d,
	0x69, 0x6e, 0x76, 0x69, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0c, 0x69, 0x6e, 0x76, 0x69, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49,
	0x64, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x33, 0x0a, 0x18, 0x52,
	0x65, 0x6d, 0x6f, 0x76, 0x65, 0x55, 0x73, 0x65, 0x72, 0x46, 0x72, 0x6f, 0x6d, 0x4f, 0x72, 0x67,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64,
	0x22, 0x35, 0x0a, 0x19, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x55, 0x73, 0x65, 0x72, 0x46, 0x72,
	0x6f, 0x6d, 0x4f, 0x72, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x18, 0x0a,
	0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x18, 0x0a, 0x16, 0x4c, 0x69, 0x73, 0x74, 0x49,
	0x6e, 0x76, 0x69, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x22, 0x52, 0x0a, 0x17, 0x4c, 0x69, 0x73, 0x74, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x37, 0x0a, 0x0b,
	0x69, 0x6e, 0x76, 0x69, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x15, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x6e,
	0x76, 0x69, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0b, 0x69, 0x6e, 0x76, 0x69, 0x74, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x22, 0xb8, 0x01, 0x0a, 0x0a, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x23, 0x0a, 0x0d, 0x69, 0x6e, 0x76, 0x69, 0x74, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x69, 0x6e, 0x76,
	0x69, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x6d, 0x61,
	0x69, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x12,
	0x12, 0x0a, 0x04, 0x72, 0x6f, 0x6c, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x72,
	0x6f, 0x6c, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x69, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x64, 0x5f, 0x62,
	0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x69, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x64,
	0x42, 0x79, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41,
	0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x65, 0x78, 0x70, 0x69, 0x72, 0x65, 0x73, 0x5f, 0x61, 0x74, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x65, 0x78, 0x70, 0x69, 0x72, 0x65, 0x73, 0x41, 0x74,
	0x22, 0x3e, 0x0a, 0x17, 0x52, 0x65, 0x76, 0x6f, 0x6b, 0x65, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x23, 0x0a, 0x0d, 0x69,
	0x6e, 0x76, 0x69, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0c, 0x69, 0x6e, 0x76, 0x69, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64,
	0x22, 0x34, 0x0a, 0x18, 0x52, 0x65, 0x76, 0x6f, 0x6b, 0x65, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x18, 0x0a, 0x07,
	0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x59, 0x0a, 0x1b, 0x41, 0x73, 0x73, 0x69, 0x67, 0x6e,
	0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x21,
	0x0a, 0x0c, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x49,
	0x64, 0x22, 0x38, 0x0a, 0x1c, 0x41, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x73,
	0x70, 0x61, 0x63, 0x65, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x59, 0x0a, 0x1b, 0x52,
	0x65, 0x6d, 0x6f, 0x76, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x4f, 0x77,
	0x6e, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73,
	0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65,
	0x72, 0x49, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65,
	0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x6e, 0x61, 0x6d, 0x65, 0x73,
	0x70, 0x61, 0x63, 0x65, 0x49, 0x64, 0x22, 0x38, 0x0a, 0x1c, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65,
	0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x22, 0x3e, 0x0a, 0x19, 0x47, 0x65, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65,
	0x4f, 0x77, 0x6e, 0x65, 0x72, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x21, 0x0a,
	0x0c, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0b, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x49, 0x64,
	0x22, 0x37, 0x0a, 0x1a, 0x47, 0x65, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65,
	0x4f, 0x77, 0x6e, 0x65, 0x72, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x19,
	0x0a, 0x08, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09,
	0x52, 0x07, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x73, 0x22, 0x45, 0x0a, 0x20, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x4f, 0x77, 0x6e,
	0x65, 0x72, 0x73, 0x68, 0x69, 0x70, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x21, 0x0a,
	0x0c, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0b, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x49, 0x64,
	0x22, 0x5c, 0x0a, 0x21, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x73,
	0x70, 0x61, 0x63, 0x65, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x73, 0x68, 0x69, 0x70, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x72, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x27,
	0x0a, 0x25, 0x4c, 0x69, 0x73, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x4f,
	0x77, 0x6e, 0x65, 0x72, 0x73, 0x68, 0x69, 0x70, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x73,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x6a, 0x0a, 0x26, 0x4c, 0x69, 0x73, 0x74, 0x4e,
	0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x73, 0x68, 0x69,
	0x70, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x40, 0x0a, 0x08, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x73, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e,
	0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x73, 0x68,
	0x69, 0x70, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x08, 0x72, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x73, 0x22, 0x87, 0x02, 0x0a, 0x19, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63,
	0x65, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x73, 0x68, 0x69, 0x70, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69,
	0x64, 0x12, 0x21, 0x0a, 0x0c, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x5f, 0x69,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61,
	0x63, 0x65, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x16, 0x0a,
	0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64,
	0x5f, 0x61, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x64, 0x41, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x65, 0x6d, 0x61,
	0x69, 0x6c, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x75, 0x73, 0x65, 0x72, 0x45, 0x6d,
	0x61, 0x69, 0x6c, 0x12, 0x25, 0x0a, 0x0e, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65,
	0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x6e, 0x61, 0x6d,
	0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x63, 0x6c,
	0x75, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0b, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0x3f, 0x0a,
	0x1e, 0x41, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x65, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x73, 0x68, 0x69,
	0x70, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x1d, 0x0a, 0x0a, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x64, 0x22, 0x3b,
	0x0a, 0x1f, 0x41, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x65, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x73, 0x68,
	0x69, 0x70, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x3e, 0x0a, 0x1d, 0x52,
	0x65, 0x6a, 0x65, 0x63, 0x74, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x73, 0x68, 0x69, 0x70, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1d, 0x0a, 0x0a,
	0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x64, 0x22, 0x3a, 0x0a, 0x1e, 0x52,
	0x65, 0x6a, 0x65, 0x63, 0x74, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x73, 0x68, 0x69, 0x70, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x18, 0x0a,
	0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x29, 0x0a, 0x27, 0x47, 0x65, 0x74, 0x41, 0x6c,
	0x6c, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x73,
	0x68, 0x69, 0x70, 0x4d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x22, 0x51, 0x0a, 0x13, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x41,
	0x73, 0x73, 0x69, 0x67, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65,
	0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72,
	0x49, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x5f,
	0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70,
	0x61, 0x63, 0x65, 0x49, 0x64, 0x22, 0x6c, 0x0a, 0x28, 0x47, 0x65, 0x74, 0x41, 0x6c, 0x6c, 0x4e,
	0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x73, 0x68, 0x69,
	0x70, 0x4d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x40, 0x0a, 0x0b, 0x61, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x73,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e,
	0x76, 0x31, 0x2e, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x41, 0x73, 0x73, 0x69,
	0x67, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x0b, 0x61, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x6d, 0x65,
	0x6e, 0x74, 0x73, 0x22, 0x76, 0x0a, 0x0e, 0x4f, 0x77, 0x6e, 0x65, 0x64, 0x4e, 0x61, 0x6d, 0x65,
	0x73, 0x70, 0x61, 0x63, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x6c, 0x75,
	0x73, 0x74, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63,
	0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x63, 0x6c, 0x75, 0x73,
	0x74, 0x65, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b,
	0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0x19, 0x0a, 0x17, 0x4c,
	0x69, 0x73, 0x74, 0x4d, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x73, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x55, 0x0a, 0x18, 0x4c, 0x69, 0x73, 0x74, 0x4d, 0x79,
	0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x39, 0x0a, 0x0a, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x73,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e,
	0x76, 0x31, 0x2e, 0x4f, 0x77, 0x6e, 0x65, 0x64, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63,
	0x65, 0x52, 0x0a, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x73, 0x22, 0x60, 0x0a,
	0x22, 0x47, 0x65, 0x74, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x69, 0x65, 0x73, 0x41, 0x77, 0x61, 0x69,
	0x74, 0x69, 0x6e, 0x67, 0x4d, 0x79, 0x52, 0x65, 0x76, 0x69, 0x65, 0x77, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x73, 0x69, 0x7a, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65,
	0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x61, 0x67, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x22,
	0xcf, 0x03, 0x0a, 0x14, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x41, 0x77, 0x61, 0x69, 0x74, 0x69,
	0x6e, 0x67, 0x52, 0x65, 0x76, 0x69, 0x65, 0x77, 0x12, 0x1b, 0x0a, 0x09, 0x70, 0x6f, 0x6c, 0x69,
	0x63, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x6f, 0x6c,
	0x69, 0x63, 0x79, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x5f,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x70, 0x6f, 0x6c, 0x69,
	0x63, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70,
	0x61, 0x63, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73,
	0x70, 0x61, 0x63, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x5f,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x63, 0x6c, 0x75, 0x73,
	0x74, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x30, 0x0a, 0x14, 0x74, 0x61, 0x72, 0x67, 0x65,
	0x74, 0x5f, 0x77, 0x6f, 0x72, 0x6b, 0x6c, 0x6f, 0x61, 0x64, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x57, 0x6f, 0x72,
	0x6b, 0x6c, 0x6f, 0x61, 0x64, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x30, 0x0a, 0x14, 0x74, 0x61, 0x72,
	0x67, 0x65, 0x74, 0x5f, 0x77, 0x6f, 0x72, 0x6b, 0x6c, 0x6f, 0x61, 0x64, 0x5f, 0x6b, 0x69, 0x6e,
	0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x57,
	0x6f, 0x72, 0x6b, 0x6c, 0x6f, 0x61, 0x64, 0x4b, 0x69, 0x6e, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x72,
	0x69, 0x73, 0x6b, 0x5f, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x09, 0x72, 0x69, 0x73, 0x6b, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x12, 0x25, 0x0a, 0x0e, 0x72, 0x69,
	0x73, 0x6b, 0x5f, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x65, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0d, 0x72, 0x69, 0x73, 0x6b, 0x52, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c,
	0x65, 0x12, 0x27, 0x0a, 0x0f, 0x64, 0x65, 0x73, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70,
	0x61, 0x63, 0x65, 0x73, 0x18, 0x09, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0e, 0x64, 0x65, 0x73, 0x74,
	0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09,
	0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x23, 0x0a, 0x0d, 0x72, 0x65, 0x76,
	0x69, 0x65, 0x77, 0x65, 0x72, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0c, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x12, 0x21,
	0x0a, 0x0c, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x0c,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x49,
	0x64, 0x22, 0x8a, 0x01, 0x0a, 0x23, 0x47, 0x65, 0x74, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x69, 0x65,
	0x73, 0x41, 0x77, 0x61, 0x69, 0x74, 0x69, 0x6e, 0x67, 0x4d, 0x79, 0x52, 0x65, 0x76, 0x69, 0x65,
	0x77, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3b, 0x0a, 0x08, 0x70, 0x6f, 0x6c,
	0x69, 0x63, 0x69, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x73, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x41, 0x77,
	0x61, 0x69, 0x74, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x76, 0x69, 0x65, 0x77, 0x52, 0x08, 0x70, 0x6f,
	0x6c, 0x69, 0x63, 0x69, 0x65, 0x73, 0x12, 0x26, 0x0a, 0x0f, 0x6e, 0x65, 0x78, 0x74, 0x5f, 0x70,
	0x61, 0x67, 0x65, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0d, 0x6e, 0x65, 0x78, 0x74, 0x50, 0x61, 0x67, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x22, 0x20,
	0x0a, 0x1e, 0x47, 0x65, 0x74, 0x4d, 0x79, 0x50, 0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x52, 0x65,
	0x76, 0x69, 0x65, 0x77, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x22, 0x46, 0x0a, 0x1f, 0x47, 0x65, 0x74, 0x4d, 0x79, 0x50, 0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67,
	0x52, 0x65, 0x76, 0x69, 0x65, 0x77, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x70, 0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x5f, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x70, 0x65, 0x6e, 0x64,
	0x69, 0x6e, 0x67, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0x6f, 0x0a, 0x19, 0x53, 0x75, 0x62, 0x6d,
	0x69, 0x74, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x52, 0x65, 0x76, 0x69, 0x65, 0x77, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x5f,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79,
	0x49, 0x64, 0x12, 0x35, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x1d, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x50,
	0x6f, 0x6c, 0x69, 0x63, 0x79, 0x52, 0x65, 0x76, 0x69, 0x65, 0x77, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0x36, 0x0a, 0x1a, 0x53, 0x75, 0x62,
	0x6d, 0x69, 0x74, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x52, 0x65, 0x76, 0x69, 0x65, 0x77, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x22, 0x3b, 0x0a, 0x1c, 0x47, 0x65, 0x74, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x52, 0x65,
	0x76, 0x69, 0x65, 0x77, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x1b, 0x0a, 0x09, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x49, 0x64, 0x22, 0xc6,
	0x02, 0x0a, 0x16, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x52, 0x65, 0x76, 0x69, 0x65, 0x77, 0x41,
	0x73, 0x73, 0x69, 0x67, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65,
	0x72, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72,
	0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x65, 0x6d, 0x61, 0x69, 0x6c,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x75, 0x73, 0x65, 0x72, 0x45, 0x6d, 0x61, 0x69,
	0x6c, 0x12, 0x23, 0x0a, 0x0d, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x65, 0x72, 0x5f, 0x74, 0x79,
	0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77,
	0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70,
	0x61, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x6e, 0x61,
	0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x49, 0x64, 0x12, 0x25, 0x0a, 0x0e, 0x6e, 0x61, 0x6d,
	0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0d, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65,
	0x12, 0x35, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x1d, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x6f, 0x6c,
	0x69, 0x63, 0x79, 0x52, 0x65, 0x76, 0x69, 0x65, 0x77, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52,
	0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x72, 0x65, 0x76, 0x69, 0x65,
	0x77, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x72, 0x65,
	0x76, 0x69, 0x65, 0x77, 0x65, 0x64, 0x41, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x63, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x22, 0xaf, 0x04, 0x0a, 0x13, 0x50, 0x6f, 0x6c, 0x69,
	0x63, 0x79, 0x52, 0x65, 0x76, 0x69, 0x65, 0x77, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x12,
	0x1b, 0x0a, 0x09, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x49, 0x64, 0x12, 0x27, 0x0a, 0x0f,
	0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x65, 0x72, 0x73, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0e, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x52, 0x65, 0x76, 0x69,
	0x65, 0x77, 0x65, 0x72, 0x73, 0x12, 0x29, 0x0a, 0x10, 0x61, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x65,
	0x64, 0x5f, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x0f, 0x61, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x65, 0x64, 0x52, 0x65, 0x76, 0x69, 0x65, 0x77, 0x73,
	0x12, 0x29, 0x0a, 0x10, 0x72, 0x65, 0x6a, 0x65, 0x63, 0x74, 0x65, 0x64, 0x5f, 0x72, 0x65, 0x76,
	0x69, 0x65, 0x77, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0f, 0x72, 0x65, 0x6a, 0x65,
	0x63, 0x74, 0x65, 0x64, 0x52, 0x65, 0x76, 0x69, 0x65, 0x77, 0x73, 0x12, 0x27, 0x0a, 0x0f, 0x70,
	0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x5f, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x73, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x0e, 0x70, 0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x76,
	0x69, 0x65, 0x77, 0x73, 0x12, 0x43, 0x0a, 0x1e, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x73,
	0x5f, 0x73, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x5f, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x5f,
	0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x1b, 0x72, 0x65,
	0x71, 0x75, 0x69, 0x72, 0x65, 0x73, 0x53, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x41, 0x64,
	0x6d, 0x69, 0x6e, 0x52, 0x65, 0x76, 0x69, 0x65, 0x77, 0x12, 0x30, 0x0a, 0x14, 0x73, 0x65, 0x63,
	0x75, 0x72, 0x69, 0x74, 0x79, 0x5f, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x5f, 0x74, 0x6f, 0x74, 0x61,
	0x6c, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x12, 0x73, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74,
	0x79, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x12, 0x38, 0x0a, 0x18, 0x73,
	0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x5f, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x5f, 0x61, 0x70,
	0x70, 0x72, 0x6f, 0x76, 0x61, 0x6c, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x05, 0x52, 0x16, 0x73,
	0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x41, 0x70, 0x70, 0x72,
	0x6f, 0x76, 0x61, 0x6c, 0x73, 0x12, 0x3d, 0x0a, 0x1b, 0x68, 0x61, 0x73, 0x5f, 0x73, 0x65, 0x63,
	0x75, 0x72, 0x69, 0x74, 0x79, 0x5f, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x5f, 0x61, 0x70, 0x70, 0x72,
	0x6f, 0x76, 0x61, 0x6c, 0x18, 0x09, 0x20, 0x01, 0x28, 0x08, 0x52, 0x18, 0x68, 0x61, 0x73, 0x53,
	0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x41, 0x70, 0x70, 0x72,
	0x6f, 0x76, 0x61, 0x6c, 0x12, 0x3d, 0x0a, 0x1b, 0x61, 0x6c, 0x6c, 0x5f, 0x61, 0x70, 0x70, 0x5f,
	0x64, 0x65, 0x76, 0x65, 0x6c, 0x6f, 0x70, 0x65, 0x72, 0x73, 0x5f, 0x61, 0x70, 0x70, 0x72, 0x6f,
	0x76, 0x65, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x08, 0x52, 0x18, 0x61, 0x6c, 0x6c, 0x41, 0x70,
	0x70, 0x44, 0x65, 0x76, 0x65, 0x6c, 0x6f, 0x70, 0x65, 0x72, 0x73, 0x41, 0x70, 0x70, 0x72, 0x6f,
	0x76, 0x65, 0x64, 0x12, 0x24, 0x0a, 0x0e, 0x63, 0x61, 0x6e, 0x5f, 0x62, 0x65, 0x5f, 0x61, 0x70,
	0x70, 0x6c, 0x69, 0x65, 0x64, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x63, 0x61, 0x6e,
	0x42, 0x65, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x65, 0x64, 0x22, 0x9e, 0x01, 0x0a, 0x1d, 0x47, 0x65,
	0x74, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x52, 0x65, 0x76, 0x69, 0x65, 0x77, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x38, 0x0a, 0x07, 0x73,
	0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x73,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x52,
	0x65, 0x76, 0x69, 0x65, 0x77, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x52, 0x07, 0x73, 0x75,
	0x6d, 0x6d, 0x61, 0x72, 0x79, 0x12, 0x43, 0x0a, 0x0b, 0x61, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x6d,
	0x65, 0x6e, 0x74, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x73, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x52, 0x65, 0x76,
	0x69, 0x65, 0x77, 0x41, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x0b, 0x61,
	0x73, 0x73, 0x69, 0x67, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x22, 0x3d, 0x0a, 0x1c, 0x54, 0x72,
	0x69, 0x67, 0x67, 0x65, 0x72, 0x52, 0x69, 0x73, 0x6b, 0x41, 0x73, 0x73, 0x65, 0x73, 0x73, 0x6d,
	0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x6c,
	0x75, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x64, 0x22, 0x5e, 0x0a, 0x1d, 0x54, 0x72, 0x69,
	0x67, 0x67, 0x65, 0x72, 0x52, 0x69, 0x73, 0x6b, 0x41, 0x73, 0x73, 0x65, 0x73, 0x73, 0x6d, 0x65,
	0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x61, 0x73,
	0x73, 0x65, 0x73, 0x73, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0c, 0x61, 0x73, 0x73, 0x65, 0x73, 0x73, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12,
	0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x45, 0x0a, 0x1e, 0x47, 0x65, 0x74,
	0x52, 0x69, 0x73, 0x6b, 0x41, 0x73, 0x73, 0x65, 0x73, 0x73, 0x6d, 0x65, 0x6e, 0x74, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x23, 0x0a, 0x0d, 0x61,
	0x73, 0x73, 0x65, 0x73, 0x73, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0c, 0x61, 0x73, 0x73, 0x65, 0x73, 0x73, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x64,
	0x22, 0x9d, 0x02, 0x0a, 0x1b, 0x52, 0x69, 0x73, 0x6b, 0x41, 0x73, 0x73, 0x65, 0x73, 0x73, 0x6d,
	0x65, 0x6e, 0x74, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x54, 0x68, 0x69, 0x6e, 0x6b, 0x69, 0x6e, 0x67,
	0x12, 0x41, 0x0a, 0x0a, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x22, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31,
	0x2e, 0x52, 0x69, 0x73, 0x6b, 0x41, 0x73, 0x73, 0x65, 0x73, 0x73, 0x6d, 0x65, 0x6e, 0x74, 0x41,
	0x67, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x52, 0x09, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x2b, 0x0a, 0x11, 0x74, 0x68, 0x69, 0x6e, 0x6b, 0x69, 0x6e, 0x67, 0x5f,
	0x6f, 0x76, 0x65, 0x72, 0x76, 0x69, 0x65, 0x77, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10,
	0x74, 0x68, 0x69, 0x6e, 0x6b, 0x69, 0x6e, 0x67, 0x4f, 0x76, 0x65, 0x72, 0x76, 0x69, 0x65, 0x77,
	0x12, 0x1f, 0x0a, 0x0b, 0x74, 0x75, 0x72, 0x6e, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x74, 0x75, 0x72, 0x6e, 0x4e, 0x75, 0x6d, 0x62, 0x65,
	0x72, 0x12, 0x32, 0x0a, 0x0a, 0x74, 0x6f, 0x6f, 0x6c, 0x5f, 0x63, 0x61, 0x6c, 0x6c, 0x73, 0x18,
	0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x76,
	0x31, 0x2e, 0x54, 0x6f, 0x6f, 0x6c, 0x43, 0x61, 0x6c, 0x6c, 0x52, 0x09, 0x74, 0x6f, 0x6f, 0x6c,
	0x43, 0x61, 0x6c, 0x6c, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x66, 0x69, 0x6e, 0x64, 0x69, 0x6e, 0x67,
	0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x66, 0x69, 0x6e, 0x64, 0x69, 0x6e, 0x67,
	0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74,
	0x22, 0x78, 0x0a, 0x08, 0x54, 0x6f, 0x6f, 0x6c, 0x43, 0x61, 0x6c, 0x6c, 0x12, 0x12, 0x0a, 0x04,
	0x74, 0x6f, 0x6f, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x6f, 0x6f, 0x6c,
	0x12, 0x10, 0x0a, 0x03, 0x63, 0x6d, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x63,
	0x6d, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x75,
	0x63, 0x63, 0x65, 0x73, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x73, 0x75, 0x63,
	0x63, 0x65, 0x73, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x22, 0xbd, 0x05, 0x0a, 0x1f, 0x47,
	0x65, 0x74, 0x52, 0x69, 0x73, 0x6b, 0x41, 0x73, 0x73, 0x65, 0x73, 0x73, 0x6d, 0x65, 0x6e, 0x74,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x23,
	0x0a, 0x0d, 0x61, 0x73, 0x73, 0x65, 0x73, 0x73, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x61, 0x73, 0x73, 0x65, 0x73, 0x73, 0x6d, 0x65, 0x6e,
	0x74, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x69,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72,
	0x49, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65,
	0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x37, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1f, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x76,
	0x31, 0x2e, 0x52, 0x69, 0x73, 0x6b, 0x41, 0x73, 0x73, 0x65, 0x73, 0x73, 0x6d, 0x65, 0x6e, 0x74,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x4d,
	0x0a, 0x0e, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x5f, 0x74, 0x68, 0x69, 0x6e, 0x6b, 0x69, 0x6e, 0x67,
	0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e,
	0x76, 0x31, 0x2e, 0x52, 0x69, 0x73, 0x6b, 0x41, 0x73, 0x73, 0x65, 0x73, 0x73, 0x6d, 0x65, 0x6e,
	0x74, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x54, 0x68, 0x69, 0x6e, 0x6b, 0x69, 0x6e, 0x67, 0x52, 0x0d,
	0x61, 0x67, 0x65, 0x6e, 0x74, 0x54, 0x68, 0x69, 0x6e, 0x6b, 0x69, 0x6e, 0x67, 0x12, 0x21, 0x0a,
	0x0c, 0x66, 0x69, 0x6e, 0x61, 0x6c, 0x5f, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0b, 0x66, 0x69, 0x6e, 0x61, 0x6c, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74,
	0x12, 0x23, 0x0a, 0x0d, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x4d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64,
	0x5f, 0x61, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x64, 0x41, 0x74, 0x12, 0x21, 0x0a, 0x0c, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65,
	0x64, 0x5f, 0x61, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x63, 0x6f, 0x6d, 0x70,
	0x6c, 0x65, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x25, 0x0a, 0x0e, 0x66, 0x69, 0x6e, 0x64, 0x69,
	0x6e, 0x67, 0x73, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x0d, 0x66, 0x69, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x73, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x25,
	0x0a, 0x0e, 0x73, 0x65, 0x76, 0x65, 0x72, 0x69, 0x74, 0x79, 0x5f, 0x73, 0x63, 0x6f, 0x72, 0x65,
	0x18, 0x0b, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0d, 0x73, 0x65, 0x76, 0x65, 0x72, 0x69, 0x74, 0x79,
	0x53, 0x63, 0x6f, 0x72, 0x65, 0x12, 0x2c, 0x0a, 0x12, 0x68, 0x69, 0x67, 0x68, 0x5f, 0x72, 0x69,
	0x73, 0x6b, 0x5f, 0x66, 0x69, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x73, 0x18, 0x0c, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x10, 0x68, 0x69, 0x67, 0x68, 0x52, 0x69, 0x73, 0x6b, 0x46, 0x69, 0x6e, 0x64, 0x69,
	0x6e, 0x67, 0x73, 0x12, 0x30, 0x0a, 0x14, 0x6d, 0x65, 0x64, 0x69, 0x75, 0x6d, 0x5f, 0x72, 0x69,
	0x73, 0x6b, 0x5f, 0x66, 0x69, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x73, 0x18, 0x0d, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x12, 0x6d, 0x65, 0x64, 0x69, 0x75, 0x6d, 0x52, 0x69, 0x73, 0x6b, 0x46, 0x69, 0x6e,
	0x64, 0x69, 0x6e, 0x67, 0x73, 0x12, 0x2a, 0x0a, 0x11, 0x6c, 0x6f, 0x77, 0x5f, 0x72, 0x69, 0x73,
	0x6b, 0x5f, 0x66, 0x69, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x73, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x0f, 0x6c, 0x6f, 0x77, 0x52, 0x69, 0x73, 0x6b, 0x46, 0x69, 0x6e, 0x64, 0x69, 0x6e, 0x67,
	0x73, 0x12, 0x47, 0x0a, 0x13, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x64, 0x5f,
	0x66, 0x69, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x73, 0x18, 0x0f, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x16,
	0x2e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x69, 0x73, 0x6b, 0x46,
	0x69, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x52, 0x12, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72,
	0x65, 0x64, 0x46, 0x69, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x73, 0x22, 0x77, 0x0a, 0x1a, 0x4c, 0x69,
	0x73, 0x74, 0x52, 0x69, 0x73, 0x6b, 0x41, 0x73, 0x73, 0x65, 0x73, 0x73, 0x6d, 0x65, 0x6e, 0x74,
	0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x6c, 0x75, 0x73,
	0x74, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x6c,
	0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x70, 0x61, 0x67, 0x65, 0x5f,
	0x73, 0x69, 0x7a, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x70, 0x61, 0x67, 0x65,
	0x53, 0x69, 0x7a, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x6f, 0x6b,
	0x65, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x61, 0x67, 0x65, 0x54, 0x6f,
	0x6b, 0x65, 0x6e, 0x22, 0xe4, 0x01, 0x0a, 0x0b, 0x52, 0x69, 0x73, 0x6b, 0x46, 0x69, 0x6e, 0x64,
	0x69, 0x6e, 0x67, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x02, 0x69, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73,
	0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b,
	0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1a, 0x0a, 0x08, 0x73,
	0x65, 0x76, 0x65, 0x72, 0x69, 0x74, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x73,
	0x65, 0x76, 0x65, 0x72, 0x69, 0x74, 0x79, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x61, 0x74, 0x65, 0x67,
	0x6f, 0x72, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x61, 0x74, 0x65, 0x67,
	0x6f, 0x72, 0x79, 0x12, 0x26, 0x0a, 0x0e, 0x72, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x64,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x72, 0x65, 0x63,
	0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2d, 0x0a, 0x12, 0x61,
	0x66, 0x66, 0x65, 0x63, 0x74, 0x65, 0x64, 0x5f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x09, 0x52, 0x11, 0x61, 0x66, 0x66, 0x65, 0x63, 0x74, 0x65,
	0x64, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x22, 0xe4, 0x04, 0x0a, 0x15, 0x52,
	0x69, 0x73, 0x6b, 0x41, 0x73, 0x73, 0x65, 0x73, 0x73, 0x6d, 0x65, 0x6e, 0x74, 0x53, 0x75, 0x6d,
	0x6d, 0x61, 0x72, 0x79, 0x12, 0x23, 0x0a, 0x0d, 0x61, 0x73, 0x73, 0x65, 0x73, 0x73, 0x6d, 0x65,
	0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x61, 0x73, 0x73,
	0x65, 0x73, 0x73, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x6c, 0x75,
	0x73, 0x74, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63,
	0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x63, 0x6c, 0x75, 0x73,
	0x74, 0x65, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b,
	0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x37, 0x0a, 0x06, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1f, 0x2e, 0x73, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x69, 0x73, 0x6b, 0x41, 0x73, 0x73, 0x65,
	0x73, 0x73, 0x6d, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x12, 0x21, 0x0a, 0x0c, 0x66, 0x69, 0x6e, 0x61, 0x6c, 0x5f, 0x72, 0x65,
	0x70, 0x6f, 0x72, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x66, 0x69, 0x6e, 0x61,
	0x6c, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x12, 0x23, 0x0a, 0x0d, 0x65, 0x72, 0x72, 0x6f, 0x72,
	0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c,
	0x65, 0x72, 0x72, 0x6f, 0x72, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x1d, 0x0a, 0x0a,
	0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x21, 0x0a, 0x0c, 0x63,
	0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x0b, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x25,
	0x0a, 0x0e, 0x66, 0x69, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x73, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x18, 0x09, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0d, 0x66, 0x69, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x73,
	0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x25, 0x0a, 0x0e, 0x73, 0x65, 0x76, 0x65, 0x72, 0x69, 0x74,
	0x79, 0x5f, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0d, 0x73,
	0x65, 0x76, 0x65, 0x72, 0x69, 0x74, 0x79, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x12, 0x2c, 0x0a, 0x12,
	0x68, 0x69, 0x67, 0x68, 0x5f, 0x72, 0x69, 0x73, 0x6b, 0x5f, 0x66, 0x69, 0x6e, 0x64, 0x69, 0x6e,
	0x67, 0x73, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x05, 0x52, 0x10, 0x68, 0x69, 0x67, 0x68, 0x52, 0x69,
	0x73, 0x6b, 0x46, 0x69, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x73, 0x12, 0x30, 0x0a, 0x14, 0x6d, 0x65,
	0x64, 0x69, 0x75, 0x6d, 0x5f, 0x72, 0x69, 0x73, 0x6b, 0x5f, 0x66, 0x69, 0x6e, 0x64, 0x69, 0x6e,
	0x67, 0x73, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x05, 0x52, 0x12, 0x6d, 0x65, 0x64, 0x69, 0x75, 0x6d,
	0x52, 0x69, 0x73, 0x6b, 0x46, 0x69, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x73, 0x12, 0x2a, 0x0a, 0x11,
	0x6c, 0x6f, 0x77, 0x5f, 0x72, 0x69, 0x73, 0x6b, 0x5f, 0x66, 0x69, 0x6e, 0x64, 0x69, 0x6e, 0x67,
	0x73, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0f, 0x6c, 0x6f, 0x77, 0x52, 0x69, 0x73, 0x6b,
	0x46, 0x69, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x73, 0x12, 0x47, 0x0a, 0x13, 0x73, 0x74, 0x72, 0x75,
	0x63, 0x74, 0x75, 0x72, 0x65, 0x64, 0x5f, 0x66, 0x69, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x73, 0x18,
	0x0e, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x76,
	0x31, 0x2e, 0x52, 0x69, 0x73, 0x6b, 0x46, 0x69, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x52, 0x12, 0x73,
	0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x64, 0x46, 0x69, 0x6e, 0x64, 0x69, 0x6e, 0x67,
	0x73, 0x22, 0xaa, 0x01, 0x0a, 0x1b, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x69, 0x73, 0x6b, 0x41, 0x73,
	0x73, 0x65, 0x73, 0x73, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x42, 0x0a, 0x0b, 0x61, 0x73, 0x73, 0x65, 0x73, 0x73, 0x6d, 0x65, 0x6e, 0x74, 0x73,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e,
	0x76, 0x31, 0x2e, 0x52, 0x69, 0x73, 0x6b, 0x41, 0x73, 0x73, 0x65, 0x73, 0x73, 0x6d, 0x65, 0x6e,
	0x74, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x52, 0x0b, 0x61, 0x73, 0x73, 0x65, 0x73, 0x73,
	0x6d, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x26, 0x0a, 0x0f, 0x6e, 0x65, 0x78, 0x74, 0x5f, 0x70, 0x61,
	0x67, 0x65, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d,
	0x6e, 0x65, 0x78, 0x74, 0x50, 0x61, 0x67, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x1f, 0x0a,
	0x0b, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x0a, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0x2f,
	0x0a, 0x1d, 0x47, 0x65, 0x74, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x22,
	0x63, 0x0a, 0x1e, 0x47, 0x65, 0x74, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x41, 0x0a, 0x06, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x29, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x75,
	0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x6f, 0x6c, 0x69, 0x63,
	0x79, 0x57, 0x69, 0x74, 0x68, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x52, 0x06, 0x70, 0x6f,
	0x6c, 0x69, 0x63, 0x79, 0x22, 0xc1, 0x01, 0x0a, 0x20, 0x4c, 0x69, 0x73, 0x74, 0x41, 0x75, 0x74,
	0x68, 0x6f, 0x72, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x69,
	0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x70, 0x61, 0x67,
	0x65, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x70, 0x61,
	0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x74,
	0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x61, 0x67, 0x65,
	0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72,
	0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x6c, 0x75, 0x73, 0x74,
	0x65, 0x72, 0x49, 0x64, 0x12, 0x42, 0x0a, 0x0d, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x5f, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1d, 0x2e, 0x73, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x52, 0x65,
	0x76, 0x69, 0x65, 0x77, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x0c, 0x72, 0x65, 0x76, 0x69,
	0x65, 0x77, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0xb3, 0x01, 0x0a, 0x21, 0x4c, 0x69, 0x73,
	0x74, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x6f,
	0x6c, 0x69, 0x63, 0x69, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x45,
	0x0a, 0x08, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x69, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x29, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x75, 0x74,
	0x68, 0x6f, 0x72, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79,
	0x57, 0x69, 0x74, 0x68, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x52, 0x08, 0x70, 0x6f, 0x6c,
	0x69, 0x63, 0x69, 0x65, 0x73, 0x12, 0x26, 0x0a, 0x0f, 0x6e, 0x65, 0x78, 0x74, 0x5f, 0x70, 0x61,
	0x67, 0x65, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d,
	0x6e, 0x65, 0x78, 0x74, 0x50, 0x61, 0x67, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x1f, 0x0a,
	0x0b, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x0a, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0xda,
	0x04, 0x0a, 0x1e, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x57, 0x69, 0x74, 0x68, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65,
	0x72, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69,
	0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x64,
	0x12, 0x21, 0x0a, 0x0c, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x4e,
	0x61, 0x6d, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63,
	0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x30, 0x0a, 0x14, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x5f,
	0x77, 0x6f, 0x72, 0x6b, 0x6c, 0x6f, 0x61, 0x64, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x12, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x57, 0x6f, 0x72, 0x6b, 0x6c,
	0x6f, 0x61, 0x64, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x30, 0x0a, 0x14, 0x74, 0x61, 0x72, 0x67, 0x65,
	0x74, 0x5f, 0x77, 0x6f, 0x72, 0x6b, 0x6c, 0x6f, 0x61, 0x64, 0x5f, 0x6b, 0x69, 0x6e, 0x64, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x57, 0x6f, 0x72,
	0x6b, 0x6c, 0x6f, 0x61, 0x64, 0x4b, 0x69, 0x6e, 0x64, 0x12, 0x24, 0x0a, 0x0e, 0x61, 0x6c, 0x6c,
	0x6f, 0x77, 0x5f, 0x61, 0x6c, 0x6c, 0x5f, 0x79, 0x61, 0x6d, 0x6c, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0c, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x41, 0x6c, 0x6c, 0x59, 0x61, 0x6d, 0x6c, 0x12,
	0x21, 0x0a, 0x0c, 0x74, 0x72, 0x69, 0x6d, 0x6d, 0x65, 0x64, 0x5f, 0x79, 0x61, 0x6d, 0x6c, 0x18,
	0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x74, 0x72, 0x69, 0x6d, 0x6d, 0x65, 0x64, 0x59, 0x61,
	0x6d, 0x6c, 0x12, 0x1d, 0x0a, 0x0a, 0x72, 0x69, 0x73, 0x6b, 0x5f, 0x73, 0x63, 0x6f, 0x72, 0x65,
	0x18, 0x0a, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x72, 0x69, 0x73, 0x6b, 0x53, 0x63, 0x6f, 0x72,
	0x65, 0x12, 0x25, 0x0a, 0x0e, 0x72, 0x69, 0x73, 0x6b, 0x5f, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x61, 0x6c, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x72, 0x69, 0x73, 0x6b, 0x52,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x65, 0x12, 0x27, 0x0a, 0x0f, 0x64, 0x65, 0x73, 0x74,
	0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x73, 0x18, 0x0c, 0x20, 0x03, 0x28,
	0x09, 0x52, 0x0e, 0x64, 0x65, 0x73, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65,
	0x73, 0x12, 0x58, 0x0a, 0x12, 0x73, 0x75, 0x73, 0x70, 0x69, 0x63, 0x69, 0x6f, 0x75, 0x73, 0x5f,
	0x6c, 0x37, 0x5f, 0x6c, 0x6f, 0x67, 0x73, 0x18, 0x0d, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2a, 0x2e,
	0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x75, 0x73, 0x70, 0x69, 0x63,
	0x69, 0x6f, 0x75, 0x73, 0x4c, 0x37, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x4c, 0x6f, 0x67, 0x57,
	0x69, 0x74, 0x68, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x52, 0x10, 0x73, 0x75, 0x73, 0x70, 0x69,
	0x63, 0x69, 0x6f, 0x75, 0x73, 0x4c, 0x37, 0x4c, 0x6f, 0x67, 0x73, 0x12, 0x3e, 0x0a, 0x0f, 0x61,
	0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x5f, 0x6c, 0x37, 0x5f, 0x6c, 0x6f, 0x67, 0x73, 0x18, 0x0e,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31,
	0x2e, 0x4c, 0x37, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x4c, 0x6f, 0x67, 0x52, 0x0d, 0x61, 0x6c,
	0x6c, 0x6f, 0x77, 0x65, 0x64, 0x4c, 0x37, 0x4c, 0x6f, 0x67, 0x73, 0x22, 0x78, 0x0a, 0x1f, 0x53,
	0x75, 0x73, 0x70, 0x69, 0x63, 0x69, 0x6f, 0x75, 0x73, 0x4c, 0x37, 0x41, 0x63, 0x63, 0x65, 0x73,
	0x73, 0x4c, 0x6f, 0x67, 0x57, 0x69, 0x74, 0x68, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x12, 0x3d,
	0x0a, 0x0e, 0x73, 0x75, 0x73, 0x70, 0x69, 0x63, 0x69, 0x6f, 0x75, 0x73, 0x5f, 0x6c, 0x6f, 0x67,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e,
	0x76, 0x31, 0x2e, 0x4c, 0x37, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x4c, 0x6f, 0x67, 0x52, 0x0d,
	0x73, 0x75, 0x73, 0x70, 0x69, 0x63, 0x69, 0x6f, 0x75, 0x73, 0x4c, 0x6f, 0x67, 0x12, 0x16, 0x0a,
	0x06, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72,
	0x65, 0x61, 0x73, 0x6f, 0x6e, 0x22, 0xc4, 0x03, 0x0a, 0x0b, 0x4c, 0x37, 0x41, 0x63, 0x63, 0x65,
	0x73, 0x73, 0x4c, 0x6f, 0x67, 0x12, 0x2d, 0x0a, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x76,
	0x31, 0x2e, 0x4c, 0x37, 0x45, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x52, 0x06, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x12, 0x37, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x73, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x37, 0x45, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74,
	0x52, 0x0b, 0x64, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1a, 0x0a,
	0x08, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x6c, 0x6c,
	0x6f, 0x77, 0x65, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x61, 0x6c, 0x6c, 0x6f,
	0x77, 0x65, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x39, 0x0a, 0x0a, 0x66, 0x69, 0x72,
	0x73, 0x74, 0x5f, 0x73, 0x65, 0x65, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x66, 0x69, 0x72, 0x73, 0x74,
	0x53, 0x65, 0x65, 0x6e, 0x12, 0x37, 0x0a, 0x09, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x73, 0x65, 0x65,
	0x6e, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x52, 0x08, 0x6c, 0x61, 0x73, 0x74, 0x53, 0x65, 0x65, 0x6e, 0x12, 0x30, 0x0a,
	0x09, 0x68, 0x74, 0x74, 0x70, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x13, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x48, 0x74, 0x74,
	0x70, 0x44, 0x61, 0x74, 0x61, 0x52, 0x08, 0x68, 0x74, 0x74, 0x70, 0x44, 0x61, 0x74, 0x61, 0x12,
	0x26, 0x0a, 0x0e, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x69, 0x66,
	0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x33, 0x0a, 0x15, 0x63, 0x6c, 0x61, 0x73, 0x73,
	0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e,
	0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x14, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x69, 0x66, 0x69,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x22, 0x89, 0x01, 0x0a,
	0x0a, 0x4c, 0x37, 0x45, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x6e,
	0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6b, 0x69, 0x6e,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6b, 0x69, 0x6e, 0x64, 0x12, 0x12, 0x0a,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x12, 0x21, 0x0a, 0x0c, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x4e, 0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x04, 0x70, 0x6f, 0x72, 0x74, 0x22, 0xc2, 0x01, 0x0a, 0x08, 0x48, 0x74, 0x74,
	0x70, 0x44, 0x61, 0x74, 0x61, 0x12, 0x16, 0x0a, 0x06, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x12, 0x12, 0x0a,
	0x04, 0x70, 0x61, 0x74, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x70, 0x61, 0x74,
	0x68, 0x12, 0x23, 0x0a, 0x0d, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x5f, 0x63, 0x6f,
	0x64, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x62, 0x79, 0x74, 0x65, 0x73, 0x5f,
	0x73, 0x65, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x62, 0x79, 0x74, 0x65,
	0x73, 0x53, 0x65, 0x6e, 0x74, 0x12, 0x25, 0x0a, 0x0e, 0x62, 0x79, 0x74, 0x65, 0x73, 0x5f, 0x72,
	0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0d, 0x62,
	0x79, 0x74, 0x65, 0x73, 0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x64, 0x12, 0x1f, 0x0a, 0x0b,
	0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6d, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x0a, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x73, 0x22, 0x37, 0x0a,
	0x25, 0x47, 0x65, 0x74, 0x45, 0x78, 0x69, 0x73, 0x74, 0x69, 0x6e, 0x67, 0x41, 0x75, 0x74, 0x68,
	0x6f, 0x72, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x22, 0x73, 0x0a, 0x26, 0x47, 0x65, 0x74, 0x45, 0x78, 0x69,
	0x73, 0x74, 0x69, 0x6e, 0x67, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x49, 0x0a, 0x06, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x31, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x78, 0x69,
	0x73, 0x74, 0x69, 0x6e, 0x67, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x57, 0x69, 0x74, 0x68, 0x43, 0x6c, 0x75, 0x73,
	0x74, 0x65, 0x72, 0x52, 0x06, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x22, 0x85, 0x01, 0x0a, 0x28,
	0x4c, 0x69, 0x73, 0x74, 0x45, 0x78, 0x69, 0x73, 0x74, 0x69, 0x6e, 0x67, 0x41, 0x75, 0x74, 0x68,
	0x6f, 0x72, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x69, 0x65,
	0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x70, 0x61, 0x67, 0x65,
	0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x70, 0x61, 0x67,
	0x65, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x6f,
	0x6b, 0x65, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x61, 0x67, 0x65, 0x54,
	0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x5f,
	0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65,
	0x72, 0x49, 0x64, 0x22, 0xc3, 0x01, 0x0a, 0x29, 0x4c, 0x69, 0x73, 0x74, 0x45, 0x78, 0x69, 0x73,
	0x74, 0x69, 0x6e, 0x67, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x69, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x4d, 0x0a, 0x08, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x69, 0x65, 0x73, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e,
	0x45, 0x78, 0x69, 0x73, 0x74, 0x69, 0x6e, 0x67, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x57, 0x69, 0x74, 0x68, 0x43,
	0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x52, 0x08, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x69, 0x65, 0x73,
	0x12, 0x26, 0x0a, 0x0f, 0x6e, 0x65, 0x78, 0x74, 0x5f, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x6f,
	0x6b, 0x65, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x6e, 0x65, 0x78, 0x74, 0x50,
	0x61, 0x67, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x1f, 0x0a, 0x0b, 0x74, 0x6f, 0x74, 0x61,
	0x6c, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x74,
	0x6f, 0x74, 0x61, 0x6c, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0xb6, 0x06, 0x0a, 0x26, 0x45, 0x78,
	0x69, 0x73, 0x74, 0x69, 0x6e, 0x67, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x57, 0x69, 0x74, 0x68, 0x43, 0x6c, 0x75,
	0x73, 0x74, 0x65, 0x72, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x02, 0x69, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x5f,
	0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65,
	0x72, 0x49, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x63, 0x6c, 0x75, 0x73, 0x74,
	0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70,
	0x61, 0x63, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73,
	0x70, 0x61, 0x63, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x30, 0x0a, 0x14, 0x74, 0x61, 0x72, 0x67,
	0x65, 0x74, 0x5f, 0x77, 0x6f, 0x72, 0x6b, 0x6c, 0x6f, 0x61, 0x64, 0x5f, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x57, 0x6f,
	0x72, 0x6b, 0x6c, 0x6f, 0x61, 0x64, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x30, 0x0a, 0x14, 0x74, 0x61,
	0x72, 0x67, 0x65, 0x74, 0x5f, 0x77, 0x6f, 0x72, 0x6b, 0x6c, 0x6f, 0x61, 0x64, 0x5f, 0x6b, 0x69,
	0x6e, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74,
	0x57, 0x6f, 0x72, 0x6b, 0x6c, 0x6f, 0x61, 0x64, 0x4b, 0x69, 0x6e, 0x64, 0x12, 0x12, 0x0a, 0x04,
	0x79, 0x61, 0x6d, 0x6c, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x79, 0x61, 0x6d, 0x6c,
	0x12, 0x28, 0x0a, 0x10, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x5f, 0x68, 0x69, 0x74, 0x5f, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0e, 0x70, 0x6f, 0x6c, 0x69,
	0x63, 0x79, 0x48, 0x69, 0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x69, 0x6e,
	0x67, 0x65, 0x73, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x0a, 0x69, 0x6e, 0x67, 0x65, 0x73, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x32, 0x0a, 0x15, 0x72,
	0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x65, 0x64, 0x5f, 0x70, 0x6f, 0x6c, 0x69, 0x63,
	0x79, 0x5f, 0x69, 0x64, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x13, 0x72, 0x65, 0x63, 0x6f,
	0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x65, 0x64, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x49, 0x64, 0x12,
	0x58, 0x0a, 0x12, 0x73, 0x75, 0x73, 0x70, 0x69, 0x63, 0x69, 0x6f, 0x75, 0x73, 0x5f, 0x6c, 0x37,
	0x5f, 0x6c, 0x6f, 0x67, 0x73, 0x18, 0x0c, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x73, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x75, 0x73, 0x70, 0x69, 0x63, 0x69, 0x6f,
	0x75, 0x73, 0x4c, 0x37, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x4c, 0x6f, 0x67, 0x57, 0x69, 0x74,
	0x68, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x52, 0x10, 0x73, 0x75, 0x73, 0x70, 0x69, 0x63, 0x69,
	0x6f, 0x75, 0x73, 0x4c, 0x37, 0x4c, 0x6f, 0x67, 0x73, 0x12, 0x3e, 0x0a, 0x0f, 0x61, 0x6c, 0x6c,
	0x6f, 0x77, 0x65, 0x64, 0x5f, 0x6c, 0x37, 0x5f, 0x6c, 0x6f, 0x67, 0x73, 0x18, 0x0d, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x16, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x4c,
	0x37, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x4c, 0x6f, 0x67, 0x52, 0x0d, 0x61, 0x6c, 0x6c, 0x6f,
	0x77, 0x65, 0x64, 0x4c, 0x37, 0x4c, 0x6f, 0x67, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x72, 0x65, 0x61,
	0x73, 0x6f, 0x6e, 0x73, 0x18, 0x0e, 0x20, 0x03, 0x28, 0x09, 0x52, 0x07, 0x72, 0x65, 0x61, 0x73,
	0x6f, 0x6e, 0x73, 0x12, 0x38, 0x0a, 0x18, 0x73, 0x75, 0x73, 0x70, 0x69, 0x63, 0x69, 0x6f, 0x75,
	0x73, 0x5f, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x5f, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x18,
	0x0f, 0x20, 0x01, 0x28, 0x02, 0x52, 0x16, 0x73, 0x75, 0x73, 0x70, 0x69, 0x63, 0x69, 0x6f, 0x75,
	0x73, 0x41, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x52, 0x61, 0x74, 0x69, 0x6f, 0x12, 0x34, 0x0a,
	0x16, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x5f, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x65,
	0x64, 0x5f, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x18, 0x10, 0x20, 0x01, 0x28, 0x02, 0x52, 0x14, 0x72,
	0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x41, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x52, 0x61,
	0x74, 0x69, 0x6f, 0x12, 0x31, 0x0a, 0x14, 0x65, 0x66, 0x66, 0x65, 0x63, 0x74, 0x69, 0x76, 0x65,
	0x6e, 0x65, 0x73, 0x73, 0x5f, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18, 0x11, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x13, 0x65, 0x66, 0x66, 0x65, 0x63, 0x74, 0x69, 0x76, 0x65, 0x6e, 0x65, 0x73, 0x73,
	0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x12, 0x3a, 0x0a, 0x19, 0x66, 0x69, 0x6e, 0x61, 0x6c, 0x5f,
	0x65, 0x66, 0x66, 0x65, 0x63, 0x74, 0x69, 0x76, 0x65, 0x6e, 0x65, 0x73, 0x73, 0x5f, 0x73, 0x63,
	0x6f, 0x72, 0x65, 0x18, 0x12, 0x20, 0x01, 0x28, 0x02, 0x52, 0x17, 0x66, 0x69, 0x6e, 0x61, 0x6c,
	0x45, 0x66, 0x66, 0x65, 0x63, 0x74, 0x69, 0x76, 0x65, 0x6e, 0x65, 0x73, 0x73, 0x53, 0x63, 0x6f,
	0x72, 0x65, 0x22, 0x9e, 0x05, 0x0a, 0x12, 0x4c, 0x37, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x4c,
	0x6f, 0x67, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x12, 0x23, 0x0a, 0x0d, 0x73, 0x72, 0x63,
	0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0c, 0x73, 0x72, 0x63, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x12, 0x19,
	0x0a, 0x08, 0x73, 0x72, 0x63, 0x5f, 0x6b, 0x69, 0x6e, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x73, 0x72, 0x63, 0x4b, 0x69, 0x6e, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x73, 0x72, 0x63,
	0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x73, 0x72, 0x63,
	0x4e, 0x61, 0x6d, 0x65, 0x12, 0x28, 0x0a, 0x10, 0x73, 0x72, 0x63, 0x5f, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e,
	0x73, 0x72, 0x63, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x23,
	0x0a, 0x0d, 0x64, 0x73, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x64, 0x73, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70,
	0x61, 0x63, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x64, 0x73, 0x74, 0x5f, 0x6b, 0x69, 0x6e, 0x64, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x64, 0x73, 0x74, 0x4b, 0x69, 0x6e, 0x64, 0x12, 0x19,
	0x0a, 0x08, 0x64, 0x73, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x64, 0x73, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x28, 0x0a, 0x10, 0x64, 0x73, 0x74,
	0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0e, 0x64, 0x73, 0x74, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x4e,
	0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x18,
	0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x12,
	0x1f, 0x0a, 0x0b, 0x6c, 0x37, 0x5f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x18, 0x0a,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x6c, 0x37, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c,
	0x12, 0x12, 0x0a, 0x04, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04,
	0x70, 0x6f, 0x72, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x18, 0x0c,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x12, 0x12, 0x0a, 0x04,
	0x70, 0x61, 0x74, 0x68, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x70, 0x61, 0x74, 0x68,
	0x12, 0x23, 0x0a, 0x0d, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x5f, 0x63, 0x6f, 0x64,
	0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64,
	0x18, 0x0f, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x12,
	0x14, 0x0a, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x10, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x66, 0x69, 0x72, 0x73, 0x74, 0x5f, 0x73,
	0x65, 0x65, 0x6e, 0x18, 0x11, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x66, 0x69, 0x72, 0x73, 0x74,
	0x53, 0x65, 0x65, 0x6e, 0x12, 0x1b, 0x0a, 0x09, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x73, 0x65, 0x65,
	0x6e, 0x18, 0x12, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x6c, 0x61, 0x73, 0x74, 0x53, 0x65, 0x65,
	0x6e, 0x12, 0x2a, 0x0a, 0x11, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x64, 0x75, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x5f, 0x6d, 0x73, 0x18, 0x13, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0f, 0x74, 0x6f,
	0x74, 0x61, 0x6c, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x73, 0x12, 0x1d, 0x0a,
	0x0a, 0x62, 0x79, 0x74, 0x65, 0x73, 0x5f, 0x73, 0x65, 0x6e, 0x74, 0x18, 0x14, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x09, 0x62, 0x79, 0x74, 0x65, 0x73, 0x53, 0x65, 0x6e, 0x74, 0x12, 0x25, 0x0a, 0x0e,
	0x62, 0x79, 0x74, 0x65, 0x73, 0x5f, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x64, 0x18, 0x15,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x0d, 0x62, 0x79, 0x74, 0x65, 0x73, 0x52, 0x65, 0x63, 0x65, 0x69,
	0x76, 0x65, 0x64, 0x22, 0xdf, 0x01, 0x0a, 0x1d, 0x49, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72,
	0x79, 0x4c, 0x37, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x4c, 0x6f, 0x67, 0x73, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3e, 0x0a, 0x0b, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x5f,
	0x6c, 0x6f, 0x67, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x73, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x37, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x4c,
	0x6f, 0x67, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x52, 0x0a, 0x61, 0x63, 0x63, 0x65, 0x73,
	0x73, 0x4c, 0x6f, 0x67, 0x73, 0x12, 0x19, 0x0a, 0x08, 0x68, 0x61, 0x73, 0x5f, 0x6d, 0x6f, 0x72,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x68, 0x61, 0x73, 0x4d, 0x6f, 0x72, 0x65,
	0x12, 0x26, 0x0a, 0x0f, 0x6e, 0x65, 0x78, 0x74, 0x5f, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x6f,
	0x6b, 0x65, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x6e, 0x65, 0x78, 0x74, 0x50,
	0x61, 0x67, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x25, 0x0a, 0x0e, 0x74, 0x6f, 0x74, 0x61,
	0x6c, 0x5f, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x65, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x0d, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x52, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x65, 0x64, 0x12,
	0x14, 0x0a, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05,
	0x6c, 0x69, 0x6d, 0x69, 0x74, 0x22, 0xb2, 0x01, 0x0a, 0x31, 0x47, 0x65, 0x74, 0x49, 0x6e, 0x64,
	0x69, 0x76, 0x69, 0x64, 0x75, 0x61, 0x6c, 0x4c, 0x37, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x4c,
	0x6f, 0x67, 0x73, 0x42, 0x65, 0x74, 0x77, 0x65, 0x65, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70,
	0x61, 0x63, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x63,
	0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x09, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x64, 0x12, 0x23, 0x0a, 0x0d, 0x73, 0x72,
	0x63, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0c, 0x73, 0x72, 0x63, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x12,
	0x23, 0x0a, 0x0d, 0x64, 0x73, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x64, 0x73, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x73,
	0x70, 0x61, 0x63, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x22, 0xde, 0x01, 0x0a, 0x32, 0x47,
	0x65, 0x74, 0x49, 0x6e, 0x64, 0x69, 0x76, 0x69, 0x64, 0x75, 0x61, 0x6c, 0x4c, 0x37, 0x41, 0x63,
	0x63, 0x65, 0x73, 0x73, 0x4c, 0x6f, 0x67, 0x73, 0x42, 0x65, 0x74, 0x77, 0x65, 0x65, 0x6e, 0x4e,
	0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x3e, 0x0a, 0x0b, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x5f, 0x6c, 0x6f, 0x67, 0x73,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e,
	0x76, 0x31, 0x2e, 0x4c, 0x37, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x4c, 0x6f, 0x67, 0x53, 0x75,
	0x6d, 0x6d, 0x61, 0x72, 0x79, 0x52, 0x0a, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x4c, 0x6f, 0x67,
	0x73, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x18, 0x0a,
	0x07, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x66, 0x72, 0x6f, 0x6d, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x66, 0x72, 0x6f, 0x6d, 0x12, 0x0e, 0x0a, 0x02, 0x74,
	0x6f, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x74, 0x6f, 0x22, 0x79, 0x0a, 0x1f, 0x47,
	0x65, 0x74, 0x49, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x4c, 0x37, 0x41, 0x63, 0x63,
	0x65, 0x73, 0x73, 0x4c, 0x6f, 0x67, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x21,
	0x0a, 0x0c, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x49,
	0x64, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x61, 0x67, 0x65, 0x5f,
	0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x61, 0x67,
	0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x22, 0xe2, 0x01, 0x0a, 0x20, 0x47, 0x65, 0x74, 0x49, 0x6e,
	0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x4c, 0x37, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x4c,
	0x6f, 0x67, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3e, 0x0a, 0x0b, 0x61,
	0x63, 0x63, 0x65, 0x73, 0x73, 0x5f, 0x6c, 0x6f, 0x67, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x1d, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x37, 0x41,
	0x63, 0x63, 0x65, 0x73, 0x73, 0x4c, 0x6f, 0x67, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x52,
	0x0a, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x4c, 0x6f, 0x67, 0x73, 0x12, 0x19, 0x0a, 0x08, 0x68,
	0x61, 0x73, 0x5f, 0x6d, 0x6f, 0x72, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x68,
	0x61, 0x73, 0x4d, 0x6f, 0x72, 0x65, 0x12, 0x26, 0x0a, 0x0f, 0x6e, 0x65, 0x78, 0x74, 0x5f, 0x70,
	0x61, 0x67, 0x65, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0d, 0x6e, 0x65, 0x78, 0x74, 0x50, 0x61, 0x67, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x25,
	0x0a, 0x0e, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x65, 0x64,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0d, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x52, 0x65, 0x74,
	0x75, 0x72, 0x6e, 0x65, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x22, 0x7e, 0x0a, 0x26, 0x47,
	0x65, 0x74, 0x49, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x43, 0x6c, 0x75, 0x73, 0x74,
	0x65, 0x72, 0x4c, 0x37, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x4c, 0x6f, 0x67, 0x73, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72,
	0x5f, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x63, 0x6c, 0x75, 0x73,
	0x74, 0x65, 0x72, 0x55, 0x69, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x1d, 0x0a, 0x0a,
	0x70, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x70, 0x61, 0x67, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x22, 0xe9, 0x01, 0x0a, 0x27,
	0x47, 0x65, 0x74, 0x49, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x43, 0x6c, 0x75, 0x73,
	0x74, 0x65, 0x72, 0x4c, 0x37, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x4c, 0x6f, 0x67, 0x73, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3e, 0x0a, 0x0b, 0x61, 0x63, 0x63, 0x65, 0x73,
	0x73, 0x5f, 0x6c, 0x6f, 0x67, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x73,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x37, 0x41, 0x63, 0x63, 0x65, 0x73,
	0x73, 0x4c, 0x6f, 0x67, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x52, 0x0a, 0x61, 0x63, 0x63,
	0x65, 0x73, 0x73, 0x4c, 0x6f, 0x67, 0x73, 0x12, 0x19, 0x0a, 0x08, 0x68, 0x61, 0x73, 0x5f, 0x6d,
	0x6f, 0x72, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x68, 0x61, 0x73, 0x4d, 0x6f,
	0x72, 0x65, 0x12, 0x26, 0x0a, 0x0f, 0x6e, 0x65, 0x78, 0x74, 0x5f, 0x70, 0x61, 0x67, 0x65, 0x5f,
	0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x6e, 0x65, 0x78,
	0x74, 0x50, 0x61, 0x67, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x25, 0x0a, 0x0e, 0x74, 0x6f,
	0x74, 0x61, 0x6c, 0x5f, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x65, 0x64, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x0d, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x52, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x65,
	0x64, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x2a, 0xa2, 0x01, 0x0a, 0x12, 0x50, 0x6f, 0x6c, 0x69,
	0x63, 0x79, 0x52, 0x65, 0x76, 0x69, 0x65, 0x77, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x24,
	0x0a, 0x20, 0x50, 0x4f, 0x4c, 0x49, 0x43, 0x59, 0x5f, 0x52, 0x45, 0x56, 0x49, 0x45, 0x57, 0x5f,
	0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49,
	0x45, 0x44, 0x10, 0x00, 0x12, 0x20, 0x0a, 0x1c, 0x50, 0x4f, 0x4c, 0x49, 0x43, 0x59, 0x5f, 0x52,
	0x45, 0x56, 0x49, 0x45, 0x57, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x50, 0x45, 0x4e,
	0x44, 0x49, 0x4e, 0x47, 0x10, 0x01, 0x12, 0x21, 0x0a, 0x1d, 0x50, 0x4f, 0x4c, 0x49, 0x43, 0x59,
	0x5f, 0x52, 0x45, 0x56, 0x49, 0x45, 0x57, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x41,
	0x50, 0x50, 0x52, 0x4f, 0x56, 0x45, 0x44, 0x10, 0x02, 0x12, 0x21, 0x0a, 0x1d, 0x50, 0x4f, 0x4c,
	0x49, 0x43, 0x59, 0x5f, 0x52, 0x45, 0x56, 0x49, 0x45, 0x57, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55,
	0x53, 0x5f, 0x52, 0x45, 0x4a, 0x45, 0x43, 0x54, 0x45, 0x44, 0x10, 0x03, 0x2a, 0xcf, 0x01, 0x0a,
	0x14, 0x52, 0x69, 0x73, 0x6b, 0x41, 0x73, 0x73, 0x65, 0x73, 0x73, 0x6d, 0x65, 0x6e, 0x74, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x26, 0x0a, 0x22, 0x52, 0x49, 0x53, 0x4b, 0x5f, 0x41, 0x53,
	0x53, 0x45, 0x53, 0x53, 0x4d, 0x45, 0x4e, 0x54, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f,
	0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x22, 0x0a,
	0x1e, 0x52, 0x49, 0x53, 0x4b, 0x5f, 0x41, 0x53, 0x53, 0x45, 0x53, 0x53, 0x4d, 0x45, 0x4e, 0x54,
	0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x50, 0x45, 0x4e, 0x44, 0x49, 0x4e, 0x47, 0x10,
	0x01, 0x12, 0x22, 0x0a, 0x1e, 0x52, 0x49, 0x53, 0x4b, 0x5f, 0x41, 0x53, 0x53, 0x45, 0x53, 0x53,
	0x4d, 0x45, 0x4e, 0x54, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x52, 0x55, 0x4e, 0x4e,
	0x49, 0x4e, 0x47, 0x10, 0x02, 0x12, 0x24, 0x0a, 0x20, 0x52, 0x49, 0x53, 0x4b, 0x5f, 0x41, 0x53,
	0x53, 0x45, 0x53, 0x53, 0x4d, 0x45, 0x4e, 0x54, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f,
	0x43, 0x4f, 0x4d, 0x50, 0x4c, 0x45, 0x54, 0x45, 0x44, 0x10, 0x03, 0x12, 0x21, 0x0a, 0x1d, 0x52,
	0x49, 0x53, 0x4b, 0x5f, 0x41, 0x53, 0x53, 0x45, 0x53, 0x53, 0x4d, 0x45, 0x4e, 0x54, 0x5f, 0x53,
	0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x46, 0x41, 0x49, 0x4c, 0x45, 0x44, 0x10, 0x04, 0x2a, 0xa1,
	0x03, 0x0a, 0x17, 0x52, 0x69, 0x73, 0x6b, 0x41, 0x73, 0x73, 0x65, 0x73, 0x73, 0x6d, 0x65, 0x6e,
	0x74, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x2a, 0x0a, 0x26, 0x52, 0x49,
	0x53, 0x4b, 0x5f, 0x41, 0x53, 0x53, 0x45, 0x53, 0x53, 0x4d, 0x45, 0x4e, 0x54, 0x5f, 0x41, 0x47,
	0x45, 0x4e, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49,
	0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x2b, 0x0a, 0x27, 0x52, 0x49, 0x53, 0x4b, 0x5f, 0x41,
	0x53, 0x53, 0x45, 0x53, 0x53, 0x4d, 0x45, 0x4e, 0x54, 0x5f, 0x41, 0x47, 0x45, 0x4e, 0x54, 0x5f,
	0x54, 0x59, 0x50, 0x45, 0x5f, 0x4f, 0x52, 0x43, 0x48, 0x45, 0x53, 0x54, 0x52, 0x41, 0x54, 0x4f,
	0x52, 0x10, 0x01, 0x12, 0x2d, 0x0a, 0x29, 0x52, 0x49, 0x53, 0x4b, 0x5f, 0x41, 0x53, 0x53, 0x45,
	0x53, 0x53, 0x4d, 0x45, 0x4e, 0x54, 0x5f, 0x41, 0x47, 0x45, 0x4e, 0x54, 0x5f, 0x54, 0x59, 0x50,
	0x45, 0x5f, 0x4e, 0x45, 0x54, 0x57, 0x4f, 0x52, 0x4b, 0x5f, 0x50, 0x4f, 0x4c, 0x49, 0x43, 0x59,
	0x10, 0x02, 0x12, 0x33, 0x0a, 0x2f, 0x52, 0x49, 0x53, 0x4b, 0x5f, 0x41, 0x53, 0x53, 0x45, 0x53,
	0x53, 0x4d, 0x45, 0x4e, 0x54, 0x5f, 0x41, 0x47, 0x45, 0x4e, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45,
	0x5f, 0x50, 0x52, 0x49, 0x56, 0x49, 0x4c, 0x45, 0x47, 0x45, 0x5f, 0x45, 0x53, 0x43, 0x41, 0x4c,
	0x41, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x03, 0x12, 0x23, 0x0a, 0x1f, 0x52, 0x49, 0x53, 0x4b, 0x5f,
	0x41, 0x53, 0x53, 0x45, 0x53, 0x53, 0x4d, 0x45, 0x4e, 0x54, 0x5f, 0x41, 0x47, 0x45, 0x4e, 0x54,
	0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x52, 0x42, 0x41, 0x43, 0x10, 0x04, 0x12, 0x37, 0x0a, 0x33,
	0x52, 0x49, 0x53, 0x4b, 0x5f, 0x41, 0x53, 0x53, 0x45, 0x53, 0x53, 0x4d, 0x45, 0x4e, 0x54, 0x5f,
	0x41, 0x47, 0x45, 0x4e, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x43, 0x4f, 0x4e, 0x54, 0x41,
	0x49, 0x4e, 0x45, 0x52, 0x5f, 0x49, 0x4d, 0x41, 0x47, 0x45, 0x5f, 0x53, 0x45, 0x43, 0x55, 0x52,
	0x49, 0x54, 0x59, 0x10, 0x05, 0x12, 0x3a, 0x0a, 0x36, 0x52, 0x49, 0x53, 0x4b, 0x5f, 0x41, 0x53,
	0x53, 0x45, 0x53, 0x53, 0x4d, 0x45, 0x4e, 0x54, 0x5f, 0x41, 0x47, 0x45, 0x4e, 0x54, 0x5f, 0x54,
	0x59, 0x50, 0x45, 0x5f, 0x55, 0x4e, 0x52, 0x45, 0x53, 0x54, 0x52, 0x49, 0x43, 0x54, 0x45, 0x44,
	0x5f, 0x52, 0x45, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x5f, 0x55, 0x53, 0x41, 0x47, 0x45, 0x10,
	0x06, 0x12, 0x2f, 0x0a, 0x2b, 0x52, 0x49, 0x53, 0x4b, 0x5f, 0x41, 0x53, 0x53, 0x45, 0x53, 0x53,
	0x4d, 0x45, 0x4e, 0x54, 0x5f, 0x41, 0x47, 0x45, 0x4e, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f,
	0x53, 0x54, 0x4f, 0x52, 0x41, 0x47, 0x45, 0x5f, 0x53, 0x45, 0x43, 0x55, 0x52, 0x49, 0x54, 0x59,
	0x10, 0x07, 0x32, 0x8b, 0x2e, 0x0a, 0x13, 0x41, 0x75, 0x74, 0x6f, 0x6e, 0x70, 0x53, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x55, 0x0a, 0x0e, 0x4f, 0x6e,
	0x62, 0x6f, 0x61, 0x72, 0x64, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x12, 0x20, 0x2e, 0x73,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x4f, 0x6e, 0x62, 0x6f, 0x61, 0x72, 0x64,
	0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x21,
	0x2e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x4f, 0x6e, 0x62, 0x6f, 0x61,
	0x72, 0x64, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x5e, 0x0a, 0x11, 0x52, 0x65, 0x6e, 0x65, 0x77, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65,
	0x72, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x23, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e,
	0x76, 0x31, 0x2e, 0x52, 0x65, 0x6e, 0x65, 0x77, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x54,
	0x6f, 0x6b, 0x65, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x24, 0x2e, 0x73, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x6e, 0x65, 0x77, 0x43, 0x6c, 0x75,
	0x73, 0x74, 0x65, 0x72, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x5b, 0x0a, 0x10, 0x47, 0x65, 0x74, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x50,
	0x6f, 0x6c, 0x69, 0x63, 0x79, 0x12, 0x22, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x76,
	0x31, 0x2e, 0x47, 0x65, 0x74, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x50, 0x6f, 0x6c, 0x69,
	0x63, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x23, 0x2e, 0x73, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b,
	0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x73,
	0x0a, 0x18, 0x47, 0x65, 0x74, 0x45, 0x78, 0x69, 0x73, 0x74, 0x69, 0x6e, 0x67, 0x4e, 0x65, 0x74,
	0x77, 0x6f, 0x72, 0x6b, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x12, 0x2a, 0x2e, 0x73, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x45, 0x78, 0x69, 0x73, 0x74, 0x69,
	0x6e, 0x67, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2b, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e,
	0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x45, 0x78, 0x69, 0x73, 0x74, 0x69, 0x6e, 0x67, 0x4e, 0x65,
	0x74, 0x77, 0x6f, 0x72, 0x6b, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x64, 0x0a, 0x13, 0x4c, 0x69, 0x73, 0x74, 0x4e, 0x65, 0x74, 0x77, 0x6f,
	0x72, 0x6b, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x69, 0x65, 0x73, 0x12, 0x25, 0x2e, 0x73, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x4e, 0x65, 0x74, 0x77, 0x6f,
	0x72, 0x6b, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x69, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x26, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69,
	0x73, 0x74, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x69, 0x65,
	0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x7c, 0x0a, 0x1b, 0x4c, 0x69, 0x73,
	0x74, 0x45, 0x78, 0x69, 0x73, 0x74, 0x69, 0x6e, 0x67, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b,
	0x50, 0x6f, 0x6c, 0x69, 0x63, 0x69, 0x65, 0x73, 0x12, 0x2d, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x45, 0x78, 0x69, 0x73, 0x74, 0x69, 0x6e,
	0x67, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x69, 0x65, 0x73,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2e, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x45, 0x78, 0x69, 0x73, 0x74, 0x69, 0x6e, 0x67,
	0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x69, 0x65, 0x73, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x6d, 0x0a, 0x16, 0x47, 0x65, 0x74, 0x41, 0x75,
	0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x6f, 0x6c, 0x69, 0x63,
	0x79, 0x12, 0x28, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65,
	0x74, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x6f,
	0x6c, 0x69, 0x63, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x29, 0x2e, 0x73, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x41, 0x75, 0x74, 0x68, 0x6f,
	0x72, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x85, 0x01, 0x0a, 0x1e, 0x47, 0x65, 0x74, 0x45, 0x78,
	0x69, 0x73, 0x74, 0x69, 0x6e, 0x67, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x12, 0x30, 0x2e, 0x73, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x45, 0x78, 0x69, 0x73, 0x74, 0x69, 0x6e,
	0x67, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x6f,
	0x6c, 0x69, 0x63, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x31, 0x2e, 0x73, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x45, 0x78, 0x69, 0x73, 0x74,
	0x69, 0x6e, 0x67, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x76,
	0x0a, 0x19, 0x4c, 0x69, 0x73, 0x74, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x69, 0x65, 0x73, 0x12, 0x2b, 0x2e, 0x73, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x41, 0x75, 0x74, 0x68,
	0x6f, 0x72, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x69, 0x65,
	0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2c, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69,
	0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x69, 0x65, 0x73, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x8e, 0x01, 0x0a, 0x21, 0x4c, 0x69, 0x73, 0x74, 0x45,
	0x78, 0x69, 0x73, 0x74, 0x69, 0x6e, 0x67, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x69, 0x65, 0x73, 0x12, 0x33, 0x2e, 0x73,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x45, 0x78, 0x69,
	0x73, 0x74, 0x69, 0x6e, 0x67, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x69, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x34, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69,
	0x73, 0x74, 0x45, 0x78, 0x69, 0x73, 0x74, 0x69, 0x6e, 0x67, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72,
	0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x69, 0x65, 0x73, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4f, 0x0a, 0x0c, 0x4c, 0x69, 0x73, 0x74, 0x43,
	0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x73, 0x12, 0x1e, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x73,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1f, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x73,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x43, 0x0a, 0x08, 0x52, 0x65, 0x67, 0x69,
	0x73, 0x74, 0x65, 0x72, 0x12, 0x1a, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31,
	0x2e, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x1b, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x67,
	0x69, 0x73, 0x74, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3a, 0x0a,
	0x05, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x12, 0x17, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e,
	0x76, 0x31, 0x2e, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x18, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x6f, 0x67, 0x69,
	0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3d, 0x0a, 0x06, 0x4c, 0x6f, 0x67,
	0x6f, 0x75, 0x74, 0x12, 0x18, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e,
	0x4c, 0x6f, 0x67, 0x6f, 0x75, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x19, 0x2e,
	0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x6f, 0x67, 0x6f, 0x75, 0x74,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x58, 0x0a, 0x0f, 0x56, 0x61, 0x6c, 0x69,
	0x64, 0x61, 0x74, 0x65, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x21, 0x2e, 0x73, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65,
	0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x22,
	0x2e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x56, 0x61, 0x6c, 0x69, 0x64,
	0x61, 0x74, 0x65, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x55, 0x0a, 0x0e, 0x52, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x53, 0x65, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x12, 0x20, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31,
	0x2e, 0x52, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x21, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e,
	0x76, 0x31, 0x2e, 0x52, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4f, 0x0a, 0x0c, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x54, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x12, 0x1e, 0x2e, 0x73, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x65, 0x6e, 0x61,
	0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1f, 0x2e, 0x73, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x65, 0x6e, 0x61,
	0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x46, 0x0a, 0x09, 0x47, 0x65,
	0x74, 0x54, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x12, 0x1b, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x54, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x1c, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31,
	0x2e, 0x47, 0x65, 0x74, 0x54, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x4f, 0x0a, 0x0c, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x65, 0x6e, 0x61,
	0x6e, 0x74, 0x12, 0x1e, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x1f, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x5b, 0x0a, 0x10, 0x4c, 0x69, 0x6e, 0x6b, 0x55, 0x73, 0x65, 0x72, 0x54,
	0x6f, 0x54, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x12, 0x22, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x6e, 0x6b, 0x55, 0x73, 0x65, 0x72, 0x54, 0x6f, 0x54, 0x65,
	0x6e, 0x61, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x23, 0x2e, 0x73, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x6e, 0x6b, 0x55, 0x73, 0x65, 0x72,
	0x54, 0x6f, 0x54, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x70, 0x0a, 0x17, 0x47, 0x65, 0x74, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x43, 0x6f, 0x75,
	0x6e, 0x74, 0x46, 0x6f, 0x72, 0x54, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x12, 0x29, 0x2e, 0x73, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x50, 0x6f, 0x6c, 0x69, 0x63,
	0x79, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x46, 0x6f, 0x72, 0x54, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2a, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e,
	0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x43, 0x6f, 0x75, 0x6e,
	0x74, 0x46, 0x6f, 0x72, 0x54, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x6a, 0x0a, 0x15, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x43, 0x6f, 0x75,
	0x6e, 0x74, 0x46, 0x6f, 0x72, 0x54, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x12, 0x27, 0x2e, 0x73, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x43,
	0x6f, 0x75, 0x6e, 0x74, 0x46, 0x6f, 0x72, 0x54, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x28, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31,
	0x2e, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x46, 0x6f, 0x72,
	0x54, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x58,
	0x0a, 0x0f, 0x47, 0x65, 0x74, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74,
	0x73, 0x12, 0x21, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65,
	0x74, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x73, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x22, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31,
	0x2e, 0x47, 0x65, 0x74, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x73,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x79, 0x0a, 0x1a, 0x47, 0x65, 0x74, 0x52,
	0x65, 0x63, 0x65, 0x6e, 0x74, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x69, 0x65, 0x73, 0x46, 0x6f, 0x72,
	0x54, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x12, 0x2c, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e,
	0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x52, 0x65, 0x63, 0x65, 0x6e, 0x74, 0x50, 0x6f, 0x6c, 0x69,
	0x63, 0x69, 0x65, 0x73, 0x46, 0x6f, 0x72, 0x54, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x2d, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31,
	0x2e, 0x47, 0x65, 0x74, 0x52, 0x65, 0x63, 0x65, 0x6e, 0x74, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x69,
	0x65, 0x73, 0x46, 0x6f, 0x72, 0x54, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0xa0, 0x01, 0x0a, 0x27, 0x47, 0x65, 0x74, 0x52, 0x65, 0x63, 0x65, 0x6e,
	0x74, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x6f,
	0x6c, 0x69, 0x63, 0x69, 0x65, 0x73, 0x46, 0x6f, 0x72, 0x54, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x12,
	0x39, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x52,
	0x65, 0x63, 0x65, 0x6e, 0x74, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x69, 0x65, 0x73, 0x46, 0x6f, 0x72, 0x54, 0x65, 0x6e,
	0x61, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x3a, 0x2e, 0x73, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x52, 0x65, 0x63, 0x65, 0x6e, 0x74,
	0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x6f, 0x6c,
	0x69, 0x63, 0x69, 0x65, 0x73, 0x46, 0x6f, 0x72, 0x54, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x79, 0x0a, 0x1a, 0x47, 0x65, 0x74, 0x52, 0x65, 0x63,
	0x65, 0x6e, 0x74, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x73, 0x46, 0x6f, 0x72, 0x54, 0x65,
	0x6e, 0x61, 0x6e, 0x74, 0x12, 0x2c, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31,
	0x2e, 0x47, 0x65, 0x74, 0x52, 0x65, 0x63, 0x65, 0x6e, 0x74, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65,
	0x72, 0x73, 0x46, 0x6f, 0x72, 0x54, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x2d, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x47,
	0x65, 0x74, 0x52, 0x65, 0x63, 0x65, 0x6e, 0x74, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x73,
	0x46, 0x6f, 0x72, 0x54, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x70, 0x0a, 0x17, 0x47, 0x65, 0x74, 0x52, 0x65, 0x63, 0x65, 0x6e, 0x74, 0x55, 0x73,
	0x65, 0x72, 0x73, 0x46, 0x6f, 0x72, 0x54, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x12, 0x29, 0x2e, 0x73,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x52, 0x65, 0x63, 0x65,
	0x6e, 0x74, 0x55, 0x73, 0x65, 0x72, 0x73, 0x46, 0x6f, 0x72, 0x54, 0x65, 0x6e, 0x61, 0x6e, 0x74,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2a, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x52, 0x65, 0x63, 0x65, 0x6e, 0x74, 0x55, 0x73, 0x65,
	0x72, 0x73, 0x46, 0x6f, 0x72, 0x54, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x58, 0x0a, 0x0f, 0x4f, 0x66, 0x66, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x43,
	0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x12, 0x21, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e,
	0x76, 0x31, 0x2e, 0x4f, 0x66, 0x66, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x43, 0x6c, 0x75, 0x73, 0x74,
	0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x22, 0x2e, 0x73, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x4f, 0x66, 0x66, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x43, 0x6c,
	0x75, 0x73, 0x74, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x67, 0x0a,
	0x14, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x53, 0x75, 0x6d, 0x6d,
	0x61, 0x72, 0x69, 0x65, 0x73, 0x12, 0x26, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x76,
	0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x53, 0x75, 0x6d,
	0x6d, 0x61, 0x72, 0x69, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x27, 0x2e,
	0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x6c,
	0x75, 0x73, 0x74, 0x65, 0x72, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x69, 0x65, 0x73, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x55, 0x0a, 0x0e, 0x47, 0x65, 0x74, 0x43, 0x75, 0x72,
	0x72, 0x65, 0x6e, 0x74, 0x55, 0x73, 0x65, 0x72, 0x12, 0x20, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x55,
	0x73, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x21, 0x2e, 0x73, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e,
	0x74, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x5e, 0x0a,
	0x11, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x55, 0x73, 0x65, 0x72, 0x50, 0x72, 0x6f, 0x66, 0x69,
	0x6c, 0x65, 0x12, 0x23, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x55, 0x73, 0x65, 0x72, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x24, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x2e, 0x76, 0x31, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x55, 0x73, 0x65, 0x72, 0x50, 0x72,
	0x6f, 0x66, 0x69, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x55, 0x0a,
	0x0e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x55, 0x73, 0x65, 0x72, 0x52, 0x6f, 0x6c, 0x65, 0x12,
	0x20, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x55, 0x73, 0x65, 0x72, 0x52, 0x6f, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x21, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x55, 0x73, 0x65, 0x72, 0x52, 0x6f, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x58, 0x0a, 0x0f, 0x4c, 0x69, 0x73, 0x74, 0x54, 0x65, 0x6e, 0x61,
	0x6e, 0x74, 0x55, 0x73, 0x65, 0x72, 0x73, 0x12, 0x21, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x54, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x55, 0x73,
	0x65, 0x72, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x22, 0x2e, 0x73, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x54, 0x65, 0x6e, 0x61, 0x6e,
	0x74, 0x55, 0x73, 0x65, 0x72, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x49,
	0x0a, 0x0a, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x55, 0x73, 0x65, 0x72, 0x12, 0x1c, 0x2e, 0x73,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x55,
	0x73, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1d, 0x2e, 0x73, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x55, 0x73, 0x65,
	0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x5e, 0x0a, 0x11, 0x52, 0x65, 0x6d,
	0x6f, 0x76, 0x65, 0x55, 0x73, 0x65, 0x72, 0x46, 0x72, 0x6f, 0x6d, 0x4f, 0x72, 0x67, 0x12, 0x23,
	0x2e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x6d, 0x6f, 0x76,
	0x65, 0x55, 0x73, 0x65, 0x72, 0x46, 0x72, 0x6f, 0x6d, 0x4f, 0x72, 0x67, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x24, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e,
	0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x55, 0x73, 0x65, 0x72, 0x46, 0x72, 0x6f, 0x6d, 0x4f, 0x72,
	0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x58, 0x0a, 0x0f, 0x4c, 0x69, 0x73,
	0x74, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x21, 0x2e, 0x73,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x49, 0x6e, 0x76,
	0x69, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x22, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74,
	0x49, 0x6e, 0x76, 0x69, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x5b, 0x0a, 0x10, 0x52, 0x65, 0x76, 0x6f, 0x6b, 0x65, 0x49, 0x6e, 0x76,
	0x69, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x22, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x76, 0x6f, 0x6b, 0x65, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x23, 0x2e, 0x73, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x76, 0x6f, 0x6b, 0x65, 0x49, 0x6e,
	0x76, 0x69, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x5b, 0x0a, 0x10, 0x4c, 0x69, 0x73, 0x74, 0x4d, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70,
	0x61, 0x63, 0x65, 0x73, 0x12, 0x22, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31,
	0x2e, 0x4c, 0x69, 0x73, 0x74, 0x4d, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65,
	0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x23, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x4d, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x73,
	0x70, 0x61, 0x63, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x67, 0x0a,
	0x14, 0x41, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65,
	0x4f, 0x77, 0x6e, 0x65, 0x72, 0x12, 0x26, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x76,
	0x31, 0x2e, 0x41, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63,
	0x65, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x27, 0x2e,
	0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x73, 0x73, 0x69, 0x67, 0x6e,
	0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x67, 0x0a, 0x14, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65,
	0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x12, 0x26,
	0x2e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x6d, 0x6f, 0x76,
	0x65, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x27, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e,
	0x76, 0x31, 0x2e, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61,
	0x63, 0x65, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x61, 0x0a, 0x12, 0x47, 0x65, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x4f,
	0x77, 0x6e, 0x65, 0x72, 0x73, 0x12, 0x24, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x76,
	0x31, 0x2e, 0x47, 0x65, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x4f, 0x77,
	0x6e, 0x65, 0x72, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x25, 0x2e, 0x73, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x73,
	0x70, 0x61, 0x63, 0x65, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x76, 0x0a, 0x19, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x4e, 0x61, 0x6d,
	0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x73, 0x68, 0x69, 0x70, 0x12,
	0x2b, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x4f, 0x77, 0x6e, 0x65,
	0x72, 0x73, 0x68, 0x69, 0x70, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2c, 0x2e, 0x73,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x73, 0x68,
	0x69, 0x70, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x85, 0x01, 0x0a, 0x1e, 0x4c,
	0x69, 0x73, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x4f, 0x77, 0x6e, 0x65,
	0x72, 0x73, 0x68, 0x69, 0x70, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x73, 0x12, 0x30, 0x2e,
	0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x4e, 0x61,
	0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x73, 0x68, 0x69, 0x70,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x31, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74,
	0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x73, 0x68,
	0x69, 0x70, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x70, 0x0a, 0x17, 0x41, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x65, 0x4f, 0x77, 0x6e,
	0x65, 0x72, 0x73, 0x68, 0x69, 0x70, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x29, 0x2e,
	0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x70, 0x70, 0x72, 0x6f, 0x76,
	0x65, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x73, 0x68, 0x69, 0x70, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2a, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x65, 0x4f, 0x77, 0x6e, 0x65,
	0x72, 0x73, 0x68, 0x69, 0x70, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x6d, 0x0a, 0x16, 0x52, 0x65, 0x6a, 0x65, 0x63, 0x74, 0x4f, 0x77,
	0x6e, 0x65, 0x72, 0x73, 0x68, 0x69, 0x70, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x28,
	0x2e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x6a, 0x65, 0x63,
	0x74, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x73, 0x68, 0x69, 0x70, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x29, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x6a, 0x65, 0x63, 0x74, 0x4f, 0x77, 0x6e, 0x65, 0x72,
	0x73, 0x68, 0x69, 0x70, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x8b, 0x01, 0x0a, 0x20, 0x47, 0x65, 0x74, 0x41, 0x6c, 0x6c, 0x4e, 0x61,
	0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x73, 0x68, 0x69, 0x70,
	0x4d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x73, 0x12, 0x32, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x41, 0x6c, 0x6c, 0x4e, 0x61, 0x6d, 0x65, 0x73,
	0x70, 0x61, 0x63, 0x65, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x73, 0x68, 0x69, 0x70, 0x4d, 0x61, 0x70,
	0x70, 0x69, 0x6e, 0x67, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x33, 0x2e, 0x73,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x41, 0x6c, 0x6c, 0x4e,
	0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x73, 0x68, 0x69,
	0x70, 0x4d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x7c, 0x0a, 0x1b, 0x47, 0x65, 0x74, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x69, 0x65, 0x73,
	0x41, 0x77, 0x61, 0x69, 0x74, 0x69, 0x6e, 0x67, 0x4d, 0x79, 0x52, 0x65, 0x76, 0x69, 0x65, 0x77,
	0x12, 0x2d, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74,
	0x50, 0x6f, 0x6c, 0x69, 0x63, 0x69, 0x65, 0x73, 0x41, 0x77, 0x61, 0x69, 0x74, 0x69, 0x6e, 0x67,
	0x4d, 0x79, 0x52, 0x65, 0x76, 0x69, 0x65, 0x77, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x2e, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x50,
	0x6f, 0x6c, 0x69, 0x63, 0x69, 0x65, 0x73, 0x41, 0x77, 0x61, 0x69, 0x74, 0x69, 0x6e, 0x67, 0x4d,
	0x79, 0x52, 0x65, 0x76, 0x69, 0x65, 0x77, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x70, 0x0a, 0x17, 0x47, 0x65, 0x74, 0x4d, 0x79, 0x50, 0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x52,
	0x65, 0x76, 0x69, 0x65, 0x77, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x29, 0x2e, 0x73, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x4d, 0x79, 0x50, 0x65, 0x6e, 0x64,
	0x69, 0x6e, 0x67, 0x52, 0x65, 0x76, 0x69, 0x65, 0x77, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2a, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x76,
	0x31, 0x2e, 0x47, 0x65, 0x74, 0x4d, 0x79, 0x50, 0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x52, 0x65,
	0x76, 0x69, 0x65, 0x77, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x61, 0x0a, 0x12, 0x53, 0x75, 0x62, 0x6d, 0x69, 0x74, 0x50, 0x6f, 0x6c, 0x69, 0x63,
	0x79, 0x52, 0x65, 0x76, 0x69, 0x65, 0x77, 0x12, 0x24, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x2e, 0x76, 0x31, 0x2e, 0x53, 0x75, 0x62, 0x6d, 0x69, 0x74, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79,
	0x52, 0x65, 0x76, 0x69, 0x65, 0x77, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x25, 0x2e,
	0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x75, 0x62, 0x6d, 0x69, 0x74,
	0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x52, 0x65, 0x76, 0x69, 0x65, 0x77, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x6a, 0x0a, 0x15, 0x47, 0x65, 0x74, 0x50, 0x6f, 0x6c, 0x69, 0x63,
	0x79, 0x52, 0x65, 0x76, 0x69, 0x65, 0x77, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x27, 0x2e,
	0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x50, 0x6f, 0x6c,
	0x69, 0x63, 0x79, 0x52, 0x65, 0x76, 0x69, 0x65, 0x77, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x28, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e,
	0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x52, 0x65, 0x76, 0x69,
	0x65, 0x77, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x6a, 0x0a, 0x15, 0x54, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x52, 0x69, 0x73, 0x6b, 0x41,
	0x73, 0x73, 0x65, 0x73, 0x73, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x27, 0x2e, 0x73, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x52, 0x69, 0x73,
	0x6b, 0x41, 0x73, 0x73, 0x65, 0x73, 0x73, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x28, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x54,
	0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x52, 0x69, 0x73, 0x6b, 0x41, 0x73, 0x73, 0x65, 0x73, 0x73,
	0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x70, 0x0a, 0x17,
	0x47, 0x65, 0x74, 0x52, 0x69, 0x73, 0x6b, 0x41, 0x73, 0x73, 0x65, 0x73, 0x73, 0x6d, 0x65, 0x6e,
	0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x29, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x52, 0x69, 0x73, 0x6b, 0x41, 0x73, 0x73, 0x65, 0x73,
	0x73, 0x6d, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x2a, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x47,
	0x65, 0x74, 0x52, 0x69, 0x73, 0x6b, 0x41, 0x73, 0x73, 0x65, 0x73, 0x73, 0x6d, 0x65, 0x6e, 0x74,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x64,
	0x0a, 0x13, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x69, 0x73, 0x6b, 0x41, 0x73, 0x73, 0x65, 0x73, 0x73,
	0x6d, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x25, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x76,
	0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x69, 0x73, 0x6b, 0x41, 0x73, 0x73, 0x65, 0x73, 0x73,
	0x6d, 0x65, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x26, 0x2e, 0x73,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x69, 0x73,
	0x6b, 0x41, 0x73, 0x73, 0x65, 0x73, 0x73, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x73, 0x0a, 0x18, 0x47, 0x65, 0x74, 0x49, 0x6e, 0x76, 0x65, 0x6e,
	0x74, 0x6f, 0x72, 0x79, 0x4c, 0x37, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x4c, 0x6f, 0x67, 0x73,
	0x12, 0x2a, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74,
	0x49, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x4c, 0x37, 0x41, 0x63, 0x63, 0x65, 0x73,
	0x73, 0x4c, 0x6f, 0x67, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2b, 0x2e, 0x73,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x49, 0x6e, 0x76, 0x65,
	0x6e, 0x74, 0x6f, 0x72, 0x79, 0x4c, 0x37, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x4c, 0x6f, 0x67,
	0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x88, 0x01, 0x0a, 0x1f, 0x47, 0x65,
	0x74, 0x49, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65,
	0x72, 0x4c, 0x37, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x4c, 0x6f, 0x67, 0x73, 0x12, 0x31, 0x2e,
	0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x49, 0x6e, 0x76,
	0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x4c, 0x37, 0x41,
	0x63, 0x63, 0x65, 0x73, 0x73, 0x4c, 0x6f, 0x67, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x32, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74,
	0x49, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72,
	0x4c, 0x37, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x4c, 0x6f, 0x67, 0x73, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0xa9, 0x01, 0x0a, 0x2a, 0x47, 0x65, 0x74, 0x49, 0x6e, 0x64, 0x69,
	0x76, 0x69, 0x64, 0x75, 0x61, 0x6c, 0x4c, 0x37, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x4c, 0x6f,
	0x67, 0x73, 0x42, 0x65, 0x74, 0x77, 0x65, 0x65, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61,
	0x63, 0x65, 0x73, 0x12, 0x3c, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e,
	0x47, 0x65, 0x74, 0x49, 0x6e, 0x64, 0x69, 0x76, 0x69, 0x64, 0x75, 0x61, 0x6c, 0x4c, 0x37, 0x41,
	0x63, 0x63, 0x65, 0x73, 0x73, 0x4c, 0x6f, 0x67, 0x73, 0x42, 0x65, 0x74, 0x77, 0x65, 0x65, 0x6e,
	0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x3d, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65,
	0x74, 0x49, 0x6e, 0x64, 0x69, 0x76, 0x69, 0x64, 0x75, 0x61, 0x6c, 0x4c, 0x37, 0x41, 0x63, 0x63,
	0x65, 0x73, 0x73, 0x4c, 0x6f, 0x67, 0x73, 0x42, 0x65, 0x74, 0x77, 0x65, 0x65, 0x6e, 0x4e, 0x61,
	0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x42, 0x77, 0x0a, 0x0d, 0x63, 0x6f, 0x6d, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x76,
	0x31, 0x42, 0x0b, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x50, 0x01,
	0x5a, 0x14, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x73, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x2f, 0x76, 0x31, 0xa2, 0x02, 0x03, 0x53, 0x58, 0x58, 0xaa, 0x02, 0x09, 0x53,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x56, 0x31, 0xca, 0x02, 0x09, 0x53, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x5c, 0x56, 0x31, 0xe2, 0x02, 0x15, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x5c, 0x56, 0x31,
	0x5c, 0x47, 0x50, 0x42, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0xea, 0x02, 0x0a, 0x53,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x3a, 0x3a, 0x56, 0x31, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x33,
})

var (
	file_server_v1_server_proto_rawDescOnce sync.Once
	file_server_v1_server_proto_rawDescData []byte
)

func file_server_v1_server_proto_rawDescGZIP() []byte {
	file_server_v1_server_proto_rawDescOnce.Do(func() {
		file_server_v1_server_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_server_v1_server_proto_rawDesc), len(file_server_v1_server_proto_rawDesc)))
	})
	return file_server_v1_server_proto_rawDescData
}

var file_server_v1_server_proto_enumTypes = make([]protoimpl.EnumInfo, 3)
var file_server_v1_server_proto_msgTypes = make([]protoimpl.MessageInfo, 143)
var file_server_v1_server_proto_goTypes = []any{
	(PolicyReviewStatus)(0),                                    // 0: server.v1.PolicyReviewStatus
	(RiskAssessmentStatus)(0),                                  // 1: server.v1.RiskAssessmentStatus
	(RiskAssessmentAgentType)(0),                               // 2: server.v1.RiskAssessmentAgentType
	(*OnboardClusterRequest)(nil),                              // 3: server.v1.OnboardClusterRequest
	(*OnboardClusterResponse)(nil),                             // 4: server.v1.OnboardClusterResponse
	(*RenewClusterTokenRequest)(nil),                           // 5: server.v1.RenewClusterTokenRequest
	(*RenewClusterTokenResponse)(nil),                          // 6: server.v1.RenewClusterTokenResponse
	(*GetNetworkPolicyRequest)(nil),                            // 7: server.v1.GetNetworkPolicyRequest
	(*GetNetworkPolicyResponse)(nil),                           // 8: server.v1.GetNetworkPolicyResponse
	(*GetExistingNetworkPolicyRequest)(nil),                    // 9: server.v1.GetExistingNetworkPolicyRequest
	(*GetExistingNetworkPolicyResponse)(nil),                   // 10: server.v1.GetExistingNetworkPolicyResponse
	(*ListNetworkPoliciesRequest)(nil),                         // 11: server.v1.ListNetworkPoliciesRequest
	(*ListNetworkPoliciesResponse)(nil),                        // 12: server.v1.ListNetworkPoliciesResponse
	(*NetworkPolicyWithCluster)(nil),                           // 13: server.v1.NetworkPolicyWithCluster
	(*SuspiciousFlowWithReason)(nil),                           // 14: server.v1.SuspiciousFlowWithReason
	(*Flow)(nil),                                               // 15: server.v1.Flow
	(*Endpoint)(nil),                                           // 16: server.v1.Endpoint
	(*Policy)(nil),                                             // 17: server.v1.Policy
	(*ListExistingNetworkPoliciesRequest)(nil),                 // 18: server.v1.ListExistingNetworkPoliciesRequest
	(*ListExistingNetworkPoliciesResponse)(nil),                // 19: server.v1.ListExistingNetworkPoliciesResponse
	(*ExistingPolicyWithCluster)(nil),                          // 20: server.v1.ExistingPolicyWithCluster
	(*ListClustersRequest)(nil),                                // 21: server.v1.ListClustersRequest
	(*ListClustersResponse)(nil),                               // 22: server.v1.ListClustersResponse
	(*GetClusterStatsRequest)(nil),                             // 23: server.v1.GetClusterStatsRequest
	(*GetClusterStatsResponse)(nil),                            // 24: server.v1.GetClusterStatsResponse
	(*ClusterInfo)(nil),                                        // 25: server.v1.ClusterInfo
	(*RegisterRequest)(nil),                                    // 26: server.v1.RegisterRequest
	(*RegisterResponse)(nil),                                   // 27: server.v1.RegisterResponse
	(*LoginRequest)(nil),                                       // 28: server.v1.LoginRequest
	(*LoginResponse)(nil),                                      // 29: server.v1.LoginResponse
	(*LogoutRequest)(nil),                                      // 30: server.v1.LogoutRequest
	(*LogoutResponse)(nil),                                     // 31: server.v1.LogoutResponse
	(*ValidateSessionRequest)(nil),                             // 32: server.v1.ValidateSessionRequest
	(*ValidateSessionResponse)(nil),                            // 33: server.v1.ValidateSessionResponse
	(*RefreshSessionRequest)(nil),                              // 34: server.v1.RefreshSessionRequest
	(*RefreshSessionResponse)(nil),                             // 35: server.v1.RefreshSessionResponse
	(*CreateTenantRequest)(nil),                                // 36: server.v1.CreateTenantRequest
	(*CreateTenantResponse)(nil),                               // 37: server.v1.CreateTenantResponse
	(*GetTenantRequest)(nil),                                   // 38: server.v1.GetTenantRequest
	(*GetTenantResponse)(nil),                                  // 39: server.v1.GetTenantResponse
	(*UpdateTenantRequest)(nil),                                // 40: server.v1.UpdateTenantRequest
	(*UpdateTenantResponse)(nil),                               // 41: server.v1.UpdateTenantResponse
	(*LinkUserToTenantRequest)(nil),                            // 42: server.v1.LinkUserToTenantRequest
	(*LinkUserToTenantResponse)(nil),                           // 43: server.v1.LinkUserToTenantResponse
	(*GetPolicyCountForTenantRequest)(nil),                     // 44: server.v1.GetPolicyCountForTenantRequest
	(*GetPolicyCountForTenantResponse)(nil),                    // 45: server.v1.GetPolicyCountForTenantResponse
	(*GetUserCountForTenantRequest)(nil),                       // 46: server.v1.GetUserCountForTenantRequest
	(*GetUserCountForTenantResponse)(nil),                      // 47: server.v1.GetUserCountForTenantResponse
	(*GetRecentPoliciesForTenantRequest)(nil),                  // 48: server.v1.GetRecentPoliciesForTenantRequest
	(*RecentPolicy)(nil),                                       // 49: server.v1.RecentPolicy
	(*GetRecentPoliciesForTenantResponse)(nil),                 // 50: server.v1.GetRecentPoliciesForTenantResponse
	(*GetRecentAuthorizationPoliciesForTenantRequest)(nil),     // 51: server.v1.GetRecentAuthorizationPoliciesForTenantRequest
	(*GetRecentAuthorizationPoliciesForTenantResponse)(nil),    // 52: server.v1.GetRecentAuthorizationPoliciesForTenantResponse
	(*GetRecentClustersForTenantRequest)(nil),                  // 53: server.v1.GetRecentClustersForTenantRequest
	(*RecentCluster)(nil),                                      // 54: server.v1.RecentCluster
	(*GetRecentClustersForTenantResponse)(nil),                 // 55: server.v1.GetRecentClustersForTenantResponse
	(*GetRecentUsersForTenantRequest)(nil),                     // 56: server.v1.GetRecentUsersForTenantRequest
	(*RecentUser)(nil),                                         // 57: server.v1.RecentUser
	(*GetRecentUsersForTenantResponse)(nil),                    // 58: server.v1.GetRecentUsersForTenantResponse
	(*OffboardClusterRequest)(nil),                             // 59: server.v1.OffboardClusterRequest
	(*OffboardClusterResponse)(nil),                            // 60: server.v1.OffboardClusterResponse
	(*ListClusterSummariesRequest)(nil),                        // 61: server.v1.ListClusterSummariesRequest
	(*ClusterSummary)(nil),                                     // 62: server.v1.ClusterSummary
	(*ListClusterSummariesResponse)(nil),                       // 63: server.v1.ListClusterSummariesResponse
	(*GetCurrentUserRequest)(nil),                              // 64: server.v1.GetCurrentUserRequest
	(*GetCurrentUserResponse)(nil),                             // 65: server.v1.GetCurrentUserResponse
	(*UpdateUserProfileRequest)(nil),                           // 66: server.v1.UpdateUserProfileRequest
	(*UpdateUserProfileResponse)(nil),                          // 67: server.v1.UpdateUserProfileResponse
	(*UpdateUserRoleRequest)(nil),                              // 68: server.v1.UpdateUserRoleRequest
	(*UpdateUserRoleResponse)(nil),                             // 69: server.v1.UpdateUserRoleResponse
	(*ListTenantUsersRequest)(nil),                             // 70: server.v1.ListTenantUsersRequest
	(*ListTenantUsersResponse)(nil),                            // 71: server.v1.ListTenantUsersResponse
	(*TenantUser)(nil),                                         // 72: server.v1.TenantUser
	(*InviteUserRequest)(nil),                                  // 73: server.v1.InviteUserRequest
	(*InviteUserResponse)(nil),                                 // 74: server.v1.InviteUserResponse
	(*RemoveUserFromOrgRequest)(nil),                           // 75: server.v1.RemoveUserFromOrgRequest
	(*RemoveUserFromOrgResponse)(nil),                          // 76: server.v1.RemoveUserFromOrgResponse
	(*ListInvitationsRequest)(nil),                             // 77: server.v1.ListInvitationsRequest
	(*ListInvitationsResponse)(nil),                            // 78: server.v1.ListInvitationsResponse
	(*Invitation)(nil),                                         // 79: server.v1.Invitation
	(*RevokeInvitationRequest)(nil),                            // 80: server.v1.RevokeInvitationRequest
	(*RevokeInvitationResponse)(nil),                           // 81: server.v1.RevokeInvitationResponse
	(*AssignNamespaceOwnerRequest)(nil),                        // 82: server.v1.AssignNamespaceOwnerRequest
	(*AssignNamespaceOwnerResponse)(nil),                       // 83: server.v1.AssignNamespaceOwnerResponse
	(*RemoveNamespaceOwnerRequest)(nil),                        // 84: server.v1.RemoveNamespaceOwnerRequest
	(*RemoveNamespaceOwnerResponse)(nil),                       // 85: server.v1.RemoveNamespaceOwnerResponse
	(*GetNamespaceOwnersRequest)(nil),                          // 86: server.v1.GetNamespaceOwnersRequest
	(*GetNamespaceOwnersResponse)(nil),                         // 87: server.v1.GetNamespaceOwnersResponse
	(*RequestNamespaceOwnershipRequest)(nil),                   // 88: server.v1.RequestNamespaceOwnershipRequest
	(*RequestNamespaceOwnershipResponse)(nil),                  // 89: server.v1.RequestNamespaceOwnershipResponse
	(*ListNamespaceOwnershipRequestsRequest)(nil),              // 90: server.v1.ListNamespaceOwnershipRequestsRequest
	(*ListNamespaceOwnershipRequestsResponse)(nil),             // 91: server.v1.ListNamespaceOwnershipRequestsResponse
	(*NamespaceOwnershipRequest)(nil),                          // 92: server.v1.NamespaceOwnershipRequest
	(*ApproveOwnershipRequestRequest)(nil),                     // 93: server.v1.ApproveOwnershipRequestRequest
	(*ApproveOwnershipRequestResponse)(nil),                    // 94: server.v1.ApproveOwnershipRequestResponse
	(*RejectOwnershipRequestRequest)(nil),                      // 95: server.v1.RejectOwnershipRequestRequest
	(*RejectOwnershipRequestResponse)(nil),                     // 96: server.v1.RejectOwnershipRequestResponse
	(*GetAllNamespaceOwnershipMappingsRequest)(nil),            // 97: server.v1.GetAllNamespaceOwnershipMappingsRequest
	(*NamespaceAssignment)(nil),                                // 98: server.v1.NamespaceAssignment
	(*GetAllNamespaceOwnershipMappingsResponse)(nil),           // 99: server.v1.GetAllNamespaceOwnershipMappingsResponse
	(*OwnedNamespace)(nil),                                     // 100: server.v1.OwnedNamespace
	(*ListMyNamespacesRequest)(nil),                            // 101: server.v1.ListMyNamespacesRequest
	(*ListMyNamespacesResponse)(nil),                           // 102: server.v1.ListMyNamespacesResponse
	(*GetPoliciesAwaitingMyReviewRequest)(nil),                 // 103: server.v1.GetPoliciesAwaitingMyReviewRequest
	(*PolicyAwaitingReview)(nil),                               // 104: server.v1.PolicyAwaitingReview
	(*GetPoliciesAwaitingMyReviewResponse)(nil),                // 105: server.v1.GetPoliciesAwaitingMyReviewResponse
	(*GetMyPendingReviewCountRequest)(nil),                     // 106: server.v1.GetMyPendingReviewCountRequest
	(*GetMyPendingReviewCountResponse)(nil),                    // 107: server.v1.GetMyPendingReviewCountResponse
	(*SubmitPolicyReviewRequest)(nil),                          // 108: server.v1.SubmitPolicyReviewRequest
	(*SubmitPolicyReviewResponse)(nil),                         // 109: server.v1.SubmitPolicyReviewResponse
	(*GetPolicyReviewStatusRequest)(nil),                       // 110: server.v1.GetPolicyReviewStatusRequest
	(*PolicyReviewAssignment)(nil),                             // 111: server.v1.PolicyReviewAssignment
	(*PolicyReviewSummary)(nil),                                // 112: server.v1.PolicyReviewSummary
	(*GetPolicyReviewStatusResponse)(nil),                      // 113: server.v1.GetPolicyReviewStatusResponse
	(*TriggerRiskAssessmentRequest)(nil),                       // 114: server.v1.TriggerRiskAssessmentRequest
	(*TriggerRiskAssessmentResponse)(nil),                      // 115: server.v1.TriggerRiskAssessmentResponse
	(*GetRiskAssessmentStatusRequest)(nil),                     // 116: server.v1.GetRiskAssessmentStatusRequest
	(*RiskAssessmentAgentThinking)(nil),                        // 117: server.v1.RiskAssessmentAgentThinking
	(*ToolCall)(nil),                                           // 118: server.v1.ToolCall
	(*GetRiskAssessmentStatusResponse)(nil),                    // 119: server.v1.GetRiskAssessmentStatusResponse
	(*ListRiskAssessmentsRequest)(nil),                         // 120: server.v1.ListRiskAssessmentsRequest
	(*RiskFinding)(nil),                                        // 121: server.v1.RiskFinding
	(*RiskAssessmentSummary)(nil),                              // 122: server.v1.RiskAssessmentSummary
	(*ListRiskAssessmentsResponse)(nil),                        // 123: server.v1.ListRiskAssessmentsResponse
	(*GetAuthorizationPolicyRequest)(nil),                      // 124: server.v1.GetAuthorizationPolicyRequest
	(*GetAuthorizationPolicyResponse)(nil),                     // 125: server.v1.GetAuthorizationPolicyResponse
	(*ListAuthorizationPoliciesRequest)(nil),                   // 126: server.v1.ListAuthorizationPoliciesRequest
	(*ListAuthorizationPoliciesResponse)(nil),                  // 127: server.v1.ListAuthorizationPoliciesResponse
	(*AuthorizationPolicyWithCluster)(nil),                     // 128: server.v1.AuthorizationPolicyWithCluster
	(*SuspiciousL7AccessLogWithReason)(nil),                    // 129: server.v1.SuspiciousL7AccessLogWithReason
	(*L7AccessLog)(nil),                                        // 130: server.v1.L7AccessLog
	(*L7Endpoint)(nil),                                         // 131: server.v1.L7Endpoint
	(*HttpData)(nil),                                           // 132: server.v1.HttpData
	(*GetExistingAuthorizationPolicyRequest)(nil),              // 133: server.v1.GetExistingAuthorizationPolicyRequest
	(*GetExistingAuthorizationPolicyResponse)(nil),             // 134: server.v1.GetExistingAuthorizationPolicyResponse
	(*ListExistingAuthorizationPoliciesRequest)(nil),           // 135: server.v1.ListExistingAuthorizationPoliciesRequest
	(*ListExistingAuthorizationPoliciesResponse)(nil),          // 136: server.v1.ListExistingAuthorizationPoliciesResponse
	(*ExistingAuthorizationPolicyWithCluster)(nil),             // 137: server.v1.ExistingAuthorizationPolicyWithCluster
	(*L7AccessLogSummary)(nil),                                 // 138: server.v1.L7AccessLogSummary
	(*InventoryL7AccessLogsResponse)(nil),                      // 139: server.v1.InventoryL7AccessLogsResponse
	(*GetIndividualL7AccessLogsBetweenNamespacesRequest)(nil),  // 140: server.v1.GetIndividualL7AccessLogsBetweenNamespacesRequest
	(*GetIndividualL7AccessLogsBetweenNamespacesResponse)(nil), // 141: server.v1.GetIndividualL7AccessLogsBetweenNamespacesResponse
	(*GetInventoryL7AccessLogsRequest)(nil),                    // 142: server.v1.GetInventoryL7AccessLogsRequest
	(*GetInventoryL7AccessLogsResponse)(nil),                   // 143: server.v1.GetInventoryL7AccessLogsResponse
	(*GetInventoryClusterL7AccessLogsRequest)(nil),             // 144: server.v1.GetInventoryClusterL7AccessLogsRequest
	(*GetInventoryClusterL7AccessLogsResponse)(nil),            // 145: server.v1.GetInventoryClusterL7AccessLogsResponse
	(*timestamppb.Timestamp)(nil),                              // 146: google.protobuf.Timestamp
	(*wrapperspb.BoolValue)(nil),                               // 147: google.protobuf.BoolValue
}
var file_server_v1_server_proto_depIdxs = []int32{
	13,  // 0: server.v1.GetNetworkPolicyResponse.policy:type_name -> server.v1.NetworkPolicyWithCluster
	20,  // 1: server.v1.GetExistingNetworkPolicyResponse.policy:type_name -> server.v1.ExistingPolicyWithCluster
	0,   // 2: server.v1.ListNetworkPoliciesRequest.review_status:type_name -> server.v1.PolicyReviewStatus
	13,  // 3: server.v1.ListNetworkPoliciesResponse.policies:type_name -> server.v1.NetworkPolicyWithCluster
	14,  // 4: server.v1.NetworkPolicyWithCluster.suspicious_flows:type_name -> server.v1.SuspiciousFlowWithReason
	15,  // 5: server.v1.NetworkPolicyWithCluster.allowed_flows:type_name -> server.v1.Flow
	15,  // 6: server.v1.SuspiciousFlowWithReason.suspicious_flow:type_name -> server.v1.Flow
	16,  // 7: server.v1.Flow.src:type_name -> server.v1.Endpoint
	16,  // 8: server.v1.Flow.dst:type_name -> server.v1.Endpoint
	146, // 9: server.v1.Flow.first_seen:type_name -> google.protobuf.Timestamp
	146, // 10: server.v1.Flow.last_seen:type_name -> google.protobuf.Timestamp
	17,  // 11: server.v1.Flow.ingress_allowed_by:type_name -> server.v1.Policy
	17,  // 12: server.v1.Flow.egress_allowed_by:type_name -> server.v1.Policy
	20,  // 13: server.v1.ListExistingNetworkPoliciesResponse.policies:type_name -> server.v1.ExistingPolicyWithCluster
	14,  // 14: server.v1.ExistingPolicyWithCluster.suspicious_flows:type_name -> server.v1.SuspiciousFlowWithReason
	15,  // 15: server.v1.ExistingPolicyWithCluster.allowed_flows:type_name -> server.v1.Flow
	25,  // 16: server.v1.ListClustersResponse.clusters:type_name -> server.v1.ClusterInfo
	147, // 17: server.v1.GetRecentPoliciesForTenantRequest.reviewed:type_name -> google.protobuf.BoolValue
	49,  // 18: server.v1.GetRecentPoliciesForTenantResponse.policies:type_name -> server.v1.RecentPolicy
	147, // 19: server.v1.GetRecentAuthorizationPoliciesForTenantRequest.reviewed:type_name -> google.protobuf.BoolValue
	49,  // 20: server.v1.GetRecentAuthorizationPoliciesForTenantResponse.policies:type_name -> server.v1.RecentPolicy
	54,  // 21: server.v1.GetRecentClustersForTenantResponse.clusters:type_name -> server.v1.RecentCluster
	57,  // 22: server.v1.GetRecentUsersForTenantResponse.users:type_name -> server.v1.RecentUser
	62,  // 23: server.v1.ListClusterSummariesResponse.clusters:type_name -> server.v1.ClusterSummary
	72,  // 24: server.v1.ListTenantUsersResponse.users:type_name -> server.v1.TenantUser
	79,  // 25: server.v1.ListInvitationsResponse.invitations:type_name -> server.v1.Invitation
	92,  // 26: server.v1.ListNamespaceOwnershipRequestsResponse.requests:type_name -> server.v1.NamespaceOwnershipRequest
	98,  // 27: server.v1.GetAllNamespaceOwnershipMappingsResponse.assignments:type_name -> server.v1.NamespaceAssignment
	100, // 28: server.v1.ListMyNamespacesResponse.namespaces:type_name -> server.v1.OwnedNamespace
	104, // 29: server.v1.GetPoliciesAwaitingMyReviewResponse.policies:type_name -> server.v1.PolicyAwaitingReview
	0,   // 30: server.v1.SubmitPolicyReviewRequest.status:type_name -> server.v1.PolicyReviewStatus
	0,   // 31: server.v1.PolicyReviewAssignment.status:type_name -> server.v1.PolicyReviewStatus
	112, // 32: server.v1.GetPolicyReviewStatusResponse.summary:type_name -> server.v1.PolicyReviewSummary
	111, // 33: server.v1.GetPolicyReviewStatusResponse.assignments:type_name -> server.v1.PolicyReviewAssignment
	2,   // 34: server.v1.RiskAssessmentAgentThinking.agent_type:type_name -> server.v1.RiskAssessmentAgentType
	118, // 35: server.v1.RiskAssessmentAgentThinking.tool_calls:type_name -> server.v1.ToolCall
	1,   // 36: server.v1.GetRiskAssessmentStatusResponse.status:type_name -> server.v1.RiskAssessmentStatus
	117, // 37: server.v1.GetRiskAssessmentStatusResponse.agent_thinking:type_name -> server.v1.RiskAssessmentAgentThinking
	121, // 38: server.v1.GetRiskAssessmentStatusResponse.structured_findings:type_name -> server.v1.RiskFinding
	1,   // 39: server.v1.RiskAssessmentSummary.status:type_name -> server.v1.RiskAssessmentStatus
	121, // 40: server.v1.RiskAssessmentSummary.structured_findings:type_name -> server.v1.RiskFinding
	122, // 41: server.v1.ListRiskAssessmentsResponse.assessments:type_name -> server.v1.RiskAssessmentSummary
	128, // 42: server.v1.GetAuthorizationPolicyResponse.policy:type_name -> server.v1.AuthorizationPolicyWithCluster
	0,   // 43: server.v1.ListAuthorizationPoliciesRequest.review_status:type_name -> server.v1.PolicyReviewStatus
	128, // 44: server.v1.ListAuthorizationPoliciesResponse.policies:type_name -> server.v1.AuthorizationPolicyWithCluster
	129, // 45: server.v1.AuthorizationPolicyWithCluster.suspicious_l7_logs:type_name -> server.v1.SuspiciousL7AccessLogWithReason
	130, // 46: server.v1.AuthorizationPolicyWithCluster.allowed_l7_logs:type_name -> server.v1.L7AccessLog
	130, // 47: server.v1.SuspiciousL7AccessLogWithReason.suspicious_log:type_name -> server.v1.L7AccessLog
	131, // 48: server.v1.L7AccessLog.source:type_name -> server.v1.L7Endpoint
	131, // 49: server.v1.L7AccessLog.destination:type_name -> server.v1.L7Endpoint
	146, // 50: server.v1.L7AccessLog.first_seen:type_name -> google.protobuf.Timestamp
	146, // 51: server.v1.L7AccessLog.last_seen:type_name -> google.protobuf.Timestamp
	132, // 52: server.v1.L7AccessLog.http_data:type_name -> server.v1.HttpData
	137, // 53: server.v1.GetExistingAuthorizationPolicyResponse.policy:type_name -> server.v1.ExistingAuthorizationPolicyWithCluster
	137, // 54: server.v1.ListExistingAuthorizationPoliciesResponse.policies:type_name -> server.v1.ExistingAuthorizationPolicyWithCluster
	129, // 55: server.v1.ExistingAuthorizationPolicyWithCluster.suspicious_l7_logs:type_name -> server.v1.SuspiciousL7AccessLogWithReason
	130, // 56: server.v1.ExistingAuthorizationPolicyWithCluster.allowed_l7_logs:type_name -> server.v1.L7AccessLog
	138, // 57: server.v1.InventoryL7AccessLogsResponse.access_logs:type_name -> server.v1.L7AccessLogSummary
	138, // 58: server.v1.GetIndividualL7AccessLogsBetweenNamespacesResponse.access_logs:type_name -> server.v1.L7AccessLogSummary
	138, // 59: server.v1.GetInventoryL7AccessLogsResponse.access_logs:type_name -> server.v1.L7AccessLogSummary
	138, // 60: server.v1.GetInventoryClusterL7AccessLogsResponse.access_logs:type_name -> server.v1.L7AccessLogSummary
	3,   // 61: server.v1.AutonpServerService.OnboardCluster:input_type -> server.v1.OnboardClusterRequest
	5,   // 62: server.v1.AutonpServerService.RenewClusterToken:input_type -> server.v1.RenewClusterTokenRequest
	7,   // 63: server.v1.AutonpServerService.GetNetworkPolicy:input_type -> server.v1.GetNetworkPolicyRequest
	9,   // 64: server.v1.AutonpServerService.GetExistingNetworkPolicy:input_type -> server.v1.GetExistingNetworkPolicyRequest
	11,  // 65: server.v1.AutonpServerService.ListNetworkPolicies:input_type -> server.v1.ListNetworkPoliciesRequest
	18,  // 66: server.v1.AutonpServerService.ListExistingNetworkPolicies:input_type -> server.v1.ListExistingNetworkPoliciesRequest
	124, // 67: server.v1.AutonpServerService.GetAuthorizationPolicy:input_type -> server.v1.GetAuthorizationPolicyRequest
	133, // 68: server.v1.AutonpServerService.GetExistingAuthorizationPolicy:input_type -> server.v1.GetExistingAuthorizationPolicyRequest
	126, // 69: server.v1.AutonpServerService.ListAuthorizationPolicies:input_type -> server.v1.ListAuthorizationPoliciesRequest
	135, // 70: server.v1.AutonpServerService.ListExistingAuthorizationPolicies:input_type -> server.v1.ListExistingAuthorizationPoliciesRequest
	21,  // 71: server.v1.AutonpServerService.ListClusters:input_type -> server.v1.ListClustersRequest
	26,  // 72: server.v1.AutonpServerService.Register:input_type -> server.v1.RegisterRequest
	28,  // 73: server.v1.AutonpServerService.Login:input_type -> server.v1.LoginRequest
	30,  // 74: server.v1.AutonpServerService.Logout:input_type -> server.v1.LogoutRequest
	32,  // 75: server.v1.AutonpServerService.ValidateSession:input_type -> server.v1.ValidateSessionRequest
	34,  // 76: server.v1.AutonpServerService.RefreshSession:input_type -> server.v1.RefreshSessionRequest
	36,  // 77: server.v1.AutonpServerService.CreateTenant:input_type -> server.v1.CreateTenantRequest
	38,  // 78: server.v1.AutonpServerService.GetTenant:input_type -> server.v1.GetTenantRequest
	40,  // 79: server.v1.AutonpServerService.UpdateTenant:input_type -> server.v1.UpdateTenantRequest
	42,  // 80: server.v1.AutonpServerService.LinkUserToTenant:input_type -> server.v1.LinkUserToTenantRequest
	44,  // 81: server.v1.AutonpServerService.GetPolicyCountForTenant:input_type -> server.v1.GetPolicyCountForTenantRequest
	46,  // 82: server.v1.AutonpServerService.GetUserCountForTenant:input_type -> server.v1.GetUserCountForTenantRequest
	23,  // 83: server.v1.AutonpServerService.GetClusterStats:input_type -> server.v1.GetClusterStatsRequest
	48,  // 84: server.v1.AutonpServerService.GetRecentPoliciesForTenant:input_type -> server.v1.GetRecentPoliciesForTenantRequest
	51,  // 85: server.v1.AutonpServerService.GetRecentAuthorizationPoliciesForTenant:input_type -> server.v1.GetRecentAuthorizationPoliciesForTenantRequest
	53,  // 86: server.v1.AutonpServerService.GetRecentClustersForTenant:input_type -> server.v1.GetRecentClustersForTenantRequest
	56,  // 87: server.v1.AutonpServerService.GetRecentUsersForTenant:input_type -> server.v1.GetRecentUsersForTenantRequest
	59,  // 88: server.v1.AutonpServerService.OffboardCluster:input_type -> server.v1.OffboardClusterRequest
	61,  // 89: server.v1.AutonpServerService.ListClusterSummaries:input_type -> server.v1.ListClusterSummariesRequest
	64,  // 90: server.v1.AutonpServerService.GetCurrentUser:input_type -> server.v1.GetCurrentUserRequest
	66,  // 91: server.v1.AutonpServerService.UpdateUserProfile:input_type -> server.v1.UpdateUserProfileRequest
	68,  // 92: server.v1.AutonpServerService.UpdateUserRole:input_type -> server.v1.UpdateUserRoleRequest
	70,  // 93: server.v1.AutonpServerService.ListTenantUsers:input_type -> server.v1.ListTenantUsersRequest
	73,  // 94: server.v1.AutonpServerService.InviteUser:input_type -> server.v1.InviteUserRequest
	75,  // 95: server.v1.AutonpServerService.RemoveUserFromOrg:input_type -> server.v1.RemoveUserFromOrgRequest
	77,  // 96: server.v1.AutonpServerService.ListInvitations:input_type -> server.v1.ListInvitationsRequest
	80,  // 97: server.v1.AutonpServerService.RevokeInvitation:input_type -> server.v1.RevokeInvitationRequest
	101, // 98: server.v1.AutonpServerService.ListMyNamespaces:input_type -> server.v1.ListMyNamespacesRequest
	82,  // 99: server.v1.AutonpServerService.AssignNamespaceOwner:input_type -> server.v1.AssignNamespaceOwnerRequest
	84,  // 100: server.v1.AutonpServerService.RemoveNamespaceOwner:input_type -> server.v1.RemoveNamespaceOwnerRequest
	86,  // 101: server.v1.AutonpServerService.GetNamespaceOwners:input_type -> server.v1.GetNamespaceOwnersRequest
	88,  // 102: server.v1.AutonpServerService.RequestNamespaceOwnership:input_type -> server.v1.RequestNamespaceOwnershipRequest
	90,  // 103: server.v1.AutonpServerService.ListNamespaceOwnershipRequests:input_type -> server.v1.ListNamespaceOwnershipRequestsRequest
	93,  // 104: server.v1.AutonpServerService.ApproveOwnershipRequest:input_type -> server.v1.ApproveOwnershipRequestRequest
	95,  // 105: server.v1.AutonpServerService.RejectOwnershipRequest:input_type -> server.v1.RejectOwnershipRequestRequest
	97,  // 106: server.v1.AutonpServerService.GetAllNamespaceOwnershipMappings:input_type -> server.v1.GetAllNamespaceOwnershipMappingsRequest
	103, // 107: server.v1.AutonpServerService.GetPoliciesAwaitingMyReview:input_type -> server.v1.GetPoliciesAwaitingMyReviewRequest
	106, // 108: server.v1.AutonpServerService.GetMyPendingReviewCount:input_type -> server.v1.GetMyPendingReviewCountRequest
	108, // 109: server.v1.AutonpServerService.SubmitPolicyReview:input_type -> server.v1.SubmitPolicyReviewRequest
	110, // 110: server.v1.AutonpServerService.GetPolicyReviewStatus:input_type -> server.v1.GetPolicyReviewStatusRequest
	114, // 111: server.v1.AutonpServerService.TriggerRiskAssessment:input_type -> server.v1.TriggerRiskAssessmentRequest
	116, // 112: server.v1.AutonpServerService.GetRiskAssessmentStatus:input_type -> server.v1.GetRiskAssessmentStatusRequest
	120, // 113: server.v1.AutonpServerService.ListRiskAssessments:input_type -> server.v1.ListRiskAssessmentsRequest
	142, // 114: server.v1.AutonpServerService.GetInventoryL7AccessLogs:input_type -> server.v1.GetInventoryL7AccessLogsRequest
	144, // 115: server.v1.AutonpServerService.GetInventoryClusterL7AccessLogs:input_type -> server.v1.GetInventoryClusterL7AccessLogsRequest
	140, // 116: server.v1.AutonpServerService.GetIndividualL7AccessLogsBetweenNamespaces:input_type -> server.v1.GetIndividualL7AccessLogsBetweenNamespacesRequest
	4,   // 117: server.v1.AutonpServerService.OnboardCluster:output_type -> server.v1.OnboardClusterResponse
	6,   // 118: server.v1.AutonpServerService.RenewClusterToken:output_type -> server.v1.RenewClusterTokenResponse
	8,   // 119: server.v1.AutonpServerService.GetNetworkPolicy:output_type -> server.v1.GetNetworkPolicyResponse
	10,  // 120: server.v1.AutonpServerService.GetExistingNetworkPolicy:output_type -> server.v1.GetExistingNetworkPolicyResponse
	12,  // 121: server.v1.AutonpServerService.ListNetworkPolicies:output_type -> server.v1.ListNetworkPoliciesResponse
	19,  // 122: server.v1.AutonpServerService.ListExistingNetworkPolicies:output_type -> server.v1.ListExistingNetworkPoliciesResponse
	125, // 123: server.v1.AutonpServerService.GetAuthorizationPolicy:output_type -> server.v1.GetAuthorizationPolicyResponse
	134, // 124: server.v1.AutonpServerService.GetExistingAuthorizationPolicy:output_type -> server.v1.GetExistingAuthorizationPolicyResponse
	127, // 125: server.v1.AutonpServerService.ListAuthorizationPolicies:output_type -> server.v1.ListAuthorizationPoliciesResponse
	136, // 126: server.v1.AutonpServerService.ListExistingAuthorizationPolicies:output_type -> server.v1.ListExistingAuthorizationPoliciesResponse
	22,  // 127: server.v1.AutonpServerService.ListClusters:output_type -> server.v1.ListClustersResponse
	27,  // 128: server.v1.AutonpServerService.Register:output_type -> server.v1.RegisterResponse
	29,  // 129: server.v1.AutonpServerService.Login:output_type -> server.v1.LoginResponse
	31,  // 130: server.v1.AutonpServerService.Logout:output_type -> server.v1.LogoutResponse
	33,  // 131: server.v1.AutonpServerService.ValidateSession:output_type -> server.v1.ValidateSessionResponse
	35,  // 132: server.v1.AutonpServerService.RefreshSession:output_type -> server.v1.RefreshSessionResponse
	37,  // 133: server.v1.AutonpServerService.CreateTenant:output_type -> server.v1.CreateTenantResponse
	39,  // 134: server.v1.AutonpServerService.GetTenant:output_type -> server.v1.GetTenantResponse
	41,  // 135: server.v1.AutonpServerService.UpdateTenant:output_type -> server.v1.UpdateTenantResponse
	43,  // 136: server.v1.AutonpServerService.LinkUserToTenant:output_type -> server.v1.LinkUserToTenantResponse
	45,  // 137: server.v1.AutonpServerService.GetPolicyCountForTenant:output_type -> server.v1.GetPolicyCountForTenantResponse
	47,  // 138: server.v1.AutonpServerService.GetUserCountForTenant:output_type -> server.v1.GetUserCountForTenantResponse
	24,  // 139: server.v1.AutonpServerService.GetClusterStats:output_type -> server.v1.GetClusterStatsResponse
	50,  // 140: server.v1.AutonpServerService.GetRecentPoliciesForTenant:output_type -> server.v1.GetRecentPoliciesForTenantResponse
	52,  // 141: server.v1.AutonpServerService.GetRecentAuthorizationPoliciesForTenant:output_type -> server.v1.GetRecentAuthorizationPoliciesForTenantResponse
	55,  // 142: server.v1.AutonpServerService.GetRecentClustersForTenant:output_type -> server.v1.GetRecentClustersForTenantResponse
	58,  // 143: server.v1.AutonpServerService.GetRecentUsersForTenant:output_type -> server.v1.GetRecentUsersForTenantResponse
	60,  // 144: server.v1.AutonpServerService.OffboardCluster:output_type -> server.v1.OffboardClusterResponse
	63,  // 145: server.v1.AutonpServerService.ListClusterSummaries:output_type -> server.v1.ListClusterSummariesResponse
	65,  // 146: server.v1.AutonpServerService.GetCurrentUser:output_type -> server.v1.GetCurrentUserResponse
	67,  // 147: server.v1.AutonpServerService.UpdateUserProfile:output_type -> server.v1.UpdateUserProfileResponse
	69,  // 148: server.v1.AutonpServerService.UpdateUserRole:output_type -> server.v1.UpdateUserRoleResponse
	71,  // 149: server.v1.AutonpServerService.ListTenantUsers:output_type -> server.v1.ListTenantUsersResponse
	74,  // 150: server.v1.AutonpServerService.InviteUser:output_type -> server.v1.InviteUserResponse
	76,  // 151: server.v1.AutonpServerService.RemoveUserFromOrg:output_type -> server.v1.RemoveUserFromOrgResponse
	78,  // 152: server.v1.AutonpServerService.ListInvitations:output_type -> server.v1.ListInvitationsResponse
	81,  // 153: server.v1.AutonpServerService.RevokeInvitation:output_type -> server.v1.RevokeInvitationResponse
	102, // 154: server.v1.AutonpServerService.ListMyNamespaces:output_type -> server.v1.ListMyNamespacesResponse
	83,  // 155: server.v1.AutonpServerService.AssignNamespaceOwner:output_type -> server.v1.AssignNamespaceOwnerResponse
	85,  // 156: server.v1.AutonpServerService.RemoveNamespaceOwner:output_type -> server.v1.RemoveNamespaceOwnerResponse
	87,  // 157: server.v1.AutonpServerService.GetNamespaceOwners:output_type -> server.v1.GetNamespaceOwnersResponse
	89,  // 158: server.v1.AutonpServerService.RequestNamespaceOwnership:output_type -> server.v1.RequestNamespaceOwnershipResponse
	91,  // 159: server.v1.AutonpServerService.ListNamespaceOwnershipRequests:output_type -> server.v1.ListNamespaceOwnershipRequestsResponse
	94,  // 160: server.v1.AutonpServerService.ApproveOwnershipRequest:output_type -> server.v1.ApproveOwnershipRequestResponse
	96,  // 161: server.v1.AutonpServerService.RejectOwnershipRequest:output_type -> server.v1.RejectOwnershipRequestResponse
	99,  // 162: server.v1.AutonpServerService.GetAllNamespaceOwnershipMappings:output_type -> server.v1.GetAllNamespaceOwnershipMappingsResponse
	105, // 163: server.v1.AutonpServerService.GetPoliciesAwaitingMyReview:output_type -> server.v1.GetPoliciesAwaitingMyReviewResponse
	107, // 164: server.v1.AutonpServerService.GetMyPendingReviewCount:output_type -> server.v1.GetMyPendingReviewCountResponse
	109, // 165: server.v1.AutonpServerService.SubmitPolicyReview:output_type -> server.v1.SubmitPolicyReviewResponse
	113, // 166: server.v1.AutonpServerService.GetPolicyReviewStatus:output_type -> server.v1.GetPolicyReviewStatusResponse
	115, // 167: server.v1.AutonpServerService.TriggerRiskAssessment:output_type -> server.v1.TriggerRiskAssessmentResponse
	119, // 168: server.v1.AutonpServerService.GetRiskAssessmentStatus:output_type -> server.v1.GetRiskAssessmentStatusResponse
	123, // 169: server.v1.AutonpServerService.ListRiskAssessments:output_type -> server.v1.ListRiskAssessmentsResponse
	143, // 170: server.v1.AutonpServerService.GetInventoryL7AccessLogs:output_type -> server.v1.GetInventoryL7AccessLogsResponse
	145, // 171: server.v1.AutonpServerService.GetInventoryClusterL7AccessLogs:output_type -> server.v1.GetInventoryClusterL7AccessLogsResponse
	141, // 172: server.v1.AutonpServerService.GetIndividualL7AccessLogsBetweenNamespaces:output_type -> server.v1.GetIndividualL7AccessLogsBetweenNamespacesResponse
	117, // [117:173] is the sub-list for method output_type
	61,  // [61:117] is the sub-list for method input_type
	61,  // [61:61] is the sub-list for extension type_name
	61,  // [61:61] is the sub-list for extension extendee
	0,   // [0:61] is the sub-list for field type_name
}

func init() { file_server_v1_server_proto_init() }
func file_server_v1_server_proto_init() {
	if File_server_v1_server_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_server_v1_server_proto_rawDesc), len(file_server_v1_server_proto_rawDesc)),
			NumEnums:      3,
			NumMessages:   143,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_server_v1_server_proto_goTypes,
		DependencyIndexes: file_server_v1_server_proto_depIdxs,
		EnumInfos:         file_server_v1_server_proto_enumTypes,
		MessageInfos:      file_server_v1_server_proto_msgTypes,
	}.Build()
	File_server_v1_server_proto = out.File
	file_server_v1_server_proto_goTypes = nil
	file_server_v1_server_proto_depIdxs = nil
}
