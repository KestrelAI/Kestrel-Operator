// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             (unknown)
// source: server/v1/server.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	AutonpServerService_OnboardCluster_FullMethodName                             = "/server.v1.AutonpServerService/OnboardCluster"
	AutonpServerService_RenewClusterToken_FullMethodName                          = "/server.v1.AutonpServerService/RenewClusterToken"
	AutonpServerService_GetNetworkPolicy_FullMethodName                           = "/server.v1.AutonpServerService/GetNetworkPolicy"
	AutonpServerService_GetExistingNetworkPolicy_FullMethodName                   = "/server.v1.AutonpServerService/GetExistingNetworkPolicy"
	AutonpServerService_ListNetworkPolicies_FullMethodName                        = "/server.v1.AutonpServerService/ListNetworkPolicies"
	AutonpServerService_ListExistingNetworkPolicies_FullMethodName                = "/server.v1.AutonpServerService/ListExistingNetworkPolicies"
	AutonpServerService_GetAuthorizationPolicy_FullMethodName                     = "/server.v1.AutonpServerService/GetAuthorizationPolicy"
	AutonpServerService_GetExistingAuthorizationPolicy_FullMethodName             = "/server.v1.AutonpServerService/GetExistingAuthorizationPolicy"
	AutonpServerService_ListAuthorizationPolicies_FullMethodName                  = "/server.v1.AutonpServerService/ListAuthorizationPolicies"
	AutonpServerService_ListExistingAuthorizationPolicies_FullMethodName          = "/server.v1.AutonpServerService/ListExistingAuthorizationPolicies"
	AutonpServerService_ListClusters_FullMethodName                               = "/server.v1.AutonpServerService/ListClusters"
	AutonpServerService_Register_FullMethodName                                   = "/server.v1.AutonpServerService/Register"
	AutonpServerService_Login_FullMethodName                                      = "/server.v1.AutonpServerService/Login"
	AutonpServerService_Logout_FullMethodName                                     = "/server.v1.AutonpServerService/Logout"
	AutonpServerService_ValidateSession_FullMethodName                            = "/server.v1.AutonpServerService/ValidateSession"
	AutonpServerService_RefreshSession_FullMethodName                             = "/server.v1.AutonpServerService/RefreshSession"
	AutonpServerService_CreateTenant_FullMethodName                               = "/server.v1.AutonpServerService/CreateTenant"
	AutonpServerService_GetTenant_FullMethodName                                  = "/server.v1.AutonpServerService/GetTenant"
	AutonpServerService_UpdateTenant_FullMethodName                               = "/server.v1.AutonpServerService/UpdateTenant"
	AutonpServerService_LinkUserToTenant_FullMethodName                           = "/server.v1.AutonpServerService/LinkUserToTenant"
	AutonpServerService_GetPolicyCountForTenant_FullMethodName                    = "/server.v1.AutonpServerService/GetPolicyCountForTenant"
	AutonpServerService_GetUserCountForTenant_FullMethodName                      = "/server.v1.AutonpServerService/GetUserCountForTenant"
	AutonpServerService_GetClusterStats_FullMethodName                            = "/server.v1.AutonpServerService/GetClusterStats"
	AutonpServerService_GetRecentPoliciesForTenant_FullMethodName                 = "/server.v1.AutonpServerService/GetRecentPoliciesForTenant"
	AutonpServerService_GetRecentAuthorizationPoliciesForTenant_FullMethodName    = "/server.v1.AutonpServerService/GetRecentAuthorizationPoliciesForTenant"
	AutonpServerService_GetRecentClustersForTenant_FullMethodName                 = "/server.v1.AutonpServerService/GetRecentClustersForTenant"
	AutonpServerService_GetRecentUsersForTenant_FullMethodName                    = "/server.v1.AutonpServerService/GetRecentUsersForTenant"
	AutonpServerService_OffboardCluster_FullMethodName                            = "/server.v1.AutonpServerService/OffboardCluster"
	AutonpServerService_ListClusterSummaries_FullMethodName                       = "/server.v1.AutonpServerService/ListClusterSummaries"
	AutonpServerService_GetCurrentUser_FullMethodName                             = "/server.v1.AutonpServerService/GetCurrentUser"
	AutonpServerService_UpdateUserProfile_FullMethodName                          = "/server.v1.AutonpServerService/UpdateUserProfile"
	AutonpServerService_UpdateUserRole_FullMethodName                             = "/server.v1.AutonpServerService/UpdateUserRole"
	AutonpServerService_ListTenantUsers_FullMethodName                            = "/server.v1.AutonpServerService/ListTenantUsers"
	AutonpServerService_InviteUser_FullMethodName                                 = "/server.v1.AutonpServerService/InviteUser"
	AutonpServerService_RemoveUserFromOrg_FullMethodName                          = "/server.v1.AutonpServerService/RemoveUserFromOrg"
	AutonpServerService_ListInvitations_FullMethodName                            = "/server.v1.AutonpServerService/ListInvitations"
	AutonpServerService_RevokeInvitation_FullMethodName                           = "/server.v1.AutonpServerService/RevokeInvitation"
	AutonpServerService_ListMyNamespaces_FullMethodName                           = "/server.v1.AutonpServerService/ListMyNamespaces"
	AutonpServerService_AssignNamespaceOwner_FullMethodName                       = "/server.v1.AutonpServerService/AssignNamespaceOwner"
	AutonpServerService_RemoveNamespaceOwner_FullMethodName                       = "/server.v1.AutonpServerService/RemoveNamespaceOwner"
	AutonpServerService_GetNamespaceOwners_FullMethodName                         = "/server.v1.AutonpServerService/GetNamespaceOwners"
	AutonpServerService_RequestNamespaceOwnership_FullMethodName                  = "/server.v1.AutonpServerService/RequestNamespaceOwnership"
	AutonpServerService_ListNamespaceOwnershipRequests_FullMethodName             = "/server.v1.AutonpServerService/ListNamespaceOwnershipRequests"
	AutonpServerService_ApproveOwnershipRequest_FullMethodName                    = "/server.v1.AutonpServerService/ApproveOwnershipRequest"
	AutonpServerService_RejectOwnershipRequest_FullMethodName                     = "/server.v1.AutonpServerService/RejectOwnershipRequest"
	AutonpServerService_GetAllNamespaceOwnershipMappings_FullMethodName           = "/server.v1.AutonpServerService/GetAllNamespaceOwnershipMappings"
	AutonpServerService_GetPoliciesAwaitingMyReview_FullMethodName                = "/server.v1.AutonpServerService/GetPoliciesAwaitingMyReview"
	AutonpServerService_GetMyPendingReviewCount_FullMethodName                    = "/server.v1.AutonpServerService/GetMyPendingReviewCount"
	AutonpServerService_SubmitPolicyReview_FullMethodName                         = "/server.v1.AutonpServerService/SubmitPolicyReview"
	AutonpServerService_GetPolicyReviewStatus_FullMethodName                      = "/server.v1.AutonpServerService/GetPolicyReviewStatus"
	AutonpServerService_TriggerRiskAssessment_FullMethodName                      = "/server.v1.AutonpServerService/TriggerRiskAssessment"
	AutonpServerService_GetRiskAssessmentStatus_FullMethodName                    = "/server.v1.AutonpServerService/GetRiskAssessmentStatus"
	AutonpServerService_ListRiskAssessments_FullMethodName                        = "/server.v1.AutonpServerService/ListRiskAssessments"
	AutonpServerService_GetInventoryL7AccessLogs_FullMethodName                   = "/server.v1.AutonpServerService/GetInventoryL7AccessLogs"
	AutonpServerService_GetInventoryClusterL7AccessLogs_FullMethodName            = "/server.v1.AutonpServerService/GetInventoryClusterL7AccessLogs"
	AutonpServerService_GetIndividualL7AccessLogsBetweenNamespaces_FullMethodName = "/server.v1.AutonpServerService/GetIndividualL7AccessLogsBetweenNamespaces"
)

// AutonpServerServiceClient is the client API for AutonpServerService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AutonpServerServiceClient interface {
	OnboardCluster(ctx context.Context, in *OnboardClusterRequest, opts ...grpc.CallOption) (*OnboardClusterResponse, error)
	RenewClusterToken(ctx context.Context, in *RenewClusterTokenRequest, opts ...grpc.CallOption) (*RenewClusterTokenResponse, error)
	GetNetworkPolicy(ctx context.Context, in *GetNetworkPolicyRequest, opts ...grpc.CallOption) (*GetNetworkPolicyResponse, error)
	GetExistingNetworkPolicy(ctx context.Context, in *GetExistingNetworkPolicyRequest, opts ...grpc.CallOption) (*GetExistingNetworkPolicyResponse, error)
	ListNetworkPolicies(ctx context.Context, in *ListNetworkPoliciesRequest, opts ...grpc.CallOption) (*ListNetworkPoliciesResponse, error)
	ListExistingNetworkPolicies(ctx context.Context, in *ListExistingNetworkPoliciesRequest, opts ...grpc.CallOption) (*ListExistingNetworkPoliciesResponse, error)
	GetAuthorizationPolicy(ctx context.Context, in *GetAuthorizationPolicyRequest, opts ...grpc.CallOption) (*GetAuthorizationPolicyResponse, error)
	GetExistingAuthorizationPolicy(ctx context.Context, in *GetExistingAuthorizationPolicyRequest, opts ...grpc.CallOption) (*GetExistingAuthorizationPolicyResponse, error)
	ListAuthorizationPolicies(ctx context.Context, in *ListAuthorizationPoliciesRequest, opts ...grpc.CallOption) (*ListAuthorizationPoliciesResponse, error)
	ListExistingAuthorizationPolicies(ctx context.Context, in *ListExistingAuthorizationPoliciesRequest, opts ...grpc.CallOption) (*ListExistingAuthorizationPoliciesResponse, error)
	ListClusters(ctx context.Context, in *ListClustersRequest, opts ...grpc.CallOption) (*ListClustersResponse, error)
	// User management
	Register(ctx context.Context, in *RegisterRequest, opts ...grpc.CallOption) (*RegisterResponse, error)
	Login(ctx context.Context, in *LoginRequest, opts ...grpc.CallOption) (*LoginResponse, error)
	Logout(ctx context.Context, in *LogoutRequest, opts ...grpc.CallOption) (*LogoutResponse, error)
	ValidateSession(ctx context.Context, in *ValidateSessionRequest, opts ...grpc.CallOption) (*ValidateSessionResponse, error)
	RefreshSession(ctx context.Context, in *RefreshSessionRequest, opts ...grpc.CallOption) (*RefreshSessionResponse, error)
	// Tenant management
	CreateTenant(ctx context.Context, in *CreateTenantRequest, opts ...grpc.CallOption) (*CreateTenantResponse, error)
	GetTenant(ctx context.Context, in *GetTenantRequest, opts ...grpc.CallOption) (*GetTenantResponse, error)
	UpdateTenant(ctx context.Context, in *UpdateTenantRequest, opts ...grpc.CallOption) (*UpdateTenantResponse, error)
	LinkUserToTenant(ctx context.Context, in *LinkUserToTenantRequest, opts ...grpc.CallOption) (*LinkUserToTenantResponse, error)
	// Stats for dashboard
	GetPolicyCountForTenant(ctx context.Context, in *GetPolicyCountForTenantRequest, opts ...grpc.CallOption) (*GetPolicyCountForTenantResponse, error)
	GetUserCountForTenant(ctx context.Context, in *GetUserCountForTenantRequest, opts ...grpc.CallOption) (*GetUserCountForTenantResponse, error)
	GetClusterStats(ctx context.Context, in *GetClusterStatsRequest, opts ...grpc.CallOption) (*GetClusterStatsResponse, error)
	// Recent activity for dashboard
	GetRecentPoliciesForTenant(ctx context.Context, in *GetRecentPoliciesForTenantRequest, opts ...grpc.CallOption) (*GetRecentPoliciesForTenantResponse, error)
	GetRecentAuthorizationPoliciesForTenant(ctx context.Context, in *GetRecentAuthorizationPoliciesForTenantRequest, opts ...grpc.CallOption) (*GetRecentAuthorizationPoliciesForTenantResponse, error)
	GetRecentClustersForTenant(ctx context.Context, in *GetRecentClustersForTenantRequest, opts ...grpc.CallOption) (*GetRecentClustersForTenantResponse, error)
	GetRecentUsersForTenant(ctx context.Context, in *GetRecentUsersForTenantRequest, opts ...grpc.CallOption) (*GetRecentUsersForTenantResponse, error)
	// Operator management
	OffboardCluster(ctx context.Context, in *OffboardClusterRequest, opts ...grpc.CallOption) (*OffboardClusterResponse, error)
	// New cluster summary management
	ListClusterSummaries(ctx context.Context, in *ListClusterSummariesRequest, opts ...grpc.CallOption) (*ListClusterSummariesResponse, error)
	// User management and RBAC
	GetCurrentUser(ctx context.Context, in *GetCurrentUserRequest, opts ...grpc.CallOption) (*GetCurrentUserResponse, error)
	UpdateUserProfile(ctx context.Context, in *UpdateUserProfileRequest, opts ...grpc.CallOption) (*UpdateUserProfileResponse, error)
	UpdateUserRole(ctx context.Context, in *UpdateUserRoleRequest, opts ...grpc.CallOption) (*UpdateUserRoleResponse, error)
	ListTenantUsers(ctx context.Context, in *ListTenantUsersRequest, opts ...grpc.CallOption) (*ListTenantUsersResponse, error)
	InviteUser(ctx context.Context, in *InviteUserRequest, opts ...grpc.CallOption) (*InviteUserResponse, error)
	RemoveUserFromOrg(ctx context.Context, in *RemoveUserFromOrgRequest, opts ...grpc.CallOption) (*RemoveUserFromOrgResponse, error)
	ListInvitations(ctx context.Context, in *ListInvitationsRequest, opts ...grpc.CallOption) (*ListInvitationsResponse, error)
	RevokeInvitation(ctx context.Context, in *RevokeInvitationRequest, opts ...grpc.CallOption) (*RevokeInvitationResponse, error)
	// Namespace Ownership
	ListMyNamespaces(ctx context.Context, in *ListMyNamespacesRequest, opts ...grpc.CallOption) (*ListMyNamespacesResponse, error)
	AssignNamespaceOwner(ctx context.Context, in *AssignNamespaceOwnerRequest, opts ...grpc.CallOption) (*AssignNamespaceOwnerResponse, error)
	RemoveNamespaceOwner(ctx context.Context, in *RemoveNamespaceOwnerRequest, opts ...grpc.CallOption) (*RemoveNamespaceOwnerResponse, error)
	GetNamespaceOwners(ctx context.Context, in *GetNamespaceOwnersRequest, opts ...grpc.CallOption) (*GetNamespaceOwnersResponse, error)
	RequestNamespaceOwnership(ctx context.Context, in *RequestNamespaceOwnershipRequest, opts ...grpc.CallOption) (*RequestNamespaceOwnershipResponse, error)
	ListNamespaceOwnershipRequests(ctx context.Context, in *ListNamespaceOwnershipRequestsRequest, opts ...grpc.CallOption) (*ListNamespaceOwnershipRequestsResponse, error)
	ApproveOwnershipRequest(ctx context.Context, in *ApproveOwnershipRequestRequest, opts ...grpc.CallOption) (*ApproveOwnershipRequestResponse, error)
	RejectOwnershipRequest(ctx context.Context, in *RejectOwnershipRequestRequest, opts ...grpc.CallOption) (*RejectOwnershipRequestResponse, error)
	GetAllNamespaceOwnershipMappings(ctx context.Context, in *GetAllNamespaceOwnershipMappingsRequest, opts ...grpc.CallOption) (*GetAllNamespaceOwnershipMappingsResponse, error)
	// Policy Review Management
	GetPoliciesAwaitingMyReview(ctx context.Context, in *GetPoliciesAwaitingMyReviewRequest, opts ...grpc.CallOption) (*GetPoliciesAwaitingMyReviewResponse, error)
	GetMyPendingReviewCount(ctx context.Context, in *GetMyPendingReviewCountRequest, opts ...grpc.CallOption) (*GetMyPendingReviewCountResponse, error)
	SubmitPolicyReview(ctx context.Context, in *SubmitPolicyReviewRequest, opts ...grpc.CallOption) (*SubmitPolicyReviewResponse, error)
	GetPolicyReviewStatus(ctx context.Context, in *GetPolicyReviewStatusRequest, opts ...grpc.CallOption) (*GetPolicyReviewStatusResponse, error)
	// Risk Assessment Management
	TriggerRiskAssessment(ctx context.Context, in *TriggerRiskAssessmentRequest, opts ...grpc.CallOption) (*TriggerRiskAssessmentResponse, error)
	GetRiskAssessmentStatus(ctx context.Context, in *GetRiskAssessmentStatusRequest, opts ...grpc.CallOption) (*GetRiskAssessmentStatusResponse, error)
	ListRiskAssessments(ctx context.Context, in *ListRiskAssessmentsRequest, opts ...grpc.CallOption) (*ListRiskAssessmentsResponse, error)
	// L7 Access Log APIs
	GetInventoryL7AccessLogs(ctx context.Context, in *GetInventoryL7AccessLogsRequest, opts ...grpc.CallOption) (*GetInventoryL7AccessLogsResponse, error)
	GetInventoryClusterL7AccessLogs(ctx context.Context, in *GetInventoryClusterL7AccessLogsRequest, opts ...grpc.CallOption) (*GetInventoryClusterL7AccessLogsResponse, error)
	GetIndividualL7AccessLogsBetweenNamespaces(ctx context.Context, in *GetIndividualL7AccessLogsBetweenNamespacesRequest, opts ...grpc.CallOption) (*GetIndividualL7AccessLogsBetweenNamespacesResponse, error)
}

type autonpServerServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewAutonpServerServiceClient(cc grpc.ClientConnInterface) AutonpServerServiceClient {
	return &autonpServerServiceClient{cc}
}

func (c *autonpServerServiceClient) OnboardCluster(ctx context.Context, in *OnboardClusterRequest, opts ...grpc.CallOption) (*OnboardClusterResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(OnboardClusterResponse)
	err := c.cc.Invoke(ctx, AutonpServerService_OnboardCluster_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *autonpServerServiceClient) RenewClusterToken(ctx context.Context, in *RenewClusterTokenRequest, opts ...grpc.CallOption) (*RenewClusterTokenResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RenewClusterTokenResponse)
	err := c.cc.Invoke(ctx, AutonpServerService_RenewClusterToken_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *autonpServerServiceClient) GetNetworkPolicy(ctx context.Context, in *GetNetworkPolicyRequest, opts ...grpc.CallOption) (*GetNetworkPolicyResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetNetworkPolicyResponse)
	err := c.cc.Invoke(ctx, AutonpServerService_GetNetworkPolicy_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *autonpServerServiceClient) GetExistingNetworkPolicy(ctx context.Context, in *GetExistingNetworkPolicyRequest, opts ...grpc.CallOption) (*GetExistingNetworkPolicyResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetExistingNetworkPolicyResponse)
	err := c.cc.Invoke(ctx, AutonpServerService_GetExistingNetworkPolicy_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *autonpServerServiceClient) ListNetworkPolicies(ctx context.Context, in *ListNetworkPoliciesRequest, opts ...grpc.CallOption) (*ListNetworkPoliciesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListNetworkPoliciesResponse)
	err := c.cc.Invoke(ctx, AutonpServerService_ListNetworkPolicies_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *autonpServerServiceClient) ListExistingNetworkPolicies(ctx context.Context, in *ListExistingNetworkPoliciesRequest, opts ...grpc.CallOption) (*ListExistingNetworkPoliciesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListExistingNetworkPoliciesResponse)
	err := c.cc.Invoke(ctx, AutonpServerService_ListExistingNetworkPolicies_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *autonpServerServiceClient) GetAuthorizationPolicy(ctx context.Context, in *GetAuthorizationPolicyRequest, opts ...grpc.CallOption) (*GetAuthorizationPolicyResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetAuthorizationPolicyResponse)
	err := c.cc.Invoke(ctx, AutonpServerService_GetAuthorizationPolicy_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *autonpServerServiceClient) GetExistingAuthorizationPolicy(ctx context.Context, in *GetExistingAuthorizationPolicyRequest, opts ...grpc.CallOption) (*GetExistingAuthorizationPolicyResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetExistingAuthorizationPolicyResponse)
	err := c.cc.Invoke(ctx, AutonpServerService_GetExistingAuthorizationPolicy_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *autonpServerServiceClient) ListAuthorizationPolicies(ctx context.Context, in *ListAuthorizationPoliciesRequest, opts ...grpc.CallOption) (*ListAuthorizationPoliciesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListAuthorizationPoliciesResponse)
	err := c.cc.Invoke(ctx, AutonpServerService_ListAuthorizationPolicies_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *autonpServerServiceClient) ListExistingAuthorizationPolicies(ctx context.Context, in *ListExistingAuthorizationPoliciesRequest, opts ...grpc.CallOption) (*ListExistingAuthorizationPoliciesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListExistingAuthorizationPoliciesResponse)
	err := c.cc.Invoke(ctx, AutonpServerService_ListExistingAuthorizationPolicies_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *autonpServerServiceClient) ListClusters(ctx context.Context, in *ListClustersRequest, opts ...grpc.CallOption) (*ListClustersResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListClustersResponse)
	err := c.cc.Invoke(ctx, AutonpServerService_ListClusters_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *autonpServerServiceClient) Register(ctx context.Context, in *RegisterRequest, opts ...grpc.CallOption) (*RegisterResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RegisterResponse)
	err := c.cc.Invoke(ctx, AutonpServerService_Register_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *autonpServerServiceClient) Login(ctx context.Context, in *LoginRequest, opts ...grpc.CallOption) (*LoginResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(LoginResponse)
	err := c.cc.Invoke(ctx, AutonpServerService_Login_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *autonpServerServiceClient) Logout(ctx context.Context, in *LogoutRequest, opts ...grpc.CallOption) (*LogoutResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(LogoutResponse)
	err := c.cc.Invoke(ctx, AutonpServerService_Logout_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *autonpServerServiceClient) ValidateSession(ctx context.Context, in *ValidateSessionRequest, opts ...grpc.CallOption) (*ValidateSessionResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ValidateSessionResponse)
	err := c.cc.Invoke(ctx, AutonpServerService_ValidateSession_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *autonpServerServiceClient) RefreshSession(ctx context.Context, in *RefreshSessionRequest, opts ...grpc.CallOption) (*RefreshSessionResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RefreshSessionResponse)
	err := c.cc.Invoke(ctx, AutonpServerService_RefreshSession_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *autonpServerServiceClient) CreateTenant(ctx context.Context, in *CreateTenantRequest, opts ...grpc.CallOption) (*CreateTenantResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateTenantResponse)
	err := c.cc.Invoke(ctx, AutonpServerService_CreateTenant_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *autonpServerServiceClient) GetTenant(ctx context.Context, in *GetTenantRequest, opts ...grpc.CallOption) (*GetTenantResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetTenantResponse)
	err := c.cc.Invoke(ctx, AutonpServerService_GetTenant_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *autonpServerServiceClient) UpdateTenant(ctx context.Context, in *UpdateTenantRequest, opts ...grpc.CallOption) (*UpdateTenantResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateTenantResponse)
	err := c.cc.Invoke(ctx, AutonpServerService_UpdateTenant_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *autonpServerServiceClient) LinkUserToTenant(ctx context.Context, in *LinkUserToTenantRequest, opts ...grpc.CallOption) (*LinkUserToTenantResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(LinkUserToTenantResponse)
	err := c.cc.Invoke(ctx, AutonpServerService_LinkUserToTenant_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *autonpServerServiceClient) GetPolicyCountForTenant(ctx context.Context, in *GetPolicyCountForTenantRequest, opts ...grpc.CallOption) (*GetPolicyCountForTenantResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetPolicyCountForTenantResponse)
	err := c.cc.Invoke(ctx, AutonpServerService_GetPolicyCountForTenant_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *autonpServerServiceClient) GetUserCountForTenant(ctx context.Context, in *GetUserCountForTenantRequest, opts ...grpc.CallOption) (*GetUserCountForTenantResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetUserCountForTenantResponse)
	err := c.cc.Invoke(ctx, AutonpServerService_GetUserCountForTenant_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *autonpServerServiceClient) GetClusterStats(ctx context.Context, in *GetClusterStatsRequest, opts ...grpc.CallOption) (*GetClusterStatsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetClusterStatsResponse)
	err := c.cc.Invoke(ctx, AutonpServerService_GetClusterStats_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *autonpServerServiceClient) GetRecentPoliciesForTenant(ctx context.Context, in *GetRecentPoliciesForTenantRequest, opts ...grpc.CallOption) (*GetRecentPoliciesForTenantResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetRecentPoliciesForTenantResponse)
	err := c.cc.Invoke(ctx, AutonpServerService_GetRecentPoliciesForTenant_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *autonpServerServiceClient) GetRecentAuthorizationPoliciesForTenant(ctx context.Context, in *GetRecentAuthorizationPoliciesForTenantRequest, opts ...grpc.CallOption) (*GetRecentAuthorizationPoliciesForTenantResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetRecentAuthorizationPoliciesForTenantResponse)
	err := c.cc.Invoke(ctx, AutonpServerService_GetRecentAuthorizationPoliciesForTenant_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *autonpServerServiceClient) GetRecentClustersForTenant(ctx context.Context, in *GetRecentClustersForTenantRequest, opts ...grpc.CallOption) (*GetRecentClustersForTenantResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetRecentClustersForTenantResponse)
	err := c.cc.Invoke(ctx, AutonpServerService_GetRecentClustersForTenant_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *autonpServerServiceClient) GetRecentUsersForTenant(ctx context.Context, in *GetRecentUsersForTenantRequest, opts ...grpc.CallOption) (*GetRecentUsersForTenantResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetRecentUsersForTenantResponse)
	err := c.cc.Invoke(ctx, AutonpServerService_GetRecentUsersForTenant_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *autonpServerServiceClient) OffboardCluster(ctx context.Context, in *OffboardClusterRequest, opts ...grpc.CallOption) (*OffboardClusterResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(OffboardClusterResponse)
	err := c.cc.Invoke(ctx, AutonpServerService_OffboardCluster_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *autonpServerServiceClient) ListClusterSummaries(ctx context.Context, in *ListClusterSummariesRequest, opts ...grpc.CallOption) (*ListClusterSummariesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListClusterSummariesResponse)
	err := c.cc.Invoke(ctx, AutonpServerService_ListClusterSummaries_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *autonpServerServiceClient) GetCurrentUser(ctx context.Context, in *GetCurrentUserRequest, opts ...grpc.CallOption) (*GetCurrentUserResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetCurrentUserResponse)
	err := c.cc.Invoke(ctx, AutonpServerService_GetCurrentUser_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *autonpServerServiceClient) UpdateUserProfile(ctx context.Context, in *UpdateUserProfileRequest, opts ...grpc.CallOption) (*UpdateUserProfileResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateUserProfileResponse)
	err := c.cc.Invoke(ctx, AutonpServerService_UpdateUserProfile_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *autonpServerServiceClient) UpdateUserRole(ctx context.Context, in *UpdateUserRoleRequest, opts ...grpc.CallOption) (*UpdateUserRoleResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateUserRoleResponse)
	err := c.cc.Invoke(ctx, AutonpServerService_UpdateUserRole_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *autonpServerServiceClient) ListTenantUsers(ctx context.Context, in *ListTenantUsersRequest, opts ...grpc.CallOption) (*ListTenantUsersResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListTenantUsersResponse)
	err := c.cc.Invoke(ctx, AutonpServerService_ListTenantUsers_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *autonpServerServiceClient) InviteUser(ctx context.Context, in *InviteUserRequest, opts ...grpc.CallOption) (*InviteUserResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(InviteUserResponse)
	err := c.cc.Invoke(ctx, AutonpServerService_InviteUser_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *autonpServerServiceClient) RemoveUserFromOrg(ctx context.Context, in *RemoveUserFromOrgRequest, opts ...grpc.CallOption) (*RemoveUserFromOrgResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RemoveUserFromOrgResponse)
	err := c.cc.Invoke(ctx, AutonpServerService_RemoveUserFromOrg_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *autonpServerServiceClient) ListInvitations(ctx context.Context, in *ListInvitationsRequest, opts ...grpc.CallOption) (*ListInvitationsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListInvitationsResponse)
	err := c.cc.Invoke(ctx, AutonpServerService_ListInvitations_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *autonpServerServiceClient) RevokeInvitation(ctx context.Context, in *RevokeInvitationRequest, opts ...grpc.CallOption) (*RevokeInvitationResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RevokeInvitationResponse)
	err := c.cc.Invoke(ctx, AutonpServerService_RevokeInvitation_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *autonpServerServiceClient) ListMyNamespaces(ctx context.Context, in *ListMyNamespacesRequest, opts ...grpc.CallOption) (*ListMyNamespacesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListMyNamespacesResponse)
	err := c.cc.Invoke(ctx, AutonpServerService_ListMyNamespaces_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *autonpServerServiceClient) AssignNamespaceOwner(ctx context.Context, in *AssignNamespaceOwnerRequest, opts ...grpc.CallOption) (*AssignNamespaceOwnerResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AssignNamespaceOwnerResponse)
	err := c.cc.Invoke(ctx, AutonpServerService_AssignNamespaceOwner_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *autonpServerServiceClient) RemoveNamespaceOwner(ctx context.Context, in *RemoveNamespaceOwnerRequest, opts ...grpc.CallOption) (*RemoveNamespaceOwnerResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RemoveNamespaceOwnerResponse)
	err := c.cc.Invoke(ctx, AutonpServerService_RemoveNamespaceOwner_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *autonpServerServiceClient) GetNamespaceOwners(ctx context.Context, in *GetNamespaceOwnersRequest, opts ...grpc.CallOption) (*GetNamespaceOwnersResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetNamespaceOwnersResponse)
	err := c.cc.Invoke(ctx, AutonpServerService_GetNamespaceOwners_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *autonpServerServiceClient) RequestNamespaceOwnership(ctx context.Context, in *RequestNamespaceOwnershipRequest, opts ...grpc.CallOption) (*RequestNamespaceOwnershipResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RequestNamespaceOwnershipResponse)
	err := c.cc.Invoke(ctx, AutonpServerService_RequestNamespaceOwnership_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *autonpServerServiceClient) ListNamespaceOwnershipRequests(ctx context.Context, in *ListNamespaceOwnershipRequestsRequest, opts ...grpc.CallOption) (*ListNamespaceOwnershipRequestsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListNamespaceOwnershipRequestsResponse)
	err := c.cc.Invoke(ctx, AutonpServerService_ListNamespaceOwnershipRequests_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *autonpServerServiceClient) ApproveOwnershipRequest(ctx context.Context, in *ApproveOwnershipRequestRequest, opts ...grpc.CallOption) (*ApproveOwnershipRequestResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ApproveOwnershipRequestResponse)
	err := c.cc.Invoke(ctx, AutonpServerService_ApproveOwnershipRequest_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *autonpServerServiceClient) RejectOwnershipRequest(ctx context.Context, in *RejectOwnershipRequestRequest, opts ...grpc.CallOption) (*RejectOwnershipRequestResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RejectOwnershipRequestResponse)
	err := c.cc.Invoke(ctx, AutonpServerService_RejectOwnershipRequest_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *autonpServerServiceClient) GetAllNamespaceOwnershipMappings(ctx context.Context, in *GetAllNamespaceOwnershipMappingsRequest, opts ...grpc.CallOption) (*GetAllNamespaceOwnershipMappingsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetAllNamespaceOwnershipMappingsResponse)
	err := c.cc.Invoke(ctx, AutonpServerService_GetAllNamespaceOwnershipMappings_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *autonpServerServiceClient) GetPoliciesAwaitingMyReview(ctx context.Context, in *GetPoliciesAwaitingMyReviewRequest, opts ...grpc.CallOption) (*GetPoliciesAwaitingMyReviewResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetPoliciesAwaitingMyReviewResponse)
	err := c.cc.Invoke(ctx, AutonpServerService_GetPoliciesAwaitingMyReview_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *autonpServerServiceClient) GetMyPendingReviewCount(ctx context.Context, in *GetMyPendingReviewCountRequest, opts ...grpc.CallOption) (*GetMyPendingReviewCountResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetMyPendingReviewCountResponse)
	err := c.cc.Invoke(ctx, AutonpServerService_GetMyPendingReviewCount_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *autonpServerServiceClient) SubmitPolicyReview(ctx context.Context, in *SubmitPolicyReviewRequest, opts ...grpc.CallOption) (*SubmitPolicyReviewResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SubmitPolicyReviewResponse)
	err := c.cc.Invoke(ctx, AutonpServerService_SubmitPolicyReview_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *autonpServerServiceClient) GetPolicyReviewStatus(ctx context.Context, in *GetPolicyReviewStatusRequest, opts ...grpc.CallOption) (*GetPolicyReviewStatusResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetPolicyReviewStatusResponse)
	err := c.cc.Invoke(ctx, AutonpServerService_GetPolicyReviewStatus_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *autonpServerServiceClient) TriggerRiskAssessment(ctx context.Context, in *TriggerRiskAssessmentRequest, opts ...grpc.CallOption) (*TriggerRiskAssessmentResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(TriggerRiskAssessmentResponse)
	err := c.cc.Invoke(ctx, AutonpServerService_TriggerRiskAssessment_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *autonpServerServiceClient) GetRiskAssessmentStatus(ctx context.Context, in *GetRiskAssessmentStatusRequest, opts ...grpc.CallOption) (*GetRiskAssessmentStatusResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetRiskAssessmentStatusResponse)
	err := c.cc.Invoke(ctx, AutonpServerService_GetRiskAssessmentStatus_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *autonpServerServiceClient) ListRiskAssessments(ctx context.Context, in *ListRiskAssessmentsRequest, opts ...grpc.CallOption) (*ListRiskAssessmentsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListRiskAssessmentsResponse)
	err := c.cc.Invoke(ctx, AutonpServerService_ListRiskAssessments_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *autonpServerServiceClient) GetInventoryL7AccessLogs(ctx context.Context, in *GetInventoryL7AccessLogsRequest, opts ...grpc.CallOption) (*GetInventoryL7AccessLogsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetInventoryL7AccessLogsResponse)
	err := c.cc.Invoke(ctx, AutonpServerService_GetInventoryL7AccessLogs_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *autonpServerServiceClient) GetInventoryClusterL7AccessLogs(ctx context.Context, in *GetInventoryClusterL7AccessLogsRequest, opts ...grpc.CallOption) (*GetInventoryClusterL7AccessLogsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetInventoryClusterL7AccessLogsResponse)
	err := c.cc.Invoke(ctx, AutonpServerService_GetInventoryClusterL7AccessLogs_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *autonpServerServiceClient) GetIndividualL7AccessLogsBetweenNamespaces(ctx context.Context, in *GetIndividualL7AccessLogsBetweenNamespacesRequest, opts ...grpc.CallOption) (*GetIndividualL7AccessLogsBetweenNamespacesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetIndividualL7AccessLogsBetweenNamespacesResponse)
	err := c.cc.Invoke(ctx, AutonpServerService_GetIndividualL7AccessLogsBetweenNamespaces_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AutonpServerServiceServer is the server API for AutonpServerService service.
// All implementations must embed UnimplementedAutonpServerServiceServer
// for forward compatibility.
type AutonpServerServiceServer interface {
	OnboardCluster(context.Context, *OnboardClusterRequest) (*OnboardClusterResponse, error)
	RenewClusterToken(context.Context, *RenewClusterTokenRequest) (*RenewClusterTokenResponse, error)
	GetNetworkPolicy(context.Context, *GetNetworkPolicyRequest) (*GetNetworkPolicyResponse, error)
	GetExistingNetworkPolicy(context.Context, *GetExistingNetworkPolicyRequest) (*GetExistingNetworkPolicyResponse, error)
	ListNetworkPolicies(context.Context, *ListNetworkPoliciesRequest) (*ListNetworkPoliciesResponse, error)
	ListExistingNetworkPolicies(context.Context, *ListExistingNetworkPoliciesRequest) (*ListExistingNetworkPoliciesResponse, error)
	GetAuthorizationPolicy(context.Context, *GetAuthorizationPolicyRequest) (*GetAuthorizationPolicyResponse, error)
	GetExistingAuthorizationPolicy(context.Context, *GetExistingAuthorizationPolicyRequest) (*GetExistingAuthorizationPolicyResponse, error)
	ListAuthorizationPolicies(context.Context, *ListAuthorizationPoliciesRequest) (*ListAuthorizationPoliciesResponse, error)
	ListExistingAuthorizationPolicies(context.Context, *ListExistingAuthorizationPoliciesRequest) (*ListExistingAuthorizationPoliciesResponse, error)
	ListClusters(context.Context, *ListClustersRequest) (*ListClustersResponse, error)
	// User management
	Register(context.Context, *RegisterRequest) (*RegisterResponse, error)
	Login(context.Context, *LoginRequest) (*LoginResponse, error)
	Logout(context.Context, *LogoutRequest) (*LogoutResponse, error)
	ValidateSession(context.Context, *ValidateSessionRequest) (*ValidateSessionResponse, error)
	RefreshSession(context.Context, *RefreshSessionRequest) (*RefreshSessionResponse, error)
	// Tenant management
	CreateTenant(context.Context, *CreateTenantRequest) (*CreateTenantResponse, error)
	GetTenant(context.Context, *GetTenantRequest) (*GetTenantResponse, error)
	UpdateTenant(context.Context, *UpdateTenantRequest) (*UpdateTenantResponse, error)
	LinkUserToTenant(context.Context, *LinkUserToTenantRequest) (*LinkUserToTenantResponse, error)
	// Stats for dashboard
	GetPolicyCountForTenant(context.Context, *GetPolicyCountForTenantRequest) (*GetPolicyCountForTenantResponse, error)
	GetUserCountForTenant(context.Context, *GetUserCountForTenantRequest) (*GetUserCountForTenantResponse, error)
	GetClusterStats(context.Context, *GetClusterStatsRequest) (*GetClusterStatsResponse, error)
	// Recent activity for dashboard
	GetRecentPoliciesForTenant(context.Context, *GetRecentPoliciesForTenantRequest) (*GetRecentPoliciesForTenantResponse, error)
	GetRecentAuthorizationPoliciesForTenant(context.Context, *GetRecentAuthorizationPoliciesForTenantRequest) (*GetRecentAuthorizationPoliciesForTenantResponse, error)
	GetRecentClustersForTenant(context.Context, *GetRecentClustersForTenantRequest) (*GetRecentClustersForTenantResponse, error)
	GetRecentUsersForTenant(context.Context, *GetRecentUsersForTenantRequest) (*GetRecentUsersForTenantResponse, error)
	// Operator management
	OffboardCluster(context.Context, *OffboardClusterRequest) (*OffboardClusterResponse, error)
	// New cluster summary management
	ListClusterSummaries(context.Context, *ListClusterSummariesRequest) (*ListClusterSummariesResponse, error)
	// User management and RBAC
	GetCurrentUser(context.Context, *GetCurrentUserRequest) (*GetCurrentUserResponse, error)
	UpdateUserProfile(context.Context, *UpdateUserProfileRequest) (*UpdateUserProfileResponse, error)
	UpdateUserRole(context.Context, *UpdateUserRoleRequest) (*UpdateUserRoleResponse, error)
	ListTenantUsers(context.Context, *ListTenantUsersRequest) (*ListTenantUsersResponse, error)
	InviteUser(context.Context, *InviteUserRequest) (*InviteUserResponse, error)
	RemoveUserFromOrg(context.Context, *RemoveUserFromOrgRequest) (*RemoveUserFromOrgResponse, error)
	ListInvitations(context.Context, *ListInvitationsRequest) (*ListInvitationsResponse, error)
	RevokeInvitation(context.Context, *RevokeInvitationRequest) (*RevokeInvitationResponse, error)
	// Namespace Ownership
	ListMyNamespaces(context.Context, *ListMyNamespacesRequest) (*ListMyNamespacesResponse, error)
	AssignNamespaceOwner(context.Context, *AssignNamespaceOwnerRequest) (*AssignNamespaceOwnerResponse, error)
	RemoveNamespaceOwner(context.Context, *RemoveNamespaceOwnerRequest) (*RemoveNamespaceOwnerResponse, error)
	GetNamespaceOwners(context.Context, *GetNamespaceOwnersRequest) (*GetNamespaceOwnersResponse, error)
	RequestNamespaceOwnership(context.Context, *RequestNamespaceOwnershipRequest) (*RequestNamespaceOwnershipResponse, error)
	ListNamespaceOwnershipRequests(context.Context, *ListNamespaceOwnershipRequestsRequest) (*ListNamespaceOwnershipRequestsResponse, error)
	ApproveOwnershipRequest(context.Context, *ApproveOwnershipRequestRequest) (*ApproveOwnershipRequestResponse, error)
	RejectOwnershipRequest(context.Context, *RejectOwnershipRequestRequest) (*RejectOwnershipRequestResponse, error)
	GetAllNamespaceOwnershipMappings(context.Context, *GetAllNamespaceOwnershipMappingsRequest) (*GetAllNamespaceOwnershipMappingsResponse, error)
	// Policy Review Management
	GetPoliciesAwaitingMyReview(context.Context, *GetPoliciesAwaitingMyReviewRequest) (*GetPoliciesAwaitingMyReviewResponse, error)
	GetMyPendingReviewCount(context.Context, *GetMyPendingReviewCountRequest) (*GetMyPendingReviewCountResponse, error)
	SubmitPolicyReview(context.Context, *SubmitPolicyReviewRequest) (*SubmitPolicyReviewResponse, error)
	GetPolicyReviewStatus(context.Context, *GetPolicyReviewStatusRequest) (*GetPolicyReviewStatusResponse, error)
	// Risk Assessment Management
	TriggerRiskAssessment(context.Context, *TriggerRiskAssessmentRequest) (*TriggerRiskAssessmentResponse, error)
	GetRiskAssessmentStatus(context.Context, *GetRiskAssessmentStatusRequest) (*GetRiskAssessmentStatusResponse, error)
	ListRiskAssessments(context.Context, *ListRiskAssessmentsRequest) (*ListRiskAssessmentsResponse, error)
	// L7 Access Log APIs
	GetInventoryL7AccessLogs(context.Context, *GetInventoryL7AccessLogsRequest) (*GetInventoryL7AccessLogsResponse, error)
	GetInventoryClusterL7AccessLogs(context.Context, *GetInventoryClusterL7AccessLogsRequest) (*GetInventoryClusterL7AccessLogsResponse, error)
	GetIndividualL7AccessLogsBetweenNamespaces(context.Context, *GetIndividualL7AccessLogsBetweenNamespacesRequest) (*GetIndividualL7AccessLogsBetweenNamespacesResponse, error)
	mustEmbedUnimplementedAutonpServerServiceServer()
}

// UnimplementedAutonpServerServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedAutonpServerServiceServer struct{}

func (UnimplementedAutonpServerServiceServer) OnboardCluster(context.Context, *OnboardClusterRequest) (*OnboardClusterResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method OnboardCluster not implemented")
}
func (UnimplementedAutonpServerServiceServer) RenewClusterToken(context.Context, *RenewClusterTokenRequest) (*RenewClusterTokenResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RenewClusterToken not implemented")
}
func (UnimplementedAutonpServerServiceServer) GetNetworkPolicy(context.Context, *GetNetworkPolicyRequest) (*GetNetworkPolicyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetNetworkPolicy not implemented")
}
func (UnimplementedAutonpServerServiceServer) GetExistingNetworkPolicy(context.Context, *GetExistingNetworkPolicyRequest) (*GetExistingNetworkPolicyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetExistingNetworkPolicy not implemented")
}
func (UnimplementedAutonpServerServiceServer) ListNetworkPolicies(context.Context, *ListNetworkPoliciesRequest) (*ListNetworkPoliciesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListNetworkPolicies not implemented")
}
func (UnimplementedAutonpServerServiceServer) ListExistingNetworkPolicies(context.Context, *ListExistingNetworkPoliciesRequest) (*ListExistingNetworkPoliciesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListExistingNetworkPolicies not implemented")
}
func (UnimplementedAutonpServerServiceServer) GetAuthorizationPolicy(context.Context, *GetAuthorizationPolicyRequest) (*GetAuthorizationPolicyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAuthorizationPolicy not implemented")
}
func (UnimplementedAutonpServerServiceServer) GetExistingAuthorizationPolicy(context.Context, *GetExistingAuthorizationPolicyRequest) (*GetExistingAuthorizationPolicyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetExistingAuthorizationPolicy not implemented")
}
func (UnimplementedAutonpServerServiceServer) ListAuthorizationPolicies(context.Context, *ListAuthorizationPoliciesRequest) (*ListAuthorizationPoliciesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListAuthorizationPolicies not implemented")
}
func (UnimplementedAutonpServerServiceServer) ListExistingAuthorizationPolicies(context.Context, *ListExistingAuthorizationPoliciesRequest) (*ListExistingAuthorizationPoliciesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListExistingAuthorizationPolicies not implemented")
}
func (UnimplementedAutonpServerServiceServer) ListClusters(context.Context, *ListClustersRequest) (*ListClustersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListClusters not implemented")
}
func (UnimplementedAutonpServerServiceServer) Register(context.Context, *RegisterRequest) (*RegisterResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Register not implemented")
}
func (UnimplementedAutonpServerServiceServer) Login(context.Context, *LoginRequest) (*LoginResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Login not implemented")
}
func (UnimplementedAutonpServerServiceServer) Logout(context.Context, *LogoutRequest) (*LogoutResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Logout not implemented")
}
func (UnimplementedAutonpServerServiceServer) ValidateSession(context.Context, *ValidateSessionRequest) (*ValidateSessionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ValidateSession not implemented")
}
func (UnimplementedAutonpServerServiceServer) RefreshSession(context.Context, *RefreshSessionRequest) (*RefreshSessionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RefreshSession not implemented")
}
func (UnimplementedAutonpServerServiceServer) CreateTenant(context.Context, *CreateTenantRequest) (*CreateTenantResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateTenant not implemented")
}
func (UnimplementedAutonpServerServiceServer) GetTenant(context.Context, *GetTenantRequest) (*GetTenantResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTenant not implemented")
}
func (UnimplementedAutonpServerServiceServer) UpdateTenant(context.Context, *UpdateTenantRequest) (*UpdateTenantResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateTenant not implemented")
}
func (UnimplementedAutonpServerServiceServer) LinkUserToTenant(context.Context, *LinkUserToTenantRequest) (*LinkUserToTenantResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LinkUserToTenant not implemented")
}
func (UnimplementedAutonpServerServiceServer) GetPolicyCountForTenant(context.Context, *GetPolicyCountForTenantRequest) (*GetPolicyCountForTenantResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPolicyCountForTenant not implemented")
}
func (UnimplementedAutonpServerServiceServer) GetUserCountForTenant(context.Context, *GetUserCountForTenantRequest) (*GetUserCountForTenantResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserCountForTenant not implemented")
}
func (UnimplementedAutonpServerServiceServer) GetClusterStats(context.Context, *GetClusterStatsRequest) (*GetClusterStatsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetClusterStats not implemented")
}
func (UnimplementedAutonpServerServiceServer) GetRecentPoliciesForTenant(context.Context, *GetRecentPoliciesForTenantRequest) (*GetRecentPoliciesForTenantResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRecentPoliciesForTenant not implemented")
}
func (UnimplementedAutonpServerServiceServer) GetRecentAuthorizationPoliciesForTenant(context.Context, *GetRecentAuthorizationPoliciesForTenantRequest) (*GetRecentAuthorizationPoliciesForTenantResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRecentAuthorizationPoliciesForTenant not implemented")
}
func (UnimplementedAutonpServerServiceServer) GetRecentClustersForTenant(context.Context, *GetRecentClustersForTenantRequest) (*GetRecentClustersForTenantResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRecentClustersForTenant not implemented")
}
func (UnimplementedAutonpServerServiceServer) GetRecentUsersForTenant(context.Context, *GetRecentUsersForTenantRequest) (*GetRecentUsersForTenantResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRecentUsersForTenant not implemented")
}
func (UnimplementedAutonpServerServiceServer) OffboardCluster(context.Context, *OffboardClusterRequest) (*OffboardClusterResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method OffboardCluster not implemented")
}
func (UnimplementedAutonpServerServiceServer) ListClusterSummaries(context.Context, *ListClusterSummariesRequest) (*ListClusterSummariesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListClusterSummaries not implemented")
}
func (UnimplementedAutonpServerServiceServer) GetCurrentUser(context.Context, *GetCurrentUserRequest) (*GetCurrentUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCurrentUser not implemented")
}
func (UnimplementedAutonpServerServiceServer) UpdateUserProfile(context.Context, *UpdateUserProfileRequest) (*UpdateUserProfileResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateUserProfile not implemented")
}
func (UnimplementedAutonpServerServiceServer) UpdateUserRole(context.Context, *UpdateUserRoleRequest) (*UpdateUserRoleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateUserRole not implemented")
}
func (UnimplementedAutonpServerServiceServer) ListTenantUsers(context.Context, *ListTenantUsersRequest) (*ListTenantUsersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListTenantUsers not implemented")
}
func (UnimplementedAutonpServerServiceServer) InviteUser(context.Context, *InviteUserRequest) (*InviteUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method InviteUser not implemented")
}
func (UnimplementedAutonpServerServiceServer) RemoveUserFromOrg(context.Context, *RemoveUserFromOrgRequest) (*RemoveUserFromOrgResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveUserFromOrg not implemented")
}
func (UnimplementedAutonpServerServiceServer) ListInvitations(context.Context, *ListInvitationsRequest) (*ListInvitationsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListInvitations not implemented")
}
func (UnimplementedAutonpServerServiceServer) RevokeInvitation(context.Context, *RevokeInvitationRequest) (*RevokeInvitationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RevokeInvitation not implemented")
}
func (UnimplementedAutonpServerServiceServer) ListMyNamespaces(context.Context, *ListMyNamespacesRequest) (*ListMyNamespacesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListMyNamespaces not implemented")
}
func (UnimplementedAutonpServerServiceServer) AssignNamespaceOwner(context.Context, *AssignNamespaceOwnerRequest) (*AssignNamespaceOwnerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AssignNamespaceOwner not implemented")
}
func (UnimplementedAutonpServerServiceServer) RemoveNamespaceOwner(context.Context, *RemoveNamespaceOwnerRequest) (*RemoveNamespaceOwnerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveNamespaceOwner not implemented")
}
func (UnimplementedAutonpServerServiceServer) GetNamespaceOwners(context.Context, *GetNamespaceOwnersRequest) (*GetNamespaceOwnersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetNamespaceOwners not implemented")
}
func (UnimplementedAutonpServerServiceServer) RequestNamespaceOwnership(context.Context, *RequestNamespaceOwnershipRequest) (*RequestNamespaceOwnershipResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RequestNamespaceOwnership not implemented")
}
func (UnimplementedAutonpServerServiceServer) ListNamespaceOwnershipRequests(context.Context, *ListNamespaceOwnershipRequestsRequest) (*ListNamespaceOwnershipRequestsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListNamespaceOwnershipRequests not implemented")
}
func (UnimplementedAutonpServerServiceServer) ApproveOwnershipRequest(context.Context, *ApproveOwnershipRequestRequest) (*ApproveOwnershipRequestResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ApproveOwnershipRequest not implemented")
}
func (UnimplementedAutonpServerServiceServer) RejectOwnershipRequest(context.Context, *RejectOwnershipRequestRequest) (*RejectOwnershipRequestResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RejectOwnershipRequest not implemented")
}
func (UnimplementedAutonpServerServiceServer) GetAllNamespaceOwnershipMappings(context.Context, *GetAllNamespaceOwnershipMappingsRequest) (*GetAllNamespaceOwnershipMappingsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllNamespaceOwnershipMappings not implemented")
}
func (UnimplementedAutonpServerServiceServer) GetPoliciesAwaitingMyReview(context.Context, *GetPoliciesAwaitingMyReviewRequest) (*GetPoliciesAwaitingMyReviewResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPoliciesAwaitingMyReview not implemented")
}
func (UnimplementedAutonpServerServiceServer) GetMyPendingReviewCount(context.Context, *GetMyPendingReviewCountRequest) (*GetMyPendingReviewCountResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMyPendingReviewCount not implemented")
}
func (UnimplementedAutonpServerServiceServer) SubmitPolicyReview(context.Context, *SubmitPolicyReviewRequest) (*SubmitPolicyReviewResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SubmitPolicyReview not implemented")
}
func (UnimplementedAutonpServerServiceServer) GetPolicyReviewStatus(context.Context, *GetPolicyReviewStatusRequest) (*GetPolicyReviewStatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPolicyReviewStatus not implemented")
}
func (UnimplementedAutonpServerServiceServer) TriggerRiskAssessment(context.Context, *TriggerRiskAssessmentRequest) (*TriggerRiskAssessmentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TriggerRiskAssessment not implemented")
}
func (UnimplementedAutonpServerServiceServer) GetRiskAssessmentStatus(context.Context, *GetRiskAssessmentStatusRequest) (*GetRiskAssessmentStatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRiskAssessmentStatus not implemented")
}
func (UnimplementedAutonpServerServiceServer) ListRiskAssessments(context.Context, *ListRiskAssessmentsRequest) (*ListRiskAssessmentsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListRiskAssessments not implemented")
}
func (UnimplementedAutonpServerServiceServer) GetInventoryL7AccessLogs(context.Context, *GetInventoryL7AccessLogsRequest) (*GetInventoryL7AccessLogsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetInventoryL7AccessLogs not implemented")
}
func (UnimplementedAutonpServerServiceServer) GetInventoryClusterL7AccessLogs(context.Context, *GetInventoryClusterL7AccessLogsRequest) (*GetInventoryClusterL7AccessLogsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetInventoryClusterL7AccessLogs not implemented")
}
func (UnimplementedAutonpServerServiceServer) GetIndividualL7AccessLogsBetweenNamespaces(context.Context, *GetIndividualL7AccessLogsBetweenNamespacesRequest) (*GetIndividualL7AccessLogsBetweenNamespacesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetIndividualL7AccessLogsBetweenNamespaces not implemented")
}
func (UnimplementedAutonpServerServiceServer) mustEmbedUnimplementedAutonpServerServiceServer() {}
func (UnimplementedAutonpServerServiceServer) testEmbeddedByValue()                             {}

// UnsafeAutonpServerServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AutonpServerServiceServer will
// result in compilation errors.
type UnsafeAutonpServerServiceServer interface {
	mustEmbedUnimplementedAutonpServerServiceServer()
}

func RegisterAutonpServerServiceServer(s grpc.ServiceRegistrar, srv AutonpServerServiceServer) {
	// If the following call pancis, it indicates UnimplementedAutonpServerServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&AutonpServerService_ServiceDesc, srv)
}

func _AutonpServerService_OnboardCluster_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OnboardClusterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AutonpServerServiceServer).OnboardCluster(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AutonpServerService_OnboardCluster_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AutonpServerServiceServer).OnboardCluster(ctx, req.(*OnboardClusterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AutonpServerService_RenewClusterToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RenewClusterTokenRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AutonpServerServiceServer).RenewClusterToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AutonpServerService_RenewClusterToken_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AutonpServerServiceServer).RenewClusterToken(ctx, req.(*RenewClusterTokenRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AutonpServerService_GetNetworkPolicy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetNetworkPolicyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AutonpServerServiceServer).GetNetworkPolicy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AutonpServerService_GetNetworkPolicy_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AutonpServerServiceServer).GetNetworkPolicy(ctx, req.(*GetNetworkPolicyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AutonpServerService_GetExistingNetworkPolicy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetExistingNetworkPolicyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AutonpServerServiceServer).GetExistingNetworkPolicy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AutonpServerService_GetExistingNetworkPolicy_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AutonpServerServiceServer).GetExistingNetworkPolicy(ctx, req.(*GetExistingNetworkPolicyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AutonpServerService_ListNetworkPolicies_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListNetworkPoliciesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AutonpServerServiceServer).ListNetworkPolicies(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AutonpServerService_ListNetworkPolicies_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AutonpServerServiceServer).ListNetworkPolicies(ctx, req.(*ListNetworkPoliciesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AutonpServerService_ListExistingNetworkPolicies_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListExistingNetworkPoliciesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AutonpServerServiceServer).ListExistingNetworkPolicies(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AutonpServerService_ListExistingNetworkPolicies_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AutonpServerServiceServer).ListExistingNetworkPolicies(ctx, req.(*ListExistingNetworkPoliciesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AutonpServerService_GetAuthorizationPolicy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAuthorizationPolicyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AutonpServerServiceServer).GetAuthorizationPolicy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AutonpServerService_GetAuthorizationPolicy_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AutonpServerServiceServer).GetAuthorizationPolicy(ctx, req.(*GetAuthorizationPolicyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AutonpServerService_GetExistingAuthorizationPolicy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetExistingAuthorizationPolicyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AutonpServerServiceServer).GetExistingAuthorizationPolicy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AutonpServerService_GetExistingAuthorizationPolicy_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AutonpServerServiceServer).GetExistingAuthorizationPolicy(ctx, req.(*GetExistingAuthorizationPolicyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AutonpServerService_ListAuthorizationPolicies_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListAuthorizationPoliciesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AutonpServerServiceServer).ListAuthorizationPolicies(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AutonpServerService_ListAuthorizationPolicies_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AutonpServerServiceServer).ListAuthorizationPolicies(ctx, req.(*ListAuthorizationPoliciesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AutonpServerService_ListExistingAuthorizationPolicies_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListExistingAuthorizationPoliciesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AutonpServerServiceServer).ListExistingAuthorizationPolicies(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AutonpServerService_ListExistingAuthorizationPolicies_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AutonpServerServiceServer).ListExistingAuthorizationPolicies(ctx, req.(*ListExistingAuthorizationPoliciesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AutonpServerService_ListClusters_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListClustersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AutonpServerServiceServer).ListClusters(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AutonpServerService_ListClusters_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AutonpServerServiceServer).ListClusters(ctx, req.(*ListClustersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AutonpServerService_Register_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RegisterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AutonpServerServiceServer).Register(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AutonpServerService_Register_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AutonpServerServiceServer).Register(ctx, req.(*RegisterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AutonpServerService_Login_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LoginRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AutonpServerServiceServer).Login(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AutonpServerService_Login_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AutonpServerServiceServer).Login(ctx, req.(*LoginRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AutonpServerService_Logout_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LogoutRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AutonpServerServiceServer).Logout(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AutonpServerService_Logout_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AutonpServerServiceServer).Logout(ctx, req.(*LogoutRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AutonpServerService_ValidateSession_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ValidateSessionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AutonpServerServiceServer).ValidateSession(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AutonpServerService_ValidateSession_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AutonpServerServiceServer).ValidateSession(ctx, req.(*ValidateSessionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AutonpServerService_RefreshSession_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RefreshSessionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AutonpServerServiceServer).RefreshSession(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AutonpServerService_RefreshSession_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AutonpServerServiceServer).RefreshSession(ctx, req.(*RefreshSessionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AutonpServerService_CreateTenant_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateTenantRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AutonpServerServiceServer).CreateTenant(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AutonpServerService_CreateTenant_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AutonpServerServiceServer).CreateTenant(ctx, req.(*CreateTenantRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AutonpServerService_GetTenant_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTenantRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AutonpServerServiceServer).GetTenant(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AutonpServerService_GetTenant_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AutonpServerServiceServer).GetTenant(ctx, req.(*GetTenantRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AutonpServerService_UpdateTenant_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateTenantRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AutonpServerServiceServer).UpdateTenant(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AutonpServerService_UpdateTenant_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AutonpServerServiceServer).UpdateTenant(ctx, req.(*UpdateTenantRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AutonpServerService_LinkUserToTenant_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LinkUserToTenantRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AutonpServerServiceServer).LinkUserToTenant(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AutonpServerService_LinkUserToTenant_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AutonpServerServiceServer).LinkUserToTenant(ctx, req.(*LinkUserToTenantRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AutonpServerService_GetPolicyCountForTenant_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPolicyCountForTenantRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AutonpServerServiceServer).GetPolicyCountForTenant(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AutonpServerService_GetPolicyCountForTenant_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AutonpServerServiceServer).GetPolicyCountForTenant(ctx, req.(*GetPolicyCountForTenantRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AutonpServerService_GetUserCountForTenant_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserCountForTenantRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AutonpServerServiceServer).GetUserCountForTenant(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AutonpServerService_GetUserCountForTenant_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AutonpServerServiceServer).GetUserCountForTenant(ctx, req.(*GetUserCountForTenantRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AutonpServerService_GetClusterStats_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetClusterStatsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AutonpServerServiceServer).GetClusterStats(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AutonpServerService_GetClusterStats_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AutonpServerServiceServer).GetClusterStats(ctx, req.(*GetClusterStatsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AutonpServerService_GetRecentPoliciesForTenant_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRecentPoliciesForTenantRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AutonpServerServiceServer).GetRecentPoliciesForTenant(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AutonpServerService_GetRecentPoliciesForTenant_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AutonpServerServiceServer).GetRecentPoliciesForTenant(ctx, req.(*GetRecentPoliciesForTenantRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AutonpServerService_GetRecentAuthorizationPoliciesForTenant_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRecentAuthorizationPoliciesForTenantRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AutonpServerServiceServer).GetRecentAuthorizationPoliciesForTenant(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AutonpServerService_GetRecentAuthorizationPoliciesForTenant_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AutonpServerServiceServer).GetRecentAuthorizationPoliciesForTenant(ctx, req.(*GetRecentAuthorizationPoliciesForTenantRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AutonpServerService_GetRecentClustersForTenant_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRecentClustersForTenantRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AutonpServerServiceServer).GetRecentClustersForTenant(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AutonpServerService_GetRecentClustersForTenant_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AutonpServerServiceServer).GetRecentClustersForTenant(ctx, req.(*GetRecentClustersForTenantRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AutonpServerService_GetRecentUsersForTenant_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRecentUsersForTenantRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AutonpServerServiceServer).GetRecentUsersForTenant(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AutonpServerService_GetRecentUsersForTenant_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AutonpServerServiceServer).GetRecentUsersForTenant(ctx, req.(*GetRecentUsersForTenantRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AutonpServerService_OffboardCluster_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OffboardClusterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AutonpServerServiceServer).OffboardCluster(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AutonpServerService_OffboardCluster_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AutonpServerServiceServer).OffboardCluster(ctx, req.(*OffboardClusterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AutonpServerService_ListClusterSummaries_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListClusterSummariesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AutonpServerServiceServer).ListClusterSummaries(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AutonpServerService_ListClusterSummaries_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AutonpServerServiceServer).ListClusterSummaries(ctx, req.(*ListClusterSummariesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AutonpServerService_GetCurrentUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCurrentUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AutonpServerServiceServer).GetCurrentUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AutonpServerService_GetCurrentUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AutonpServerServiceServer).GetCurrentUser(ctx, req.(*GetCurrentUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AutonpServerService_UpdateUserProfile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateUserProfileRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AutonpServerServiceServer).UpdateUserProfile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AutonpServerService_UpdateUserProfile_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AutonpServerServiceServer).UpdateUserProfile(ctx, req.(*UpdateUserProfileRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AutonpServerService_UpdateUserRole_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateUserRoleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AutonpServerServiceServer).UpdateUserRole(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AutonpServerService_UpdateUserRole_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AutonpServerServiceServer).UpdateUserRole(ctx, req.(*UpdateUserRoleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AutonpServerService_ListTenantUsers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListTenantUsersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AutonpServerServiceServer).ListTenantUsers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AutonpServerService_ListTenantUsers_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AutonpServerServiceServer).ListTenantUsers(ctx, req.(*ListTenantUsersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AutonpServerService_InviteUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InviteUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AutonpServerServiceServer).InviteUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AutonpServerService_InviteUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AutonpServerServiceServer).InviteUser(ctx, req.(*InviteUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AutonpServerService_RemoveUserFromOrg_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveUserFromOrgRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AutonpServerServiceServer).RemoveUserFromOrg(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AutonpServerService_RemoveUserFromOrg_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AutonpServerServiceServer).RemoveUserFromOrg(ctx, req.(*RemoveUserFromOrgRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AutonpServerService_ListInvitations_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListInvitationsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AutonpServerServiceServer).ListInvitations(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AutonpServerService_ListInvitations_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AutonpServerServiceServer).ListInvitations(ctx, req.(*ListInvitationsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AutonpServerService_RevokeInvitation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RevokeInvitationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AutonpServerServiceServer).RevokeInvitation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AutonpServerService_RevokeInvitation_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AutonpServerServiceServer).RevokeInvitation(ctx, req.(*RevokeInvitationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AutonpServerService_ListMyNamespaces_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListMyNamespacesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AutonpServerServiceServer).ListMyNamespaces(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AutonpServerService_ListMyNamespaces_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AutonpServerServiceServer).ListMyNamespaces(ctx, req.(*ListMyNamespacesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AutonpServerService_AssignNamespaceOwner_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AssignNamespaceOwnerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AutonpServerServiceServer).AssignNamespaceOwner(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AutonpServerService_AssignNamespaceOwner_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AutonpServerServiceServer).AssignNamespaceOwner(ctx, req.(*AssignNamespaceOwnerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AutonpServerService_RemoveNamespaceOwner_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveNamespaceOwnerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AutonpServerServiceServer).RemoveNamespaceOwner(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AutonpServerService_RemoveNamespaceOwner_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AutonpServerServiceServer).RemoveNamespaceOwner(ctx, req.(*RemoveNamespaceOwnerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AutonpServerService_GetNamespaceOwners_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetNamespaceOwnersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AutonpServerServiceServer).GetNamespaceOwners(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AutonpServerService_GetNamespaceOwners_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AutonpServerServiceServer).GetNamespaceOwners(ctx, req.(*GetNamespaceOwnersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AutonpServerService_RequestNamespaceOwnership_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestNamespaceOwnershipRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AutonpServerServiceServer).RequestNamespaceOwnership(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AutonpServerService_RequestNamespaceOwnership_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AutonpServerServiceServer).RequestNamespaceOwnership(ctx, req.(*RequestNamespaceOwnershipRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AutonpServerService_ListNamespaceOwnershipRequests_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListNamespaceOwnershipRequestsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AutonpServerServiceServer).ListNamespaceOwnershipRequests(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AutonpServerService_ListNamespaceOwnershipRequests_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AutonpServerServiceServer).ListNamespaceOwnershipRequests(ctx, req.(*ListNamespaceOwnershipRequestsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AutonpServerService_ApproveOwnershipRequest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ApproveOwnershipRequestRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AutonpServerServiceServer).ApproveOwnershipRequest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AutonpServerService_ApproveOwnershipRequest_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AutonpServerServiceServer).ApproveOwnershipRequest(ctx, req.(*ApproveOwnershipRequestRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AutonpServerService_RejectOwnershipRequest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RejectOwnershipRequestRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AutonpServerServiceServer).RejectOwnershipRequest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AutonpServerService_RejectOwnershipRequest_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AutonpServerServiceServer).RejectOwnershipRequest(ctx, req.(*RejectOwnershipRequestRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AutonpServerService_GetAllNamespaceOwnershipMappings_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAllNamespaceOwnershipMappingsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AutonpServerServiceServer).GetAllNamespaceOwnershipMappings(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AutonpServerService_GetAllNamespaceOwnershipMappings_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AutonpServerServiceServer).GetAllNamespaceOwnershipMappings(ctx, req.(*GetAllNamespaceOwnershipMappingsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AutonpServerService_GetPoliciesAwaitingMyReview_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPoliciesAwaitingMyReviewRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AutonpServerServiceServer).GetPoliciesAwaitingMyReview(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AutonpServerService_GetPoliciesAwaitingMyReview_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AutonpServerServiceServer).GetPoliciesAwaitingMyReview(ctx, req.(*GetPoliciesAwaitingMyReviewRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AutonpServerService_GetMyPendingReviewCount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetMyPendingReviewCountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AutonpServerServiceServer).GetMyPendingReviewCount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AutonpServerService_GetMyPendingReviewCount_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AutonpServerServiceServer).GetMyPendingReviewCount(ctx, req.(*GetMyPendingReviewCountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AutonpServerService_SubmitPolicyReview_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SubmitPolicyReviewRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AutonpServerServiceServer).SubmitPolicyReview(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AutonpServerService_SubmitPolicyReview_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AutonpServerServiceServer).SubmitPolicyReview(ctx, req.(*SubmitPolicyReviewRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AutonpServerService_GetPolicyReviewStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPolicyReviewStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AutonpServerServiceServer).GetPolicyReviewStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AutonpServerService_GetPolicyReviewStatus_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AutonpServerServiceServer).GetPolicyReviewStatus(ctx, req.(*GetPolicyReviewStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AutonpServerService_TriggerRiskAssessment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TriggerRiskAssessmentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AutonpServerServiceServer).TriggerRiskAssessment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AutonpServerService_TriggerRiskAssessment_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AutonpServerServiceServer).TriggerRiskAssessment(ctx, req.(*TriggerRiskAssessmentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AutonpServerService_GetRiskAssessmentStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRiskAssessmentStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AutonpServerServiceServer).GetRiskAssessmentStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AutonpServerService_GetRiskAssessmentStatus_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AutonpServerServiceServer).GetRiskAssessmentStatus(ctx, req.(*GetRiskAssessmentStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AutonpServerService_ListRiskAssessments_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListRiskAssessmentsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AutonpServerServiceServer).ListRiskAssessments(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AutonpServerService_ListRiskAssessments_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AutonpServerServiceServer).ListRiskAssessments(ctx, req.(*ListRiskAssessmentsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AutonpServerService_GetInventoryL7AccessLogs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetInventoryL7AccessLogsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AutonpServerServiceServer).GetInventoryL7AccessLogs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AutonpServerService_GetInventoryL7AccessLogs_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AutonpServerServiceServer).GetInventoryL7AccessLogs(ctx, req.(*GetInventoryL7AccessLogsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AutonpServerService_GetInventoryClusterL7AccessLogs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetInventoryClusterL7AccessLogsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AutonpServerServiceServer).GetInventoryClusterL7AccessLogs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AutonpServerService_GetInventoryClusterL7AccessLogs_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AutonpServerServiceServer).GetInventoryClusterL7AccessLogs(ctx, req.(*GetInventoryClusterL7AccessLogsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AutonpServerService_GetIndividualL7AccessLogsBetweenNamespaces_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetIndividualL7AccessLogsBetweenNamespacesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AutonpServerServiceServer).GetIndividualL7AccessLogsBetweenNamespaces(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AutonpServerService_GetIndividualL7AccessLogsBetweenNamespaces_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AutonpServerServiceServer).GetIndividualL7AccessLogsBetweenNamespaces(ctx, req.(*GetIndividualL7AccessLogsBetweenNamespacesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// AutonpServerService_ServiceDesc is the grpc.ServiceDesc for AutonpServerService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var AutonpServerService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "server.v1.AutonpServerService",
	HandlerType: (*AutonpServerServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "OnboardCluster",
			Handler:    _AutonpServerService_OnboardCluster_Handler,
		},
		{
			MethodName: "RenewClusterToken",
			Handler:    _AutonpServerService_RenewClusterToken_Handler,
		},
		{
			MethodName: "GetNetworkPolicy",
			Handler:    _AutonpServerService_GetNetworkPolicy_Handler,
		},
		{
			MethodName: "GetExistingNetworkPolicy",
			Handler:    _AutonpServerService_GetExistingNetworkPolicy_Handler,
		},
		{
			MethodName: "ListNetworkPolicies",
			Handler:    _AutonpServerService_ListNetworkPolicies_Handler,
		},
		{
			MethodName: "ListExistingNetworkPolicies",
			Handler:    _AutonpServerService_ListExistingNetworkPolicies_Handler,
		},
		{
			MethodName: "GetAuthorizationPolicy",
			Handler:    _AutonpServerService_GetAuthorizationPolicy_Handler,
		},
		{
			MethodName: "GetExistingAuthorizationPolicy",
			Handler:    _AutonpServerService_GetExistingAuthorizationPolicy_Handler,
		},
		{
			MethodName: "ListAuthorizationPolicies",
			Handler:    _AutonpServerService_ListAuthorizationPolicies_Handler,
		},
		{
			MethodName: "ListExistingAuthorizationPolicies",
			Handler:    _AutonpServerService_ListExistingAuthorizationPolicies_Handler,
		},
		{
			MethodName: "ListClusters",
			Handler:    _AutonpServerService_ListClusters_Handler,
		},
		{
			MethodName: "Register",
			Handler:    _AutonpServerService_Register_Handler,
		},
		{
			MethodName: "Login",
			Handler:    _AutonpServerService_Login_Handler,
		},
		{
			MethodName: "Logout",
			Handler:    _AutonpServerService_Logout_Handler,
		},
		{
			MethodName: "ValidateSession",
			Handler:    _AutonpServerService_ValidateSession_Handler,
		},
		{
			MethodName: "RefreshSession",
			Handler:    _AutonpServerService_RefreshSession_Handler,
		},
		{
			MethodName: "CreateTenant",
			Handler:    _AutonpServerService_CreateTenant_Handler,
		},
		{
			MethodName: "GetTenant",
			Handler:    _AutonpServerService_GetTenant_Handler,
		},
		{
			MethodName: "UpdateTenant",
			Handler:    _AutonpServerService_UpdateTenant_Handler,
		},
		{
			MethodName: "LinkUserToTenant",
			Handler:    _AutonpServerService_LinkUserToTenant_Handler,
		},
		{
			MethodName: "GetPolicyCountForTenant",
			Handler:    _AutonpServerService_GetPolicyCountForTenant_Handler,
		},
		{
			MethodName: "GetUserCountForTenant",
			Handler:    _AutonpServerService_GetUserCountForTenant_Handler,
		},
		{
			MethodName: "GetClusterStats",
			Handler:    _AutonpServerService_GetClusterStats_Handler,
		},
		{
			MethodName: "GetRecentPoliciesForTenant",
			Handler:    _AutonpServerService_GetRecentPoliciesForTenant_Handler,
		},
		{
			MethodName: "GetRecentAuthorizationPoliciesForTenant",
			Handler:    _AutonpServerService_GetRecentAuthorizationPoliciesForTenant_Handler,
		},
		{
			MethodName: "GetRecentClustersForTenant",
			Handler:    _AutonpServerService_GetRecentClustersForTenant_Handler,
		},
		{
			MethodName: "GetRecentUsersForTenant",
			Handler:    _AutonpServerService_GetRecentUsersForTenant_Handler,
		},
		{
			MethodName: "OffboardCluster",
			Handler:    _AutonpServerService_OffboardCluster_Handler,
		},
		{
			MethodName: "ListClusterSummaries",
			Handler:    _AutonpServerService_ListClusterSummaries_Handler,
		},
		{
			MethodName: "GetCurrentUser",
			Handler:    _AutonpServerService_GetCurrentUser_Handler,
		},
		{
			MethodName: "UpdateUserProfile",
			Handler:    _AutonpServerService_UpdateUserProfile_Handler,
		},
		{
			MethodName: "UpdateUserRole",
			Handler:    _AutonpServerService_UpdateUserRole_Handler,
		},
		{
			MethodName: "ListTenantUsers",
			Handler:    _AutonpServerService_ListTenantUsers_Handler,
		},
		{
			MethodName: "InviteUser",
			Handler:    _AutonpServerService_InviteUser_Handler,
		},
		{
			MethodName: "RemoveUserFromOrg",
			Handler:    _AutonpServerService_RemoveUserFromOrg_Handler,
		},
		{
			MethodName: "ListInvitations",
			Handler:    _AutonpServerService_ListInvitations_Handler,
		},
		{
			MethodName: "RevokeInvitation",
			Handler:    _AutonpServerService_RevokeInvitation_Handler,
		},
		{
			MethodName: "ListMyNamespaces",
			Handler:    _AutonpServerService_ListMyNamespaces_Handler,
		},
		{
			MethodName: "AssignNamespaceOwner",
			Handler:    _AutonpServerService_AssignNamespaceOwner_Handler,
		},
		{
			MethodName: "RemoveNamespaceOwner",
			Handler:    _AutonpServerService_RemoveNamespaceOwner_Handler,
		},
		{
			MethodName: "GetNamespaceOwners",
			Handler:    _AutonpServerService_GetNamespaceOwners_Handler,
		},
		{
			MethodName: "RequestNamespaceOwnership",
			Handler:    _AutonpServerService_RequestNamespaceOwnership_Handler,
		},
		{
			MethodName: "ListNamespaceOwnershipRequests",
			Handler:    _AutonpServerService_ListNamespaceOwnershipRequests_Handler,
		},
		{
			MethodName: "ApproveOwnershipRequest",
			Handler:    _AutonpServerService_ApproveOwnershipRequest_Handler,
		},
		{
			MethodName: "RejectOwnershipRequest",
			Handler:    _AutonpServerService_RejectOwnershipRequest_Handler,
		},
		{
			MethodName: "GetAllNamespaceOwnershipMappings",
			Handler:    _AutonpServerService_GetAllNamespaceOwnershipMappings_Handler,
		},
		{
			MethodName: "GetPoliciesAwaitingMyReview",
			Handler:    _AutonpServerService_GetPoliciesAwaitingMyReview_Handler,
		},
		{
			MethodName: "GetMyPendingReviewCount",
			Handler:    _AutonpServerService_GetMyPendingReviewCount_Handler,
		},
		{
			MethodName: "SubmitPolicyReview",
			Handler:    _AutonpServerService_SubmitPolicyReview_Handler,
		},
		{
			MethodName: "GetPolicyReviewStatus",
			Handler:    _AutonpServerService_GetPolicyReviewStatus_Handler,
		},
		{
			MethodName: "TriggerRiskAssessment",
			Handler:    _AutonpServerService_TriggerRiskAssessment_Handler,
		},
		{
			MethodName: "GetRiskAssessmentStatus",
			Handler:    _AutonpServerService_GetRiskAssessmentStatus_Handler,
		},
		{
			MethodName: "ListRiskAssessments",
			Handler:    _AutonpServerService_ListRiskAssessments_Handler,
		},
		{
			MethodName: "GetInventoryL7AccessLogs",
			Handler:    _AutonpServerService_GetInventoryL7AccessLogs_Handler,
		},
		{
			MethodName: "GetInventoryClusterL7AccessLogs",
			Handler:    _AutonpServerService_GetInventoryClusterL7AccessLogs_Handler,
		},
		{
			MethodName: "GetIndividualL7AccessLogsBetweenNamespaces",
			Handler:    _AutonpServerService_GetIndividualL7AccessLogsBetweenNamespaces_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "server/v1/server.proto",
}
