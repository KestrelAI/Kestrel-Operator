// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.5
// 	protoc        (unknown)
// source: cloud/v1/message.proto

package v1

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Action types for resource operations
type Action int32

const (
	Action_ACTION_UNSPECIFIED Action = 0
	Action_ACTION_CREATE      Action = 1
	Action_ACTION_UPDATE      Action = 2
	Action_ACTION_DELETE      Action = 3
)

// Enum value maps for Action.
var (
	Action_name = map[int32]string{
		0: "ACTION_UNSPECIFIED",
		1: "ACTION_CREATE",
		2: "ACTION_UPDATE",
		3: "ACTION_DELETE",
	}
	Action_value = map[string]int32{
		"ACTION_UNSPECIFIED": 0,
		"ACTION_CREATE":      1,
		"ACTION_UPDATE":      2,
		"ACTION_DELETE":      3,
	}
)

func (x Action) Enum() *Action {
	p := new(Action)
	*p = x
	return p
}

func (x Action) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Action) Descriptor() protoreflect.EnumDescriptor {
	return file_cloud_v1_message_proto_enumTypes[0].Descriptor()
}

func (Action) Type() protoreflect.EnumType {
	return &file_cloud_v1_message_proto_enumTypes[0]
}

func (x Action) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Action.Descriptor instead.
func (Action) EnumDescriptor() ([]byte, []int) {
	return file_cloud_v1_message_proto_rawDescGZIP(), []int{0}
}

// L7 protocol types
type L7ProtocolType int32

const (
	L7ProtocolType_L7_PROTOCOL_UNKNOWN L7ProtocolType = 0
	L7ProtocolType_L7_PROTOCOL_HTTP    L7ProtocolType = 1
	L7ProtocolType_L7_PROTOCOL_TCP     L7ProtocolType = 2
	L7ProtocolType_L7_PROTOCOL_GRPC    L7ProtocolType = 3
)

// Enum value maps for L7ProtocolType.
var (
	L7ProtocolType_name = map[int32]string{
		0: "L7_PROTOCOL_UNKNOWN",
		1: "L7_PROTOCOL_HTTP",
		2: "L7_PROTOCOL_TCP",
		3: "L7_PROTOCOL_GRPC",
	}
	L7ProtocolType_value = map[string]int32{
		"L7_PROTOCOL_UNKNOWN": 0,
		"L7_PROTOCOL_HTTP":    1,
		"L7_PROTOCOL_TCP":     2,
		"L7_PROTOCOL_GRPC":    3,
	}
)

func (x L7ProtocolType) Enum() *L7ProtocolType {
	p := new(L7ProtocolType)
	*p = x
	return p
}

func (x L7ProtocolType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (L7ProtocolType) Descriptor() protoreflect.EnumDescriptor {
	return file_cloud_v1_message_proto_enumTypes[1].Descriptor()
}

func (L7ProtocolType) Type() protoreflect.EnumType {
	return &file_cloud_v1_message_proto_enumTypes[1]
}

func (x L7ProtocolType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use L7ProtocolType.Descriptor instead.
func (L7ProtocolType) EnumDescriptor() ([]byte, []int) {
	return file_cloud_v1_message_proto_rawDescGZIP(), []int{1}
}

// Authorization Policy action
type AuthorizationPolicyAction int32

const (
	AuthorizationPolicyAction_AUTHORIZATION_POLICY_ACTION_UNSPECIFIED AuthorizationPolicyAction = 0
	AuthorizationPolicyAction_AUTHORIZATION_POLICY_ACTION_ALLOW       AuthorizationPolicyAction = 1
	AuthorizationPolicyAction_AUTHORIZATION_POLICY_ACTION_DENY        AuthorizationPolicyAction = 2
	AuthorizationPolicyAction_AUTHORIZATION_POLICY_ACTION_AUDIT       AuthorizationPolicyAction = 3
	AuthorizationPolicyAction_AUTHORIZATION_POLICY_ACTION_CUSTOM      AuthorizationPolicyAction = 4
)

// Enum value maps for AuthorizationPolicyAction.
var (
	AuthorizationPolicyAction_name = map[int32]string{
		0: "AUTHORIZATION_POLICY_ACTION_UNSPECIFIED",
		1: "AUTHORIZATION_POLICY_ACTION_ALLOW",
		2: "AUTHORIZATION_POLICY_ACTION_DENY",
		3: "AUTHORIZATION_POLICY_ACTION_AUDIT",
		4: "AUTHORIZATION_POLICY_ACTION_CUSTOM",
	}
	AuthorizationPolicyAction_value = map[string]int32{
		"AUTHORIZATION_POLICY_ACTION_UNSPECIFIED": 0,
		"AUTHORIZATION_POLICY_ACTION_ALLOW":       1,
		"AUTHORIZATION_POLICY_ACTION_DENY":        2,
		"AUTHORIZATION_POLICY_ACTION_AUDIT":       3,
		"AUTHORIZATION_POLICY_ACTION_CUSTOM":      4,
	}
)

func (x AuthorizationPolicyAction) Enum() *AuthorizationPolicyAction {
	p := new(AuthorizationPolicyAction)
	*p = x
	return p
}

func (x AuthorizationPolicyAction) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (AuthorizationPolicyAction) Descriptor() protoreflect.EnumDescriptor {
	return file_cloud_v1_message_proto_enumTypes[2].Descriptor()
}

func (AuthorizationPolicyAction) Type() protoreflect.EnumType {
	return &file_cloud_v1_message_proto_enumTypes[2]
}

func (x AuthorizationPolicyAction) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use AuthorizationPolicyAction.Descriptor instead.
func (AuthorizationPolicyAction) EnumDescriptor() ([]byte, []int) {
	return file_cloud_v1_message_proto_rawDescGZIP(), []int{2}
}

// Request message for flow stream
type StreamDataRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Types that are valid to be assigned to Request:
	//
	//	*StreamDataRequest_Flow
	//	*StreamDataRequest_NetworkPolicy
	//	*StreamDataRequest_NetworkPolicyWithErrors
	//	*StreamDataRequest_Workload
	//	*StreamDataRequest_Namespace
	//	*StreamDataRequest_InventoryCommit
	//	*StreamDataRequest_KubernetesApiResponse
	//	*StreamDataRequest_Service
	//	*StreamDataRequest_ShellCommandResponse
	//	*StreamDataRequest_L7AccessLog
	//	*StreamDataRequest_AuthorizationPolicy
	//	*StreamDataRequest_YamlDryRunResponse
	Request       isStreamDataRequest_Request `protobuf_oneof:"request"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *StreamDataRequest) Reset() {
	*x = StreamDataRequest{}
	mi := &file_cloud_v1_message_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *StreamDataRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StreamDataRequest) ProtoMessage() {}

func (x *StreamDataRequest) ProtoReflect() protoreflect.Message {
	mi := &file_cloud_v1_message_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StreamDataRequest.ProtoReflect.Descriptor instead.
func (*StreamDataRequest) Descriptor() ([]byte, []int) {
	return file_cloud_v1_message_proto_rawDescGZIP(), []int{0}
}

func (x *StreamDataRequest) GetRequest() isStreamDataRequest_Request {
	if x != nil {
		return x.Request
	}
	return nil
}

func (x *StreamDataRequest) GetFlow() *Flow {
	if x != nil {
		if x, ok := x.Request.(*StreamDataRequest_Flow); ok {
			return x.Flow
		}
	}
	return nil
}

func (x *StreamDataRequest) GetNetworkPolicy() *NetworkPolicy {
	if x != nil {
		if x, ok := x.Request.(*StreamDataRequest_NetworkPolicy); ok {
			return x.NetworkPolicy
		}
	}
	return nil
}

func (x *StreamDataRequest) GetNetworkPolicyWithErrors() *NetworkPoliciesWithErrors {
	if x != nil {
		if x, ok := x.Request.(*StreamDataRequest_NetworkPolicyWithErrors); ok {
			return x.NetworkPolicyWithErrors
		}
	}
	return nil
}

func (x *StreamDataRequest) GetWorkload() *Workload {
	if x != nil {
		if x, ok := x.Request.(*StreamDataRequest_Workload); ok {
			return x.Workload
		}
	}
	return nil
}

func (x *StreamDataRequest) GetNamespace() *Namespace {
	if x != nil {
		if x, ok := x.Request.(*StreamDataRequest_Namespace); ok {
			return x.Namespace
		}
	}
	return nil
}

func (x *StreamDataRequest) GetInventoryCommit() *InventoryCommit {
	if x != nil {
		if x, ok := x.Request.(*StreamDataRequest_InventoryCommit); ok {
			return x.InventoryCommit
		}
	}
	return nil
}

func (x *StreamDataRequest) GetKubernetesApiResponse() *KubernetesAPIResponse {
	if x != nil {
		if x, ok := x.Request.(*StreamDataRequest_KubernetesApiResponse); ok {
			return x.KubernetesApiResponse
		}
	}
	return nil
}

func (x *StreamDataRequest) GetService() *Service {
	if x != nil {
		if x, ok := x.Request.(*StreamDataRequest_Service); ok {
			return x.Service
		}
	}
	return nil
}

func (x *StreamDataRequest) GetShellCommandResponse() *ShellCommandResponse {
	if x != nil {
		if x, ok := x.Request.(*StreamDataRequest_ShellCommandResponse); ok {
			return x.ShellCommandResponse
		}
	}
	return nil
}

func (x *StreamDataRequest) GetL7AccessLog() *L7AccessLog {
	if x != nil {
		if x, ok := x.Request.(*StreamDataRequest_L7AccessLog); ok {
			return x.L7AccessLog
		}
	}
	return nil
}

func (x *StreamDataRequest) GetAuthorizationPolicy() *AuthorizationPolicy {
	if x != nil {
		if x, ok := x.Request.(*StreamDataRequest_AuthorizationPolicy); ok {
			return x.AuthorizationPolicy
		}
	}
	return nil
}

func (x *StreamDataRequest) GetYamlDryRunResponse() *YamlDryRunResponse {
	if x != nil {
		if x, ok := x.Request.(*StreamDataRequest_YamlDryRunResponse); ok {
			return x.YamlDryRunResponse
		}
	}
	return nil
}

type isStreamDataRequest_Request interface {
	isStreamDataRequest_Request()
}

type StreamDataRequest_Flow struct {
	Flow *Flow `protobuf:"bytes,1,opt,name=flow,proto3,oneof"`
}

type StreamDataRequest_NetworkPolicy struct {
	NetworkPolicy *NetworkPolicy `protobuf:"bytes,2,opt,name=network_policy,json=networkPolicy,proto3,oneof"`
}

type StreamDataRequest_NetworkPolicyWithErrors struct {
	NetworkPolicyWithErrors *NetworkPoliciesWithErrors `protobuf:"bytes,3,opt,name=network_policy_with_errors,json=networkPolicyWithErrors,proto3,oneof"`
}

type StreamDataRequest_Workload struct {
	Workload *Workload `protobuf:"bytes,4,opt,name=workload,proto3,oneof"`
}

type StreamDataRequest_Namespace struct {
	Namespace *Namespace `protobuf:"bytes,5,opt,name=namespace,proto3,oneof"`
}

type StreamDataRequest_InventoryCommit struct {
	InventoryCommit *InventoryCommit `protobuf:"bytes,6,opt,name=inventory_commit,json=inventoryCommit,proto3,oneof"`
}

type StreamDataRequest_KubernetesApiResponse struct {
	KubernetesApiResponse *KubernetesAPIResponse `protobuf:"bytes,7,opt,name=kubernetes_api_response,json=kubernetesApiResponse,proto3,oneof"`
}

type StreamDataRequest_Service struct {
	Service *Service `protobuf:"bytes,8,opt,name=service,proto3,oneof"`
}

type StreamDataRequest_ShellCommandResponse struct {
	ShellCommandResponse *ShellCommandResponse `protobuf:"bytes,9,opt,name=shell_command_response,json=shellCommandResponse,proto3,oneof"`
}

type StreamDataRequest_L7AccessLog struct {
	L7AccessLog *L7AccessLog `protobuf:"bytes,10,opt,name=l7_access_log,json=l7AccessLog,proto3,oneof"`
}

type StreamDataRequest_AuthorizationPolicy struct {
	AuthorizationPolicy *AuthorizationPolicy `protobuf:"bytes,11,opt,name=authorization_policy,json=authorizationPolicy,proto3,oneof"`
}

type StreamDataRequest_YamlDryRunResponse struct {
	YamlDryRunResponse *YamlDryRunResponse `protobuf:"bytes,12,opt,name=yaml_dry_run_response,json=yamlDryRunResponse,proto3,oneof"`
}

func (*StreamDataRequest_Flow) isStreamDataRequest_Request() {}

func (*StreamDataRequest_NetworkPolicy) isStreamDataRequest_Request() {}

func (*StreamDataRequest_NetworkPolicyWithErrors) isStreamDataRequest_Request() {}

func (*StreamDataRequest_Workload) isStreamDataRequest_Request() {}

func (*StreamDataRequest_Namespace) isStreamDataRequest_Request() {}

func (*StreamDataRequest_InventoryCommit) isStreamDataRequest_Request() {}

func (*StreamDataRequest_KubernetesApiResponse) isStreamDataRequest_Request() {}

func (*StreamDataRequest_Service) isStreamDataRequest_Request() {}

func (*StreamDataRequest_ShellCommandResponse) isStreamDataRequest_Request() {}

func (*StreamDataRequest_L7AccessLog) isStreamDataRequest_Request() {}

func (*StreamDataRequest_AuthorizationPolicy) isStreamDataRequest_Request() {}

func (*StreamDataRequest_YamlDryRunResponse) isStreamDataRequest_Request() {}

type NetworkPoliciesWithErrors struct {
	state         protoimpl.MessageState    `protogen:"open.v1"`
	Policies      []*NetworkPolicyWithError `protobuf:"bytes,1,rep,name=policies,proto3" json:"policies,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *NetworkPoliciesWithErrors) Reset() {
	*x = NetworkPoliciesWithErrors{}
	mi := &file_cloud_v1_message_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *NetworkPoliciesWithErrors) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NetworkPoliciesWithErrors) ProtoMessage() {}

func (x *NetworkPoliciesWithErrors) ProtoReflect() protoreflect.Message {
	mi := &file_cloud_v1_message_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NetworkPoliciesWithErrors.ProtoReflect.Descriptor instead.
func (*NetworkPoliciesWithErrors) Descriptor() ([]byte, []int) {
	return file_cloud_v1_message_proto_rawDescGZIP(), []int{1}
}

func (x *NetworkPoliciesWithErrors) GetPolicies() []*NetworkPolicyWithError {
	if x != nil {
		return x.Policies
	}
	return nil
}

type NetworkPolicyWithError struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	NetworkPolicy string                 `protobuf:"bytes,1,opt,name=network_policy,json=networkPolicy,proto3" json:"network_policy,omitempty"`
	ErrorMessage  string                 `protobuf:"bytes,2,opt,name=error_message,json=errorMessage,proto3" json:"error_message,omitempty"`
	PolicyId      string                 `protobuf:"bytes,3,opt,name=policy_id,json=policyId,proto3" json:"policy_id,omitempty"` // Unique identifier for tracking policies, generated by the server as a uuid
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *NetworkPolicyWithError) Reset() {
	*x = NetworkPolicyWithError{}
	mi := &file_cloud_v1_message_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *NetworkPolicyWithError) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NetworkPolicyWithError) ProtoMessage() {}

func (x *NetworkPolicyWithError) ProtoReflect() protoreflect.Message {
	mi := &file_cloud_v1_message_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NetworkPolicyWithError.ProtoReflect.Descriptor instead.
func (*NetworkPolicyWithError) Descriptor() ([]byte, []int) {
	return file_cloud_v1_message_proto_rawDescGZIP(), []int{2}
}

func (x *NetworkPolicyWithError) GetNetworkPolicy() string {
	if x != nil {
		return x.NetworkPolicy
	}
	return ""
}

func (x *NetworkPolicyWithError) GetErrorMessage() string {
	if x != nil {
		return x.ErrorMessage
	}
	return ""
}

func (x *NetworkPolicyWithError) GetPolicyId() string {
	if x != nil {
		return x.PolicyId
	}
	return ""
}

type Flow struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	SrcIp string                 `protobuf:"bytes,1,opt,name=src_ip,json=srcIp,proto3" json:"src_ip,omitempty"`
	DstIp string                 `protobuf:"bytes,2,opt,name=dst_ip,json=dstIp,proto3" json:"dst_ip,omitempty"`
	// Source endpoint details
	Src *Endpoint `protobuf:"bytes,3,opt,name=src,proto3" json:"src,omitempty"`
	// Destination endpoint details
	Dst *Endpoint `protobuf:"bytes,4,opt,name=dst,proto3" json:"dst,omitempty"`
	// Direction from source's viewpoint (ingress or egress)
	Direction string `protobuf:"bytes,5,opt,name=direction,proto3" json:"direction,omitempty"`
	// Dst port number
	Port uint32 `protobuf:"varint,6,opt,name=port,proto3" json:"port,omitempty"`
	// Protocol (TCP, UDP, etc.)
	Protocol string `protobuf:"bytes,7,opt,name=protocol,proto3" json:"protocol,omitempty"`
	// Whether the connection was allowed
	Allowed bool `protobuf:"varint,8,opt,name=allowed,proto3" json:"allowed,omitempty"`
	// Count of times this flow was observed
	Count int64 `protobuf:"varint,9,opt,name=count,proto3" json:"count,omitempty"`
	// When this flow was first seen
	FirstSeen *timestamppb.Timestamp `protobuf:"bytes,10,opt,name=first_seen,json=firstSeen,proto3" json:"first_seen,omitempty"`
	// When this flow was last seen
	LastSeen         *timestamppb.Timestamp `protobuf:"bytes,11,opt,name=last_seen,json=lastSeen,proto3" json:"last_seen,omitempty"`
	IngressAllowedBy []*Policy              `protobuf:"bytes,12,rep,name=ingress_allowed_by,json=ingressAllowedBy,proto3" json:"ingress_allowed_by,omitempty"`
	EgressAllowedBy  []*Policy              `protobuf:"bytes,13,rep,name=egress_allowed_by,json=egressAllowedBy,proto3" json:"egress_allowed_by,omitempty"`
	unknownFields    protoimpl.UnknownFields
	sizeCache        protoimpl.SizeCache
}

func (x *Flow) Reset() {
	*x = Flow{}
	mi := &file_cloud_v1_message_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Flow) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Flow) ProtoMessage() {}

func (x *Flow) ProtoReflect() protoreflect.Message {
	mi := &file_cloud_v1_message_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Flow.ProtoReflect.Descriptor instead.
func (*Flow) Descriptor() ([]byte, []int) {
	return file_cloud_v1_message_proto_rawDescGZIP(), []int{3}
}

func (x *Flow) GetSrcIp() string {
	if x != nil {
		return x.SrcIp
	}
	return ""
}

func (x *Flow) GetDstIp() string {
	if x != nil {
		return x.DstIp
	}
	return ""
}

func (x *Flow) GetSrc() *Endpoint {
	if x != nil {
		return x.Src
	}
	return nil
}

func (x *Flow) GetDst() *Endpoint {
	if x != nil {
		return x.Dst
	}
	return nil
}

func (x *Flow) GetDirection() string {
	if x != nil {
		return x.Direction
	}
	return ""
}

func (x *Flow) GetPort() uint32 {
	if x != nil {
		return x.Port
	}
	return 0
}

func (x *Flow) GetProtocol() string {
	if x != nil {
		return x.Protocol
	}
	return ""
}

func (x *Flow) GetAllowed() bool {
	if x != nil {
		return x.Allowed
	}
	return false
}

func (x *Flow) GetCount() int64 {
	if x != nil {
		return x.Count
	}
	return 0
}

func (x *Flow) GetFirstSeen() *timestamppb.Timestamp {
	if x != nil {
		return x.FirstSeen
	}
	return nil
}

func (x *Flow) GetLastSeen() *timestamppb.Timestamp {
	if x != nil {
		return x.LastSeen
	}
	return nil
}

func (x *Flow) GetIngressAllowedBy() []*Policy {
	if x != nil {
		return x.IngressAllowedBy
	}
	return nil
}

func (x *Flow) GetEgressAllowedBy() []*Policy {
	if x != nil {
		return x.EgressAllowedBy
	}
	return nil
}

// Endpoint definition for source or destination
type Endpoint struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Namespace
	Ns string `protobuf:"bytes,1,opt,name=ns,proto3" json:"ns,omitempty"`
	// Kind (Deployment, StatefulSet, etc.)
	Kind string `protobuf:"bytes,2,opt,name=kind,proto3" json:"kind,omitempty"`
	// Resource name
	Name string `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	// Digest of labels attached to the resource
	Labels        []string `protobuf:"bytes,4,rep,name=labels,proto3" json:"labels,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Endpoint) Reset() {
	*x = Endpoint{}
	mi := &file_cloud_v1_message_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Endpoint) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Endpoint) ProtoMessage() {}

func (x *Endpoint) ProtoReflect() protoreflect.Message {
	mi := &file_cloud_v1_message_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Endpoint.ProtoReflect.Descriptor instead.
func (*Endpoint) Descriptor() ([]byte, []int) {
	return file_cloud_v1_message_proto_rawDescGZIP(), []int{4}
}

func (x *Endpoint) GetNs() string {
	if x != nil {
		return x.Ns
	}
	return ""
}

func (x *Endpoint) GetKind() string {
	if x != nil {
		return x.Kind
	}
	return ""
}

func (x *Endpoint) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Endpoint) GetLabels() []string {
	if x != nil {
		return x.Labels
	}
	return nil
}

// Policy definition used in Cilium flows
type Policy struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Name          string                 `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Namespace     string                 `protobuf:"bytes,2,opt,name=namespace,proto3" json:"namespace,omitempty"`
	Labels        []string               `protobuf:"bytes,3,rep,name=labels,proto3" json:"labels,omitempty"`
	Revision      uint64                 `protobuf:"varint,4,opt,name=revision,proto3" json:"revision,omitempty"`
	Kind          string                 `protobuf:"bytes,5,opt,name=kind,proto3" json:"kind,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Policy) Reset() {
	*x = Policy{}
	mi := &file_cloud_v1_message_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Policy) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Policy) ProtoMessage() {}

func (x *Policy) ProtoReflect() protoreflect.Message {
	mi := &file_cloud_v1_message_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Policy.ProtoReflect.Descriptor instead.
func (*Policy) Descriptor() ([]byte, []int) {
	return file_cloud_v1_message_proto_rawDescGZIP(), []int{5}
}

func (x *Policy) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Policy) GetNamespace() string {
	if x != nil {
		return x.Namespace
	}
	return ""
}

func (x *Policy) GetLabels() []string {
	if x != nil {
		return x.Labels
	}
	return nil
}

func (x *Policy) GetRevision() uint64 {
	if x != nil {
		return x.Revision
	}
	return 0
}

func (x *Policy) GetKind() string {
	if x != nil {
		return x.Kind
	}
	return ""
}

// Response message
type StreamDataResponse struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Types that are valid to be assigned to Response:
	//
	//	*StreamDataResponse_Ack
	//	*StreamDataResponse_NetworkPolicy
	//	*StreamDataResponse_KubernetesApiRequest
	//	*StreamDataResponse_ShellCommandRequest
	//	*StreamDataResponse_YamlDryRunRequest
	Response      isStreamDataResponse_Response `protobuf_oneof:"response"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *StreamDataResponse) Reset() {
	*x = StreamDataResponse{}
	mi := &file_cloud_v1_message_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *StreamDataResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StreamDataResponse) ProtoMessage() {}

func (x *StreamDataResponse) ProtoReflect() protoreflect.Message {
	mi := &file_cloud_v1_message_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StreamDataResponse.ProtoReflect.Descriptor instead.
func (*StreamDataResponse) Descriptor() ([]byte, []int) {
	return file_cloud_v1_message_proto_rawDescGZIP(), []int{6}
}

func (x *StreamDataResponse) GetResponse() isStreamDataResponse_Response {
	if x != nil {
		return x.Response
	}
	return nil
}

func (x *StreamDataResponse) GetAck() *Ack {
	if x != nil {
		if x, ok := x.Response.(*StreamDataResponse_Ack); ok {
			return x.Ack
		}
	}
	return nil
}

func (x *StreamDataResponse) GetNetworkPolicy() *NetworkPolicyWithError {
	if x != nil {
		if x, ok := x.Response.(*StreamDataResponse_NetworkPolicy); ok {
			return x.NetworkPolicy
		}
	}
	return nil
}

func (x *StreamDataResponse) GetKubernetesApiRequest() *KubernetesAPIRequest {
	if x != nil {
		if x, ok := x.Response.(*StreamDataResponse_KubernetesApiRequest); ok {
			return x.KubernetesApiRequest
		}
	}
	return nil
}

func (x *StreamDataResponse) GetShellCommandRequest() *ShellCommandRequest {
	if x != nil {
		if x, ok := x.Response.(*StreamDataResponse_ShellCommandRequest); ok {
			return x.ShellCommandRequest
		}
	}
	return nil
}

func (x *StreamDataResponse) GetYamlDryRunRequest() *YamlDryRunRequest {
	if x != nil {
		if x, ok := x.Response.(*StreamDataResponse_YamlDryRunRequest); ok {
			return x.YamlDryRunRequest
		}
	}
	return nil
}

type isStreamDataResponse_Response interface {
	isStreamDataResponse_Response()
}

type StreamDataResponse_Ack struct {
	// Simple acknowledgment when message is received
	Ack *Ack `protobuf:"bytes,1,opt,name=ack,proto3,oneof"`
}

type StreamDataResponse_NetworkPolicy struct {
	// Network policy when computation is complete
	NetworkPolicy *NetworkPolicyWithError `protobuf:"bytes,2,opt,name=network_policy,json=networkPolicy,proto3,oneof"`
}

type StreamDataResponse_KubernetesApiRequest struct {
	// Kubernetes API request from server to operator
	KubernetesApiRequest *KubernetesAPIRequest `protobuf:"bytes,3,opt,name=kubernetes_api_request,json=kubernetesApiRequest,proto3,oneof"`
}

type StreamDataResponse_ShellCommandRequest struct {
	// Shell command request from server to operator
	ShellCommandRequest *ShellCommandRequest `protobuf:"bytes,4,opt,name=shell_command_request,json=shellCommandRequest,proto3,oneof"`
}

type StreamDataResponse_YamlDryRunRequest struct {
	// YAML dry-run validation request from server to operator
	YamlDryRunRequest *YamlDryRunRequest `protobuf:"bytes,5,opt,name=yaml_dry_run_request,json=yamlDryRunRequest,proto3,oneof"`
}

func (*StreamDataResponse_Ack) isStreamDataResponse_Response() {}

func (*StreamDataResponse_NetworkPolicy) isStreamDataResponse_Response() {}

func (*StreamDataResponse_KubernetesApiRequest) isStreamDataResponse_Response() {}

func (*StreamDataResponse_ShellCommandRequest) isStreamDataResponse_Response() {}

func (*StreamDataResponse_YamlDryRunRequest) isStreamDataResponse_Response() {}

// Simple acknowledgment message
type Ack struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Ack) Reset() {
	*x = Ack{}
	mi := &file_cloud_v1_message_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Ack) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ack) ProtoMessage() {}

func (x *Ack) ProtoReflect() protoreflect.Message {
	mi := &file_cloud_v1_message_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ack.ProtoReflect.Descriptor instead.
func (*Ack) Descriptor() ([]byte, []int) {
	return file_cloud_v1_message_proto_rawDescGZIP(), []int{7}
}

// Workload definition for streaming workload inventory
type Workload struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Name          string                 `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Namespace     string                 `protobuf:"bytes,2,opt,name=namespace,proto3" json:"namespace,omitempty"`
	Uid           string                 `protobuf:"bytes,3,opt,name=uid,proto3" json:"uid,omitempty"`
	Kind          string                 `protobuf:"bytes,4,opt,name=kind,proto3" json:"kind,omitempty"` // Deployment, StatefulSet, DaemonSet, etc.
	Labels        map[string]string      `protobuf:"bytes,5,rep,name=labels,proto3" json:"labels,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	CreatedAt     *timestamppb.Timestamp `protobuf:"bytes,6,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	Action        Action                 `protobuf:"varint,7,opt,name=action,proto3,enum=cloud.v1.Action" json:"action,omitempty"` // CREATE, UPDATE, DELETE
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Workload) Reset() {
	*x = Workload{}
	mi := &file_cloud_v1_message_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Workload) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Workload) ProtoMessage() {}

func (x *Workload) ProtoReflect() protoreflect.Message {
	mi := &file_cloud_v1_message_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Workload.ProtoReflect.Descriptor instead.
func (*Workload) Descriptor() ([]byte, []int) {
	return file_cloud_v1_message_proto_rawDescGZIP(), []int{8}
}

func (x *Workload) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Workload) GetNamespace() string {
	if x != nil {
		return x.Namespace
	}
	return ""
}

func (x *Workload) GetUid() string {
	if x != nil {
		return x.Uid
	}
	return ""
}

func (x *Workload) GetKind() string {
	if x != nil {
		return x.Kind
	}
	return ""
}

func (x *Workload) GetLabels() map[string]string {
	if x != nil {
		return x.Labels
	}
	return nil
}

func (x *Workload) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *Workload) GetAction() Action {
	if x != nil {
		return x.Action
	}
	return Action_ACTION_UNSPECIFIED
}

// Namespace definition for streaming namespace inventory
type Namespace struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Name          string                 `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Uid           string                 `protobuf:"bytes,2,opt,name=uid,proto3" json:"uid,omitempty"`
	Labels        map[string]string      `protobuf:"bytes,3,rep,name=labels,proto3" json:"labels,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	CreatedAt     *timestamppb.Timestamp `protobuf:"bytes,4,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	Action        Action                 `protobuf:"varint,5,opt,name=action,proto3,enum=cloud.v1.Action" json:"action,omitempty"` // CREATE, UPDATE, DELETE
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Namespace) Reset() {
	*x = Namespace{}
	mi := &file_cloud_v1_message_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Namespace) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Namespace) ProtoMessage() {}

func (x *Namespace) ProtoReflect() protoreflect.Message {
	mi := &file_cloud_v1_message_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Namespace.ProtoReflect.Descriptor instead.
func (*Namespace) Descriptor() ([]byte, []int) {
	return file_cloud_v1_message_proto_rawDescGZIP(), []int{9}
}

func (x *Namespace) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Namespace) GetUid() string {
	if x != nil {
		return x.Uid
	}
	return ""
}

func (x *Namespace) GetLabels() map[string]string {
	if x != nil {
		return x.Labels
	}
	return nil
}

func (x *Namespace) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *Namespace) GetAction() Action {
	if x != nil {
		return x.Action
	}
	return Action_ACTION_UNSPECIFIED
}

// Service definition for streaming service inventory
type Service struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Name          string                 `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Namespace     string                 `protobuf:"bytes,2,opt,name=namespace,proto3" json:"namespace,omitempty"`
	Uid           string                 `protobuf:"bytes,3,opt,name=uid,proto3" json:"uid,omitempty"`
	Labels        map[string]string      `protobuf:"bytes,4,rep,name=labels,proto3" json:"labels,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	Annotations   map[string]string      `protobuf:"bytes,5,rep,name=annotations,proto3" json:"annotations,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	Selector      map[string]string      `protobuf:"bytes,6,rep,name=selector,proto3" json:"selector,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"` // Service selector labels
	Ports         []*ServicePort         `protobuf:"bytes,7,rep,name=ports,proto3" json:"ports,omitempty"`
	ServiceType   string                 `protobuf:"bytes,8,opt,name=service_type,json=serviceType,proto3" json:"service_type,omitempty"` // ClusterIP, NodePort, LoadBalancer, ExternalName
	ClusterIp     string                 `protobuf:"bytes,9,opt,name=cluster_ip,json=clusterIp,proto3" json:"cluster_ip,omitempty"`
	ExternalIps   []string               `protobuf:"bytes,10,rep,name=external_ips,json=externalIps,proto3" json:"external_ips,omitempty"`
	CreatedAt     *timestamppb.Timestamp `protobuf:"bytes,11,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	Action        Action                 `protobuf:"varint,12,opt,name=action,proto3,enum=cloud.v1.Action" json:"action,omitempty"` // CREATE, UPDATE, DELETE
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Service) Reset() {
	*x = Service{}
	mi := &file_cloud_v1_message_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Service) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Service) ProtoMessage() {}

func (x *Service) ProtoReflect() protoreflect.Message {
	mi := &file_cloud_v1_message_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Service.ProtoReflect.Descriptor instead.
func (*Service) Descriptor() ([]byte, []int) {
	return file_cloud_v1_message_proto_rawDescGZIP(), []int{10}
}

func (x *Service) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Service) GetNamespace() string {
	if x != nil {
		return x.Namespace
	}
	return ""
}

func (x *Service) GetUid() string {
	if x != nil {
		return x.Uid
	}
	return ""
}

func (x *Service) GetLabels() map[string]string {
	if x != nil {
		return x.Labels
	}
	return nil
}

func (x *Service) GetAnnotations() map[string]string {
	if x != nil {
		return x.Annotations
	}
	return nil
}

func (x *Service) GetSelector() map[string]string {
	if x != nil {
		return x.Selector
	}
	return nil
}

func (x *Service) GetPorts() []*ServicePort {
	if x != nil {
		return x.Ports
	}
	return nil
}

func (x *Service) GetServiceType() string {
	if x != nil {
		return x.ServiceType
	}
	return ""
}

func (x *Service) GetClusterIp() string {
	if x != nil {
		return x.ClusterIp
	}
	return ""
}

func (x *Service) GetExternalIps() []string {
	if x != nil {
		return x.ExternalIps
	}
	return nil
}

func (x *Service) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *Service) GetAction() Action {
	if x != nil {
		return x.Action
	}
	return Action_ACTION_UNSPECIFIED
}

// Service port definition
type ServicePort struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Name          string                 `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Protocol      string                 `protobuf:"bytes,2,opt,name=protocol,proto3" json:"protocol,omitempty"` // TCP, UDP, SCTP
	Port          int32                  `protobuf:"varint,3,opt,name=port,proto3" json:"port,omitempty"`
	TargetPort    int32                  `protobuf:"varint,4,opt,name=target_port,json=targetPort,proto3" json:"target_port,omitempty"` // Can be port number or named port
	NodePort      int32                  `protobuf:"varint,5,opt,name=node_port,json=nodePort,proto3" json:"node_port,omitempty"`       // Only for NodePort and LoadBalancer services
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ServicePort) Reset() {
	*x = ServicePort{}
	mi := &file_cloud_v1_message_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ServicePort) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ServicePort) ProtoMessage() {}

func (x *ServicePort) ProtoReflect() protoreflect.Message {
	mi := &file_cloud_v1_message_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ServicePort.ProtoReflect.Descriptor instead.
func (*ServicePort) Descriptor() ([]byte, []int) {
	return file_cloud_v1_message_proto_rawDescGZIP(), []int{11}
}

func (x *ServicePort) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ServicePort) GetProtocol() string {
	if x != nil {
		return x.Protocol
	}
	return ""
}

func (x *ServicePort) GetPort() int32 {
	if x != nil {
		return x.Port
	}
	return 0
}

func (x *ServicePort) GetTargetPort() int32 {
	if x != nil {
		return x.TargetPort
	}
	return 0
}

func (x *ServicePort) GetNodePort() int32 {
	if x != nil {
		return x.NodePort
	}
	return 0
}

// InventoryCommit signals that the operator has finished sending initial inventory
// and the server can now commit the staged changes and start processing incremental updates
type InventoryCommit struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *InventoryCommit) Reset() {
	*x = InventoryCommit{}
	mi := &file_cloud_v1_message_proto_msgTypes[12]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *InventoryCommit) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InventoryCommit) ProtoMessage() {}

func (x *InventoryCommit) ProtoReflect() protoreflect.Message {
	mi := &file_cloud_v1_message_proto_msgTypes[12]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InventoryCommit.ProtoReflect.Descriptor instead.
func (*InventoryCommit) Descriptor() ([]byte, []int) {
	return file_cloud_v1_message_proto_rawDescGZIP(), []int{12}
}

// Network policy definition matching Kubernetes NetworkPolicy format
type NetworkPolicy struct {
	state      protoimpl.MessageState `protogen:"open.v1"`
	ApiVersion string                 `protobuf:"bytes,1,opt,name=api_version,json=apiVersion,proto3" json:"api_version,omitempty"` // networking.k8s.io/v1, cilium.io/v2, etc.
	Kind       string                 `protobuf:"bytes,2,opt,name=kind,proto3" json:"kind,omitempty"`
	// Standard Kubernetes metadata
	Metadata *ObjectMeta        `protobuf:"bytes,3,opt,name=metadata,proto3" json:"metadata,omitempty"`
	Spec     *NetworkPolicySpec `protobuf:"bytes,4,opt,name=spec,proto3" json:"spec,omitempty"`
	// Zero-or-more "target" workloads protected by this policy;
	// each entry in the target_workloads list is of the format: "<Namespace>.<Kind>.<Name>".
	TargetWorkloads []string `protobuf:"bytes,5,rep,name=target_workloads,json=targetWorkloads,proto3" json:"target_workloads,omitempty"`
	// Action performed on this network policy
	Action        Action `protobuf:"varint,6,opt,name=action,proto3,enum=cloud.v1.Action" json:"action,omitempty"` // CREATE, UPDATE, DELETE
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *NetworkPolicy) Reset() {
	*x = NetworkPolicy{}
	mi := &file_cloud_v1_message_proto_msgTypes[13]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *NetworkPolicy) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NetworkPolicy) ProtoMessage() {}

func (x *NetworkPolicy) ProtoReflect() protoreflect.Message {
	mi := &file_cloud_v1_message_proto_msgTypes[13]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NetworkPolicy.ProtoReflect.Descriptor instead.
func (*NetworkPolicy) Descriptor() ([]byte, []int) {
	return file_cloud_v1_message_proto_rawDescGZIP(), []int{13}
}

func (x *NetworkPolicy) GetApiVersion() string {
	if x != nil {
		return x.ApiVersion
	}
	return ""
}

func (x *NetworkPolicy) GetKind() string {
	if x != nil {
		return x.Kind
	}
	return ""
}

func (x *NetworkPolicy) GetMetadata() *ObjectMeta {
	if x != nil {
		return x.Metadata
	}
	return nil
}

func (x *NetworkPolicy) GetSpec() *NetworkPolicySpec {
	if x != nil {
		return x.Spec
	}
	return nil
}

func (x *NetworkPolicy) GetTargetWorkloads() []string {
	if x != nil {
		return x.TargetWorkloads
	}
	return nil
}

func (x *NetworkPolicy) GetAction() Action {
	if x != nil {
		return x.Action
	}
	return Action_ACTION_UNSPECIFIED
}

// Kubernetes ObjectMeta
type ObjectMeta struct {
	state           protoimpl.MessageState `protogen:"open.v1"`
	Name            string                 `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Namespace       string                 `protobuf:"bytes,2,opt,name=namespace,proto3" json:"namespace,omitempty"`
	Labels          map[string]string      `protobuf:"bytes,3,rep,name=labels,proto3" json:"labels,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	Annotations     map[string]string      `protobuf:"bytes,4,rep,name=annotations,proto3" json:"annotations,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	ResourceVersion string                 `protobuf:"bytes,5,opt,name=resource_version,json=resourceVersion,proto3" json:"resource_version,omitempty"`
	Uid             string                 `protobuf:"bytes,6,opt,name=uid,proto3" json:"uid,omitempty"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *ObjectMeta) Reset() {
	*x = ObjectMeta{}
	mi := &file_cloud_v1_message_proto_msgTypes[14]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ObjectMeta) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ObjectMeta) ProtoMessage() {}

func (x *ObjectMeta) ProtoReflect() protoreflect.Message {
	mi := &file_cloud_v1_message_proto_msgTypes[14]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ObjectMeta.ProtoReflect.Descriptor instead.
func (*ObjectMeta) Descriptor() ([]byte, []int) {
	return file_cloud_v1_message_proto_rawDescGZIP(), []int{14}
}

func (x *ObjectMeta) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ObjectMeta) GetNamespace() string {
	if x != nil {
		return x.Namespace
	}
	return ""
}

func (x *ObjectMeta) GetLabels() map[string]string {
	if x != nil {
		return x.Labels
	}
	return nil
}

func (x *ObjectMeta) GetAnnotations() map[string]string {
	if x != nil {
		return x.Annotations
	}
	return nil
}

func (x *ObjectMeta) GetResourceVersion() string {
	if x != nil {
		return x.ResourceVersion
	}
	return ""
}

func (x *ObjectMeta) GetUid() string {
	if x != nil {
		return x.Uid
	}
	return ""
}

// NetworkPolicy specification
type NetworkPolicySpec struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Selects the pods to which this NetworkPolicy object applies
	PodSelector *LabelSelector `protobuf:"bytes,1,opt,name=pod_selector,json=podSelector,proto3" json:"pod_selector,omitempty"`
	// List of ingress rules to be applied
	Ingress []*NetworkPolicyIngressRule `protobuf:"bytes,2,rep,name=ingress,proto3" json:"ingress,omitempty"`
	// List of egress rules to be applied
	Egress []*NetworkPolicyEgressRule `protobuf:"bytes,3,rep,name=egress,proto3" json:"egress,omitempty"`
	// List of rule types that the NetworkPolicy relates to
	// Valid options are ["Ingress"], ["Egress"], or ["Ingress", "Egress"]
	PolicyTypes   []string `protobuf:"bytes,4,rep,name=policy_types,json=policyTypes,proto3" json:"policy_types,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *NetworkPolicySpec) Reset() {
	*x = NetworkPolicySpec{}
	mi := &file_cloud_v1_message_proto_msgTypes[15]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *NetworkPolicySpec) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NetworkPolicySpec) ProtoMessage() {}

func (x *NetworkPolicySpec) ProtoReflect() protoreflect.Message {
	mi := &file_cloud_v1_message_proto_msgTypes[15]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NetworkPolicySpec.ProtoReflect.Descriptor instead.
func (*NetworkPolicySpec) Descriptor() ([]byte, []int) {
	return file_cloud_v1_message_proto_rawDescGZIP(), []int{15}
}

func (x *NetworkPolicySpec) GetPodSelector() *LabelSelector {
	if x != nil {
		return x.PodSelector
	}
	return nil
}

func (x *NetworkPolicySpec) GetIngress() []*NetworkPolicyIngressRule {
	if x != nil {
		return x.Ingress
	}
	return nil
}

func (x *NetworkPolicySpec) GetEgress() []*NetworkPolicyEgressRule {
	if x != nil {
		return x.Egress
	}
	return nil
}

func (x *NetworkPolicySpec) GetPolicyTypes() []string {
	if x != nil {
		return x.PolicyTypes
	}
	return nil
}

// Label selector for Kubernetes resources
type LabelSelector struct {
	state            protoimpl.MessageState      `protogen:"open.v1"`
	MatchLabels      map[string]string           `protobuf:"bytes,1,rep,name=match_labels,json=matchLabels,proto3" json:"match_labels,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	MatchExpressions []*LabelSelectorRequirement `protobuf:"bytes,2,rep,name=match_expressions,json=matchExpressions,proto3" json:"match_expressions,omitempty"`
	unknownFields    protoimpl.UnknownFields
	sizeCache        protoimpl.SizeCache
}

func (x *LabelSelector) Reset() {
	*x = LabelSelector{}
	mi := &file_cloud_v1_message_proto_msgTypes[16]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *LabelSelector) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LabelSelector) ProtoMessage() {}

func (x *LabelSelector) ProtoReflect() protoreflect.Message {
	mi := &file_cloud_v1_message_proto_msgTypes[16]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LabelSelector.ProtoReflect.Descriptor instead.
func (*LabelSelector) Descriptor() ([]byte, []int) {
	return file_cloud_v1_message_proto_rawDescGZIP(), []int{16}
}

func (x *LabelSelector) GetMatchLabels() map[string]string {
	if x != nil {
		return x.MatchLabels
	}
	return nil
}

func (x *LabelSelector) GetMatchExpressions() []*LabelSelectorRequirement {
	if x != nil {
		return x.MatchExpressions
	}
	return nil
}

type LabelSelectorRequirement struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Key           string                 `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	Operator      string                 `protobuf:"bytes,2,opt,name=operator,proto3" json:"operator,omitempty"` // In, NotIn, Exists, DoesNotExist
	Values        []string               `protobuf:"bytes,3,rep,name=values,proto3" json:"values,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *LabelSelectorRequirement) Reset() {
	*x = LabelSelectorRequirement{}
	mi := &file_cloud_v1_message_proto_msgTypes[17]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *LabelSelectorRequirement) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LabelSelectorRequirement) ProtoMessage() {}

func (x *LabelSelectorRequirement) ProtoReflect() protoreflect.Message {
	mi := &file_cloud_v1_message_proto_msgTypes[17]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LabelSelectorRequirement.ProtoReflect.Descriptor instead.
func (*LabelSelectorRequirement) Descriptor() ([]byte, []int) {
	return file_cloud_v1_message_proto_rawDescGZIP(), []int{17}
}

func (x *LabelSelectorRequirement) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

func (x *LabelSelectorRequirement) GetOperator() string {
	if x != nil {
		return x.Operator
	}
	return ""
}

func (x *LabelSelectorRequirement) GetValues() []string {
	if x != nil {
		return x.Values
	}
	return nil
}

// NetworkPolicy ingress rule
type NetworkPolicyIngressRule struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	From          []*NetworkPolicyPeer   `protobuf:"bytes,1,rep,name=from,proto3" json:"from,omitempty"`
	Ports         []*NetworkPolicyPort   `protobuf:"bytes,2,rep,name=ports,proto3" json:"ports,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *NetworkPolicyIngressRule) Reset() {
	*x = NetworkPolicyIngressRule{}
	mi := &file_cloud_v1_message_proto_msgTypes[18]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *NetworkPolicyIngressRule) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NetworkPolicyIngressRule) ProtoMessage() {}

func (x *NetworkPolicyIngressRule) ProtoReflect() protoreflect.Message {
	mi := &file_cloud_v1_message_proto_msgTypes[18]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NetworkPolicyIngressRule.ProtoReflect.Descriptor instead.
func (*NetworkPolicyIngressRule) Descriptor() ([]byte, []int) {
	return file_cloud_v1_message_proto_rawDescGZIP(), []int{18}
}

func (x *NetworkPolicyIngressRule) GetFrom() []*NetworkPolicyPeer {
	if x != nil {
		return x.From
	}
	return nil
}

func (x *NetworkPolicyIngressRule) GetPorts() []*NetworkPolicyPort {
	if x != nil {
		return x.Ports
	}
	return nil
}

// NetworkPolicy egress rule
type NetworkPolicyEgressRule struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	To            []*NetworkPolicyPeer   `protobuf:"bytes,1,rep,name=to,proto3" json:"to,omitempty"`
	Ports         []*NetworkPolicyPort   `protobuf:"bytes,2,rep,name=ports,proto3" json:"ports,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *NetworkPolicyEgressRule) Reset() {
	*x = NetworkPolicyEgressRule{}
	mi := &file_cloud_v1_message_proto_msgTypes[19]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *NetworkPolicyEgressRule) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NetworkPolicyEgressRule) ProtoMessage() {}

func (x *NetworkPolicyEgressRule) ProtoReflect() protoreflect.Message {
	mi := &file_cloud_v1_message_proto_msgTypes[19]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NetworkPolicyEgressRule.ProtoReflect.Descriptor instead.
func (*NetworkPolicyEgressRule) Descriptor() ([]byte, []int) {
	return file_cloud_v1_message_proto_rawDescGZIP(), []int{19}
}

func (x *NetworkPolicyEgressRule) GetTo() []*NetworkPolicyPeer {
	if x != nil {
		return x.To
	}
	return nil
}

func (x *NetworkPolicyEgressRule) GetPorts() []*NetworkPolicyPort {
	if x != nil {
		return x.Ports
	}
	return nil
}

// NetworkPolicy peer
type NetworkPolicyPeer struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Either pod_selector, namespace_selector, or ip_block should be specified
	PodSelector       *LabelSelector `protobuf:"bytes,1,opt,name=pod_selector,json=podSelector,proto3" json:"pod_selector,omitempty"`
	NamespaceSelector *LabelSelector `protobuf:"bytes,2,opt,name=namespace_selector,json=namespaceSelector,proto3" json:"namespace_selector,omitempty"`
	IpBlock           *IPBlock       `protobuf:"bytes,3,opt,name=ip_block,json=ipBlock,proto3" json:"ip_block,omitempty"`
	unknownFields     protoimpl.UnknownFields
	sizeCache         protoimpl.SizeCache
}

func (x *NetworkPolicyPeer) Reset() {
	*x = NetworkPolicyPeer{}
	mi := &file_cloud_v1_message_proto_msgTypes[20]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *NetworkPolicyPeer) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NetworkPolicyPeer) ProtoMessage() {}

func (x *NetworkPolicyPeer) ProtoReflect() protoreflect.Message {
	mi := &file_cloud_v1_message_proto_msgTypes[20]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NetworkPolicyPeer.ProtoReflect.Descriptor instead.
func (*NetworkPolicyPeer) Descriptor() ([]byte, []int) {
	return file_cloud_v1_message_proto_rawDescGZIP(), []int{20}
}

func (x *NetworkPolicyPeer) GetPodSelector() *LabelSelector {
	if x != nil {
		return x.PodSelector
	}
	return nil
}

func (x *NetworkPolicyPeer) GetNamespaceSelector() *LabelSelector {
	if x != nil {
		return x.NamespaceSelector
	}
	return nil
}

func (x *NetworkPolicyPeer) GetIpBlock() *IPBlock {
	if x != nil {
		return x.IpBlock
	}
	return nil
}

// IP CIDR block specification
type IPBlock struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Cidr          string                 `protobuf:"bytes,1,opt,name=cidr,proto3" json:"cidr,omitempty"`
	Except        []string               `protobuf:"bytes,2,rep,name=except,proto3" json:"except,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *IPBlock) Reset() {
	*x = IPBlock{}
	mi := &file_cloud_v1_message_proto_msgTypes[21]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *IPBlock) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IPBlock) ProtoMessage() {}

func (x *IPBlock) ProtoReflect() protoreflect.Message {
	mi := &file_cloud_v1_message_proto_msgTypes[21]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IPBlock.ProtoReflect.Descriptor instead.
func (*IPBlock) Descriptor() ([]byte, []int) {
	return file_cloud_v1_message_proto_rawDescGZIP(), []int{21}
}

func (x *IPBlock) GetCidr() string {
	if x != nil {
		return x.Cidr
	}
	return ""
}

func (x *IPBlock) GetExcept() []string {
	if x != nil {
		return x.Except
	}
	return nil
}

// NetworkPolicy port rule
type NetworkPolicyPort struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Protocol is optional; if not specified, applies to all protocols
	Protocol string `protobuf:"bytes,1,opt,name=protocol,proto3" json:"protocol,omitempty"` // TCP, UDP, SCTP, etc.
	// Port is optional; if not specified, matches all ports
	//
	// Types that are valid to be assigned to PortValue:
	//
	//	*NetworkPolicyPort_Port
	//	*NetworkPolicyPort_PortName
	PortValue isNetworkPolicyPort_PortValue `protobuf_oneof:"port_value"`
	// Port range (Kubernetes extension)
	EndPort       int32 `protobuf:"varint,4,opt,name=end_port,json=endPort,proto3" json:"end_port,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *NetworkPolicyPort) Reset() {
	*x = NetworkPolicyPort{}
	mi := &file_cloud_v1_message_proto_msgTypes[22]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *NetworkPolicyPort) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NetworkPolicyPort) ProtoMessage() {}

func (x *NetworkPolicyPort) ProtoReflect() protoreflect.Message {
	mi := &file_cloud_v1_message_proto_msgTypes[22]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NetworkPolicyPort.ProtoReflect.Descriptor instead.
func (*NetworkPolicyPort) Descriptor() ([]byte, []int) {
	return file_cloud_v1_message_proto_rawDescGZIP(), []int{22}
}

func (x *NetworkPolicyPort) GetProtocol() string {
	if x != nil {
		return x.Protocol
	}
	return ""
}

func (x *NetworkPolicyPort) GetPortValue() isNetworkPolicyPort_PortValue {
	if x != nil {
		return x.PortValue
	}
	return nil
}

func (x *NetworkPolicyPort) GetPort() int32 {
	if x != nil {
		if x, ok := x.PortValue.(*NetworkPolicyPort_Port); ok {
			return x.Port
		}
	}
	return 0
}

func (x *NetworkPolicyPort) GetPortName() string {
	if x != nil {
		if x, ok := x.PortValue.(*NetworkPolicyPort_PortName); ok {
			return x.PortName
		}
	}
	return ""
}

func (x *NetworkPolicyPort) GetEndPort() int32 {
	if x != nil {
		return x.EndPort
	}
	return 0
}

type isNetworkPolicyPort_PortValue interface {
	isNetworkPolicyPort_PortValue()
}

type NetworkPolicyPort_Port struct {
	Port int32 `protobuf:"varint,2,opt,name=port,proto3,oneof"`
}

type NetworkPolicyPort_PortName struct {
	PortName string `protobuf:"bytes,3,opt,name=port_name,json=portName,proto3,oneof"` // Named port on pods
}

func (*NetworkPolicyPort_Port) isNetworkPolicyPort_PortValue() {}

func (*NetworkPolicyPort_PortName) isNetworkPolicyPort_PortValue() {}

// Kubernetes API request message for executing K8s API calls
type KubernetesAPIRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Unique identifier for tracking this request
	RequestId string `protobuf:"bytes,1,opt,name=request_id,json=requestId,proto3" json:"request_id,omitempty"`
	// List of Kubernetes API paths to execute
	// Format: "api/v1/namespaces/default/pods"
	ApiPaths []string `protobuf:"bytes,2,rep,name=api_paths,json=apiPaths,proto3" json:"api_paths,omitempty"`
	// Optional timeout for the entire batch of requests (in seconds)
	TimeoutSeconds int32 `protobuf:"varint,3,opt,name=timeout_seconds,json=timeoutSeconds,proto3" json:"timeout_seconds,omitempty"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *KubernetesAPIRequest) Reset() {
	*x = KubernetesAPIRequest{}
	mi := &file_cloud_v1_message_proto_msgTypes[23]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *KubernetesAPIRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KubernetesAPIRequest) ProtoMessage() {}

func (x *KubernetesAPIRequest) ProtoReflect() protoreflect.Message {
	mi := &file_cloud_v1_message_proto_msgTypes[23]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KubernetesAPIRequest.ProtoReflect.Descriptor instead.
func (*KubernetesAPIRequest) Descriptor() ([]byte, []int) {
	return file_cloud_v1_message_proto_rawDescGZIP(), []int{23}
}

func (x *KubernetesAPIRequest) GetRequestId() string {
	if x != nil {
		return x.RequestId
	}
	return ""
}

func (x *KubernetesAPIRequest) GetApiPaths() []string {
	if x != nil {
		return x.ApiPaths
	}
	return nil
}

func (x *KubernetesAPIRequest) GetTimeoutSeconds() int32 {
	if x != nil {
		return x.TimeoutSeconds
	}
	return 0
}

// Individual API call result
type KubernetesAPIResult struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The API path that was called
	ApiPath string `protobuf:"bytes,1,opt,name=api_path,json=apiPath,proto3" json:"api_path,omitempty"`
	// Whether this specific call succeeded
	Success bool `protobuf:"varint,2,opt,name=success,proto3" json:"success,omitempty"`
	// JSON response from K8s API (if successful)
	ResponseData string `protobuf:"bytes,3,opt,name=response_data,json=responseData,proto3" json:"response_data,omitempty"`
	// Error message for this specific call (if failed)
	ErrorMessage string `protobuf:"bytes,4,opt,name=error_message,json=errorMessage,proto3" json:"error_message,omitempty"`
	// HTTP status code returned by K8s API
	StatusCode    int32 `protobuf:"varint,5,opt,name=status_code,json=statusCode,proto3" json:"status_code,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *KubernetesAPIResult) Reset() {
	*x = KubernetesAPIResult{}
	mi := &file_cloud_v1_message_proto_msgTypes[24]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *KubernetesAPIResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KubernetesAPIResult) ProtoMessage() {}

func (x *KubernetesAPIResult) ProtoReflect() protoreflect.Message {
	mi := &file_cloud_v1_message_proto_msgTypes[24]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KubernetesAPIResult.ProtoReflect.Descriptor instead.
func (*KubernetesAPIResult) Descriptor() ([]byte, []int) {
	return file_cloud_v1_message_proto_rawDescGZIP(), []int{24}
}

func (x *KubernetesAPIResult) GetApiPath() string {
	if x != nil {
		return x.ApiPath
	}
	return ""
}

func (x *KubernetesAPIResult) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *KubernetesAPIResult) GetResponseData() string {
	if x != nil {
		return x.ResponseData
	}
	return ""
}

func (x *KubernetesAPIResult) GetErrorMessage() string {
	if x != nil {
		return x.ErrorMessage
	}
	return ""
}

func (x *KubernetesAPIResult) GetStatusCode() int32 {
	if x != nil {
		return x.StatusCode
	}
	return 0
}

// Kubernetes API response message containing results
type KubernetesAPIResponse struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Request identifier that matches the request
	RequestId string `protobuf:"bytes,1,opt,name=request_id,json=requestId,proto3" json:"request_id,omitempty"`
	// Results for each individual API call
	Results []*KubernetesAPIResult `protobuf:"bytes,2,rep,name=results,proto3" json:"results,omitempty"`
	// Any global error message (e.g., auth failure, operator issues)
	GlobalErrorMessage string `protobuf:"bytes,3,opt,name=global_error_message,json=globalErrorMessage,proto3" json:"global_error_message,omitempty"`
	unknownFields      protoimpl.UnknownFields
	sizeCache          protoimpl.SizeCache
}

func (x *KubernetesAPIResponse) Reset() {
	*x = KubernetesAPIResponse{}
	mi := &file_cloud_v1_message_proto_msgTypes[25]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *KubernetesAPIResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KubernetesAPIResponse) ProtoMessage() {}

func (x *KubernetesAPIResponse) ProtoReflect() protoreflect.Message {
	mi := &file_cloud_v1_message_proto_msgTypes[25]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KubernetesAPIResponse.ProtoReflect.Descriptor instead.
func (*KubernetesAPIResponse) Descriptor() ([]byte, []int) {
	return file_cloud_v1_message_proto_rawDescGZIP(), []int{25}
}

func (x *KubernetesAPIResponse) GetRequestId() string {
	if x != nil {
		return x.RequestId
	}
	return ""
}

func (x *KubernetesAPIResponse) GetResults() []*KubernetesAPIResult {
	if x != nil {
		return x.Results
	}
	return nil
}

func (x *KubernetesAPIResponse) GetGlobalErrorMessage() string {
	if x != nil {
		return x.GlobalErrorMessage
	}
	return ""
}

// Shell command request message for executing shell commands
type ShellCommandRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Unique identifier for tracking this request
	RequestId string `protobuf:"bytes,1,opt,name=request_id,json=requestId,proto3" json:"request_id,omitempty"`
	// List of shell commands to execute
	Commands []string `protobuf:"bytes,2,rep,name=commands,proto3" json:"commands,omitempty"`
	// Optional timeout for the entire batch (in seconds)
	TimeoutSeconds int32 `protobuf:"varint,3,opt,name=timeout_seconds,json=timeoutSeconds,proto3" json:"timeout_seconds,omitempty"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *ShellCommandRequest) Reset() {
	*x = ShellCommandRequest{}
	mi := &file_cloud_v1_message_proto_msgTypes[26]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ShellCommandRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ShellCommandRequest) ProtoMessage() {}

func (x *ShellCommandRequest) ProtoReflect() protoreflect.Message {
	mi := &file_cloud_v1_message_proto_msgTypes[26]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ShellCommandRequest.ProtoReflect.Descriptor instead.
func (*ShellCommandRequest) Descriptor() ([]byte, []int) {
	return file_cloud_v1_message_proto_rawDescGZIP(), []int{26}
}

func (x *ShellCommandRequest) GetRequestId() string {
	if x != nil {
		return x.RequestId
	}
	return ""
}

func (x *ShellCommandRequest) GetCommands() []string {
	if x != nil {
		return x.Commands
	}
	return nil
}

func (x *ShellCommandRequest) GetTimeoutSeconds() int32 {
	if x != nil {
		return x.TimeoutSeconds
	}
	return 0
}

// Individual shell command result
type ShellCommandResult struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The command that was executed
	Command string `protobuf:"bytes,1,opt,name=command,proto3" json:"command,omitempty"`
	// Whether this command succeeded (exit code 0)
	Success bool `protobuf:"varint,2,opt,name=success,proto3" json:"success,omitempty"`
	// Standard output from the command
	Stdout string `protobuf:"bytes,3,opt,name=stdout,proto3" json:"stdout,omitempty"`
	// Standard error from the command
	Stderr string `protobuf:"bytes,4,opt,name=stderr,proto3" json:"stderr,omitempty"`
	// Exit code returned by the command
	ExitCode      int32 `protobuf:"varint,5,opt,name=exit_code,json=exitCode,proto3" json:"exit_code,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ShellCommandResult) Reset() {
	*x = ShellCommandResult{}
	mi := &file_cloud_v1_message_proto_msgTypes[27]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ShellCommandResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ShellCommandResult) ProtoMessage() {}

func (x *ShellCommandResult) ProtoReflect() protoreflect.Message {
	mi := &file_cloud_v1_message_proto_msgTypes[27]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ShellCommandResult.ProtoReflect.Descriptor instead.
func (*ShellCommandResult) Descriptor() ([]byte, []int) {
	return file_cloud_v1_message_proto_rawDescGZIP(), []int{27}
}

func (x *ShellCommandResult) GetCommand() string {
	if x != nil {
		return x.Command
	}
	return ""
}

func (x *ShellCommandResult) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *ShellCommandResult) GetStdout() string {
	if x != nil {
		return x.Stdout
	}
	return ""
}

func (x *ShellCommandResult) GetStderr() string {
	if x != nil {
		return x.Stderr
	}
	return ""
}

func (x *ShellCommandResult) GetExitCode() int32 {
	if x != nil {
		return x.ExitCode
	}
	return 0
}

// Shell command response message containing results
type ShellCommandResponse struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Request identifier that matches the request
	RequestId string `protobuf:"bytes,1,opt,name=request_id,json=requestId,proto3" json:"request_id,omitempty"`
	// Results for each individual shell command
	Results []*ShellCommandResult `protobuf:"bytes,2,rep,name=results,proto3" json:"results,omitempty"`
	// Any global error message (e.g., operator issues)
	GlobalErrorMessage string `protobuf:"bytes,3,opt,name=global_error_message,json=globalErrorMessage,proto3" json:"global_error_message,omitempty"`
	unknownFields      protoimpl.UnknownFields
	sizeCache          protoimpl.SizeCache
}

func (x *ShellCommandResponse) Reset() {
	*x = ShellCommandResponse{}
	mi := &file_cloud_v1_message_proto_msgTypes[28]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ShellCommandResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ShellCommandResponse) ProtoMessage() {}

func (x *ShellCommandResponse) ProtoReflect() protoreflect.Message {
	mi := &file_cloud_v1_message_proto_msgTypes[28]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ShellCommandResponse.ProtoReflect.Descriptor instead.
func (*ShellCommandResponse) Descriptor() ([]byte, []int) {
	return file_cloud_v1_message_proto_rawDescGZIP(), []int{28}
}

func (x *ShellCommandResponse) GetRequestId() string {
	if x != nil {
		return x.RequestId
	}
	return ""
}

func (x *ShellCommandResponse) GetResults() []*ShellCommandResult {
	if x != nil {
		return x.Results
	}
	return nil
}

func (x *ShellCommandResponse) GetGlobalErrorMessage() string {
	if x != nil {
		return x.GlobalErrorMessage
	}
	return ""
}

// YAML dry-run validation request message
type YamlDryRunRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Unique identifier for tracking this request
	RequestId string `protobuf:"bytes,1,opt,name=request_id,json=requestId,proto3" json:"request_id,omitempty"`
	// List of YAML manifests to validate
	YamlManifests []*YamlManifest `protobuf:"bytes,2,rep,name=yaml_manifests,json=yamlManifests,proto3" json:"yaml_manifests,omitempty"`
	// Optional timeout for the entire batch (in seconds)
	TimeoutSeconds int32 `protobuf:"varint,3,opt,name=timeout_seconds,json=timeoutSeconds,proto3" json:"timeout_seconds,omitempty"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *YamlDryRunRequest) Reset() {
	*x = YamlDryRunRequest{}
	mi := &file_cloud_v1_message_proto_msgTypes[29]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *YamlDryRunRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*YamlDryRunRequest) ProtoMessage() {}

func (x *YamlDryRunRequest) ProtoReflect() protoreflect.Message {
	mi := &file_cloud_v1_message_proto_msgTypes[29]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use YamlDryRunRequest.ProtoReflect.Descriptor instead.
func (*YamlDryRunRequest) Descriptor() ([]byte, []int) {
	return file_cloud_v1_message_proto_rawDescGZIP(), []int{29}
}

func (x *YamlDryRunRequest) GetRequestId() string {
	if x != nil {
		return x.RequestId
	}
	return ""
}

func (x *YamlDryRunRequest) GetYamlManifests() []*YamlManifest {
	if x != nil {
		return x.YamlManifests
	}
	return nil
}

func (x *YamlDryRunRequest) GetTimeoutSeconds() int32 {
	if x != nil {
		return x.TimeoutSeconds
	}
	return 0
}

// Individual YAML manifest for validation
type YamlManifest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Unique identifier for this manifest
	ManifestId string `protobuf:"bytes,1,opt,name=manifest_id,json=manifestId,proto3" json:"manifest_id,omitempty"`
	// YAML content to validate
	YamlContent string `protobuf:"bytes,2,opt,name=yaml_content,json=yamlContent,proto3" json:"yaml_content,omitempty"`
	// Optional resource type hint (Deployment, Service, etc.)
	ResourceType string `protobuf:"bytes,3,opt,name=resource_type,json=resourceType,proto3" json:"resource_type,omitempty"`
	// Optional namespace (for namespaced resources)
	Namespace     string `protobuf:"bytes,4,opt,name=namespace,proto3" json:"namespace,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *YamlManifest) Reset() {
	*x = YamlManifest{}
	mi := &file_cloud_v1_message_proto_msgTypes[30]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *YamlManifest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*YamlManifest) ProtoMessage() {}

func (x *YamlManifest) ProtoReflect() protoreflect.Message {
	mi := &file_cloud_v1_message_proto_msgTypes[30]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use YamlManifest.ProtoReflect.Descriptor instead.
func (*YamlManifest) Descriptor() ([]byte, []int) {
	return file_cloud_v1_message_proto_rawDescGZIP(), []int{30}
}

func (x *YamlManifest) GetManifestId() string {
	if x != nil {
		return x.ManifestId
	}
	return ""
}

func (x *YamlManifest) GetYamlContent() string {
	if x != nil {
		return x.YamlContent
	}
	return ""
}

func (x *YamlManifest) GetResourceType() string {
	if x != nil {
		return x.ResourceType
	}
	return ""
}

func (x *YamlManifest) GetNamespace() string {
	if x != nil {
		return x.Namespace
	}
	return ""
}

// Individual YAML validation result
type YamlValidationResult struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The manifest ID that was validated
	ManifestId string `protobuf:"bytes,1,opt,name=manifest_id,json=manifestId,proto3" json:"manifest_id,omitempty"`
	// Whether this manifest passed dry-run validation
	Valid bool `protobuf:"varint,2,opt,name=valid,proto3" json:"valid,omitempty"`
	// Error message if validation failed
	ErrorMessage string `protobuf:"bytes,3,opt,name=error_message,json=errorMessage,proto3" json:"error_message,omitempty"`
	// HTTP status code from Kubernetes API
	StatusCode int32 `protobuf:"varint,4,opt,name=status_code,json=statusCode,proto3" json:"status_code,omitempty"`
	// Suggested fixes (if any)
	SuggestedFix  string `protobuf:"bytes,5,opt,name=suggested_fix,json=suggestedFix,proto3" json:"suggested_fix,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *YamlValidationResult) Reset() {
	*x = YamlValidationResult{}
	mi := &file_cloud_v1_message_proto_msgTypes[31]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *YamlValidationResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*YamlValidationResult) ProtoMessage() {}

func (x *YamlValidationResult) ProtoReflect() protoreflect.Message {
	mi := &file_cloud_v1_message_proto_msgTypes[31]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use YamlValidationResult.ProtoReflect.Descriptor instead.
func (*YamlValidationResult) Descriptor() ([]byte, []int) {
	return file_cloud_v1_message_proto_rawDescGZIP(), []int{31}
}

func (x *YamlValidationResult) GetManifestId() string {
	if x != nil {
		return x.ManifestId
	}
	return ""
}

func (x *YamlValidationResult) GetValid() bool {
	if x != nil {
		return x.Valid
	}
	return false
}

func (x *YamlValidationResult) GetErrorMessage() string {
	if x != nil {
		return x.ErrorMessage
	}
	return ""
}

func (x *YamlValidationResult) GetStatusCode() int32 {
	if x != nil {
		return x.StatusCode
	}
	return 0
}

func (x *YamlValidationResult) GetSuggestedFix() string {
	if x != nil {
		return x.SuggestedFix
	}
	return ""
}

// YAML dry-run validation response message
type YamlDryRunResponse struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Request identifier that matches the request
	RequestId string `protobuf:"bytes,1,opt,name=request_id,json=requestId,proto3" json:"request_id,omitempty"`
	// Results for each individual YAML manifest
	Results []*YamlValidationResult `protobuf:"bytes,2,rep,name=results,proto3" json:"results,omitempty"`
	// Any global error message (e.g., operator issues)
	GlobalErrorMessage string `protobuf:"bytes,3,opt,name=global_error_message,json=globalErrorMessage,proto3" json:"global_error_message,omitempty"`
	unknownFields      protoimpl.UnknownFields
	sizeCache          protoimpl.SizeCache
}

func (x *YamlDryRunResponse) Reset() {
	*x = YamlDryRunResponse{}
	mi := &file_cloud_v1_message_proto_msgTypes[32]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *YamlDryRunResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*YamlDryRunResponse) ProtoMessage() {}

func (x *YamlDryRunResponse) ProtoReflect() protoreflect.Message {
	mi := &file_cloud_v1_message_proto_msgTypes[32]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use YamlDryRunResponse.ProtoReflect.Descriptor instead.
func (*YamlDryRunResponse) Descriptor() ([]byte, []int) {
	return file_cloud_v1_message_proto_rawDescGZIP(), []int{32}
}

func (x *YamlDryRunResponse) GetRequestId() string {
	if x != nil {
		return x.RequestId
	}
	return ""
}

func (x *YamlDryRunResponse) GetResults() []*YamlValidationResult {
	if x != nil {
		return x.Results
	}
	return nil
}

func (x *YamlDryRunResponse) GetGlobalErrorMessage() string {
	if x != nil {
		return x.GlobalErrorMessage
	}
	return ""
}

// L7AccessLog message for streaming L7 access logs from Envoy
type L7AccessLog struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Timestamp when the request was received
	Timestamp *timestamppb.Timestamp `protobuf:"bytes,1,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	// Source information
	Source *L7Endpoint `protobuf:"bytes,2,opt,name=source,proto3" json:"source,omitempty"`
	// Destination information
	Destination *L7Endpoint `protobuf:"bytes,3,opt,name=destination,proto3" json:"destination,omitempty"`
	// Protocol information
	Protocol string `protobuf:"bytes,4,opt,name=protocol,proto3" json:"protocol,omitempty"` // TCP, UDP
	// L7 protocol type
	L7Protocol L7ProtocolType `protobuf:"varint,5,opt,name=l7_protocol,json=l7Protocol,proto3,enum=cloud.v1.L7ProtocolType" json:"l7_protocol,omitempty"`
	// HTTP-specific data (when l7_protocol is HTTP)
	HttpData *HTTPAccessLogData `protobuf:"bytes,6,opt,name=http_data,json=httpData,proto3" json:"http_data,omitempty"`
	// TCP-specific data (when l7_protocol is TCP)
	TcpData *TCPAccessLogData `protobuf:"bytes,7,opt,name=tcp_data,json=tcpData,proto3" json:"tcp_data,omitempty"`
	// Duration of the request/connection
	DurationMs int64 `protobuf:"varint,8,opt,name=duration_ms,json=durationMs,proto3" json:"duration_ms,omitempty"`
	// Number of bytes sent upstream
	BytesSent uint64 `protobuf:"varint,9,opt,name=bytes_sent,json=bytesSent,proto3" json:"bytes_sent,omitempty"`
	// Number of bytes received from upstream
	BytesReceived uint64 `protobuf:"varint,10,opt,name=bytes_received,json=bytesReceived,proto3" json:"bytes_received,omitempty"`
	// Whether the request was successful
	Allowed bool `protobuf:"varint,11,opt,name=allowed,proto3" json:"allowed,omitempty"`
	// Node ID from Envoy
	NodeId string `protobuf:"bytes,12,opt,name=node_id,json=nodeId,proto3" json:"node_id,omitempty"`
	// Cluster name from Envoy
	ClusterName string `protobuf:"bytes,13,opt,name=cluster_name,json=clusterName,proto3" json:"cluster_name,omitempty"`
	// Count of times this L7 access log was observed
	Count int64 `protobuf:"varint,14,opt,name=count,proto3" json:"count,omitempty"`
	// When this L7 access log was first seen
	FirstSeen *timestamppb.Timestamp `protobuf:"bytes,15,opt,name=first_seen,json=firstSeen,proto3" json:"first_seen,omitempty"`
	// When this L7 access log was last seen
	LastSeen      *timestamppb.Timestamp `protobuf:"bytes,16,opt,name=last_seen,json=lastSeen,proto3" json:"last_seen,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *L7AccessLog) Reset() {
	*x = L7AccessLog{}
	mi := &file_cloud_v1_message_proto_msgTypes[33]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *L7AccessLog) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*L7AccessLog) ProtoMessage() {}

func (x *L7AccessLog) ProtoReflect() protoreflect.Message {
	mi := &file_cloud_v1_message_proto_msgTypes[33]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use L7AccessLog.ProtoReflect.Descriptor instead.
func (*L7AccessLog) Descriptor() ([]byte, []int) {
	return file_cloud_v1_message_proto_rawDescGZIP(), []int{33}
}

func (x *L7AccessLog) GetTimestamp() *timestamppb.Timestamp {
	if x != nil {
		return x.Timestamp
	}
	return nil
}

func (x *L7AccessLog) GetSource() *L7Endpoint {
	if x != nil {
		return x.Source
	}
	return nil
}

func (x *L7AccessLog) GetDestination() *L7Endpoint {
	if x != nil {
		return x.Destination
	}
	return nil
}

func (x *L7AccessLog) GetProtocol() string {
	if x != nil {
		return x.Protocol
	}
	return ""
}

func (x *L7AccessLog) GetL7Protocol() L7ProtocolType {
	if x != nil {
		return x.L7Protocol
	}
	return L7ProtocolType_L7_PROTOCOL_UNKNOWN
}

func (x *L7AccessLog) GetHttpData() *HTTPAccessLogData {
	if x != nil {
		return x.HttpData
	}
	return nil
}

func (x *L7AccessLog) GetTcpData() *TCPAccessLogData {
	if x != nil {
		return x.TcpData
	}
	return nil
}

func (x *L7AccessLog) GetDurationMs() int64 {
	if x != nil {
		return x.DurationMs
	}
	return 0
}

func (x *L7AccessLog) GetBytesSent() uint64 {
	if x != nil {
		return x.BytesSent
	}
	return 0
}

func (x *L7AccessLog) GetBytesReceived() uint64 {
	if x != nil {
		return x.BytesReceived
	}
	return 0
}

func (x *L7AccessLog) GetAllowed() bool {
	if x != nil {
		return x.Allowed
	}
	return false
}

func (x *L7AccessLog) GetNodeId() string {
	if x != nil {
		return x.NodeId
	}
	return ""
}

func (x *L7AccessLog) GetClusterName() string {
	if x != nil {
		return x.ClusterName
	}
	return ""
}

func (x *L7AccessLog) GetCount() int64 {
	if x != nil {
		return x.Count
	}
	return 0
}

func (x *L7AccessLog) GetFirstSeen() *timestamppb.Timestamp {
	if x != nil {
		return x.FirstSeen
	}
	return nil
}

func (x *L7AccessLog) GetLastSeen() *timestamppb.Timestamp {
	if x != nil {
		return x.LastSeen
	}
	return nil
}

// L7 endpoint information with richer metadata than basic Endpoint
type L7Endpoint struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// IP address
	Ip string `protobuf:"bytes,1,opt,name=ip,proto3" json:"ip,omitempty"`
	// Port number
	Port uint32 `protobuf:"varint,2,opt,name=port,proto3" json:"port,omitempty"`
	// Kubernetes namespace
	Namespace string `protobuf:"bytes,3,opt,name=namespace,proto3" json:"namespace,omitempty"`
	// Kubernetes workload kind (Pod, Service, etc.)
	Kind string `protobuf:"bytes,4,opt,name=kind,proto3" json:"kind,omitempty"`
	// Kubernetes workload name
	Name string `protobuf:"bytes,5,opt,name=name,proto3" json:"name,omitempty"`
	// Service name (if applicable)
	ServiceName   string `protobuf:"bytes,6,opt,name=service_name,json=serviceName,proto3" json:"service_name,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *L7Endpoint) Reset() {
	*x = L7Endpoint{}
	mi := &file_cloud_v1_message_proto_msgTypes[34]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *L7Endpoint) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*L7Endpoint) ProtoMessage() {}

func (x *L7Endpoint) ProtoReflect() protoreflect.Message {
	mi := &file_cloud_v1_message_proto_msgTypes[34]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use L7Endpoint.ProtoReflect.Descriptor instead.
func (*L7Endpoint) Descriptor() ([]byte, []int) {
	return file_cloud_v1_message_proto_rawDescGZIP(), []int{34}
}

func (x *L7Endpoint) GetIp() string {
	if x != nil {
		return x.Ip
	}
	return ""
}

func (x *L7Endpoint) GetPort() uint32 {
	if x != nil {
		return x.Port
	}
	return 0
}

func (x *L7Endpoint) GetNamespace() string {
	if x != nil {
		return x.Namespace
	}
	return ""
}

func (x *L7Endpoint) GetKind() string {
	if x != nil {
		return x.Kind
	}
	return ""
}

func (x *L7Endpoint) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *L7Endpoint) GetServiceName() string {
	if x != nil {
		return x.ServiceName
	}
	return ""
}

// HTTP-specific access log data
type HTTPAccessLogData struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// HTTP method (GET, POST, etc.)
	Method string `protobuf:"bytes,1,opt,name=method,proto3" json:"method,omitempty"`
	// Request path
	Path string `protobuf:"bytes,2,opt,name=path,proto3" json:"path,omitempty"`
	// HTTP version (e.g., "1.1", "2.0")
	Version string `protobuf:"bytes,3,opt,name=version,proto3" json:"version,omitempty"`
	// Host header value
	Host string `protobuf:"bytes,4,opt,name=host,proto3" json:"host,omitempty"`
	// User agent header
	UserAgent string `protobuf:"bytes,5,opt,name=user_agent,json=userAgent,proto3" json:"user_agent,omitempty"`
	// Request headers
	RequestHeaders map[string]string `protobuf:"bytes,6,rep,name=request_headers,json=requestHeaders,proto3" json:"request_headers,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	// Response status code
	ResponseCode uint32 `protobuf:"varint,7,opt,name=response_code,json=responseCode,proto3" json:"response_code,omitempty"`
	// Response headers
	ResponseHeaders map[string]string `protobuf:"bytes,8,rep,name=response_headers,json=responseHeaders,proto3" json:"response_headers,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	// Request size in bytes
	RequestSize uint64 `protobuf:"varint,9,opt,name=request_size,json=requestSize,proto3" json:"request_size,omitempty"`
	// Response size in bytes
	ResponseSize uint64 `protobuf:"varint,10,opt,name=response_size,json=responseSize,proto3" json:"response_size,omitempty"`
	// Referer header
	Referer string `protobuf:"bytes,11,opt,name=referer,proto3" json:"referer,omitempty"`
	// Response flags from Envoy
	ResponseFlags []string `protobuf:"bytes,12,rep,name=response_flags,json=responseFlags,proto3" json:"response_flags,omitempty"`
	// Connection termination details (from CommonProperties)
	ConnectionTerminationDetails string `protobuf:"bytes,13,opt,name=connection_termination_details,json=connectionTerminationDetails,proto3" json:"connection_termination_details,omitempty"`
	// Transport failure reason (if connection failed)
	UpstreamTransportFailureReason string `protobuf:"bytes,14,opt,name=upstream_transport_failure_reason,json=upstreamTransportFailureReason,proto3" json:"upstream_transport_failure_reason,omitempty"`
	// Downstream transport failure reason (if applicable)
	DownstreamTransportFailureReason string `protobuf:"bytes,15,opt,name=downstream_transport_failure_reason,json=downstreamTransportFailureReason,proto3" json:"downstream_transport_failure_reason,omitempty"`
	// Access log type (e.g., "DownstreamStart", "DownstreamEnd")
	AccessLogType string `protobuf:"bytes,16,opt,name=access_log_type,json=accessLogType,proto3" json:"access_log_type,omitempty"`
	// Optional unique stream/connection ID
	StreamId string `protobuf:"bytes,17,opt,name=stream_id,json=streamId,proto3" json:"stream_id,omitempty"`
	// Number of upstream connection attempts
	UpstreamRequestAttemptCount uint32 `protobuf:"varint,18,opt,name=upstream_request_attempt_count,json=upstreamRequestAttemptCount,proto3" json:"upstream_request_attempt_count,omitempty"`
	unknownFields               protoimpl.UnknownFields
	sizeCache                   protoimpl.SizeCache
}

func (x *HTTPAccessLogData) Reset() {
	*x = HTTPAccessLogData{}
	mi := &file_cloud_v1_message_proto_msgTypes[35]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *HTTPAccessLogData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HTTPAccessLogData) ProtoMessage() {}

func (x *HTTPAccessLogData) ProtoReflect() protoreflect.Message {
	mi := &file_cloud_v1_message_proto_msgTypes[35]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HTTPAccessLogData.ProtoReflect.Descriptor instead.
func (*HTTPAccessLogData) Descriptor() ([]byte, []int) {
	return file_cloud_v1_message_proto_rawDescGZIP(), []int{35}
}

func (x *HTTPAccessLogData) GetMethod() string {
	if x != nil {
		return x.Method
	}
	return ""
}

func (x *HTTPAccessLogData) GetPath() string {
	if x != nil {
		return x.Path
	}
	return ""
}

func (x *HTTPAccessLogData) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

func (x *HTTPAccessLogData) GetHost() string {
	if x != nil {
		return x.Host
	}
	return ""
}

func (x *HTTPAccessLogData) GetUserAgent() string {
	if x != nil {
		return x.UserAgent
	}
	return ""
}

func (x *HTTPAccessLogData) GetRequestHeaders() map[string]string {
	if x != nil {
		return x.RequestHeaders
	}
	return nil
}

func (x *HTTPAccessLogData) GetResponseCode() uint32 {
	if x != nil {
		return x.ResponseCode
	}
	return 0
}

func (x *HTTPAccessLogData) GetResponseHeaders() map[string]string {
	if x != nil {
		return x.ResponseHeaders
	}
	return nil
}

func (x *HTTPAccessLogData) GetRequestSize() uint64 {
	if x != nil {
		return x.RequestSize
	}
	return 0
}

func (x *HTTPAccessLogData) GetResponseSize() uint64 {
	if x != nil {
		return x.ResponseSize
	}
	return 0
}

func (x *HTTPAccessLogData) GetReferer() string {
	if x != nil {
		return x.Referer
	}
	return ""
}

func (x *HTTPAccessLogData) GetResponseFlags() []string {
	if x != nil {
		return x.ResponseFlags
	}
	return nil
}

func (x *HTTPAccessLogData) GetConnectionTerminationDetails() string {
	if x != nil {
		return x.ConnectionTerminationDetails
	}
	return ""
}

func (x *HTTPAccessLogData) GetUpstreamTransportFailureReason() string {
	if x != nil {
		return x.UpstreamTransportFailureReason
	}
	return ""
}

func (x *HTTPAccessLogData) GetDownstreamTransportFailureReason() string {
	if x != nil {
		return x.DownstreamTransportFailureReason
	}
	return ""
}

func (x *HTTPAccessLogData) GetAccessLogType() string {
	if x != nil {
		return x.AccessLogType
	}
	return ""
}

func (x *HTTPAccessLogData) GetStreamId() string {
	if x != nil {
		return x.StreamId
	}
	return ""
}

func (x *HTTPAccessLogData) GetUpstreamRequestAttemptCount() uint32 {
	if x != nil {
		return x.UpstreamRequestAttemptCount
	}
	return 0
}

// TCP-specific access log data
type TCPAccessLogData struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Connection state (derived from access log type and termination details)
	ConnectionState string `protobuf:"bytes,1,opt,name=connection_state,json=connectionState,proto3" json:"connection_state,omitempty"`
	// Number of bytes received from downstream
	ReceivedBytes uint64 `protobuf:"varint,2,opt,name=received_bytes,json=receivedBytes,proto3" json:"received_bytes,omitempty"`
	// Number of bytes sent to downstream
	SentBytes uint64 `protobuf:"varint,3,opt,name=sent_bytes,json=sentBytes,proto3" json:"sent_bytes,omitempty"`
	// Connection termination details
	ConnectionTerminationDetails string `protobuf:"bytes,4,opt,name=connection_termination_details,json=connectionTerminationDetails,proto3" json:"connection_termination_details,omitempty"`
	// Transport failure reason (if connection failed)
	UpstreamTransportFailureReason string `protobuf:"bytes,5,opt,name=upstream_transport_failure_reason,json=upstreamTransportFailureReason,proto3" json:"upstream_transport_failure_reason,omitempty"`
	// Downstream transport failure reason (if applicable)
	DownstreamTransportFailureReason string `protobuf:"bytes,6,opt,name=downstream_transport_failure_reason,json=downstreamTransportFailureReason,proto3" json:"downstream_transport_failure_reason,omitempty"`
	// Access log type (e.g., "TcpUpstreamConnected", "TcpConnectionEnd")
	AccessLogType string `protobuf:"bytes,7,opt,name=access_log_type,json=accessLogType,proto3" json:"access_log_type,omitempty"`
	// Optional unique stream/connection ID
	StreamId string `protobuf:"bytes,8,opt,name=stream_id,json=streamId,proto3" json:"stream_id,omitempty"`
	// Number of upstream connection attempts
	UpstreamRequestAttemptCount uint32 `protobuf:"varint,9,opt,name=upstream_request_attempt_count,json=upstreamRequestAttemptCount,proto3" json:"upstream_request_attempt_count,omitempty"`
	unknownFields               protoimpl.UnknownFields
	sizeCache                   protoimpl.SizeCache
}

func (x *TCPAccessLogData) Reset() {
	*x = TCPAccessLogData{}
	mi := &file_cloud_v1_message_proto_msgTypes[36]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TCPAccessLogData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TCPAccessLogData) ProtoMessage() {}

func (x *TCPAccessLogData) ProtoReflect() protoreflect.Message {
	mi := &file_cloud_v1_message_proto_msgTypes[36]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TCPAccessLogData.ProtoReflect.Descriptor instead.
func (*TCPAccessLogData) Descriptor() ([]byte, []int) {
	return file_cloud_v1_message_proto_rawDescGZIP(), []int{36}
}

func (x *TCPAccessLogData) GetConnectionState() string {
	if x != nil {
		return x.ConnectionState
	}
	return ""
}

func (x *TCPAccessLogData) GetReceivedBytes() uint64 {
	if x != nil {
		return x.ReceivedBytes
	}
	return 0
}

func (x *TCPAccessLogData) GetSentBytes() uint64 {
	if x != nil {
		return x.SentBytes
	}
	return 0
}

func (x *TCPAccessLogData) GetConnectionTerminationDetails() string {
	if x != nil {
		return x.ConnectionTerminationDetails
	}
	return ""
}

func (x *TCPAccessLogData) GetUpstreamTransportFailureReason() string {
	if x != nil {
		return x.UpstreamTransportFailureReason
	}
	return ""
}

func (x *TCPAccessLogData) GetDownstreamTransportFailureReason() string {
	if x != nil {
		return x.DownstreamTransportFailureReason
	}
	return ""
}

func (x *TCPAccessLogData) GetAccessLogType() string {
	if x != nil {
		return x.AccessLogType
	}
	return ""
}

func (x *TCPAccessLogData) GetStreamId() string {
	if x != nil {
		return x.StreamId
	}
	return ""
}

func (x *TCPAccessLogData) GetUpstreamRequestAttemptCount() uint32 {
	if x != nil {
		return x.UpstreamRequestAttemptCount
	}
	return 0
}

// Istio Authorization Policy definition
type AuthorizationPolicy struct {
	state      protoimpl.MessageState `protogen:"open.v1"`
	ApiVersion string                 `protobuf:"bytes,1,opt,name=api_version,json=apiVersion,proto3" json:"api_version,omitempty"` // security.istio.io/v1beta1, security.istio.io/v1, etc.
	Kind       string                 `protobuf:"bytes,2,opt,name=kind,proto3" json:"kind,omitempty"`
	// Standard Kubernetes metadata
	Metadata *ObjectMeta              `protobuf:"bytes,3,opt,name=metadata,proto3" json:"metadata,omitempty"`
	Spec     *AuthorizationPolicySpec `protobuf:"bytes,4,opt,name=spec,proto3" json:"spec,omitempty"`
	// Zero-or-more "target" workloads protected by this policy;
	// each entry in the target_workloads list is of the format: "<Namespace>.<Kind>.<Name>".
	TargetWorkloads []string `protobuf:"bytes,5,rep,name=target_workloads,json=targetWorkloads,proto3" json:"target_workloads,omitempty"`
	// Action performed on this authorization policy
	Action        Action `protobuf:"varint,6,opt,name=action,proto3,enum=cloud.v1.Action" json:"action,omitempty"` // CREATE, UPDATE, DELETE
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *AuthorizationPolicy) Reset() {
	*x = AuthorizationPolicy{}
	mi := &file_cloud_v1_message_proto_msgTypes[37]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AuthorizationPolicy) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AuthorizationPolicy) ProtoMessage() {}

func (x *AuthorizationPolicy) ProtoReflect() protoreflect.Message {
	mi := &file_cloud_v1_message_proto_msgTypes[37]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AuthorizationPolicy.ProtoReflect.Descriptor instead.
func (*AuthorizationPolicy) Descriptor() ([]byte, []int) {
	return file_cloud_v1_message_proto_rawDescGZIP(), []int{37}
}

func (x *AuthorizationPolicy) GetApiVersion() string {
	if x != nil {
		return x.ApiVersion
	}
	return ""
}

func (x *AuthorizationPolicy) GetKind() string {
	if x != nil {
		return x.Kind
	}
	return ""
}

func (x *AuthorizationPolicy) GetMetadata() *ObjectMeta {
	if x != nil {
		return x.Metadata
	}
	return nil
}

func (x *AuthorizationPolicy) GetSpec() *AuthorizationPolicySpec {
	if x != nil {
		return x.Spec
	}
	return nil
}

func (x *AuthorizationPolicy) GetTargetWorkloads() []string {
	if x != nil {
		return x.TargetWorkloads
	}
	return nil
}

func (x *AuthorizationPolicy) GetAction() Action {
	if x != nil {
		return x.Action
	}
	return Action_ACTION_UNSPECIFIED
}

// Authorization Policy specification
type AuthorizationPolicySpec struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Optional. The selector decides where to apply the authorization policy.
	Selector *LabelSelector `protobuf:"bytes,1,opt,name=selector,proto3" json:"selector,omitempty"`
	// Optional. A list of rules to match the request.
	Rules []*AuthorizationPolicyRule `protobuf:"bytes,2,rep,name=rules,proto3" json:"rules,omitempty"`
	// Optional. The action to take if the request is matched with the rules.
	Action        AuthorizationPolicyAction `protobuf:"varint,3,opt,name=action,proto3,enum=cloud.v1.AuthorizationPolicyAction" json:"action,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *AuthorizationPolicySpec) Reset() {
	*x = AuthorizationPolicySpec{}
	mi := &file_cloud_v1_message_proto_msgTypes[38]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AuthorizationPolicySpec) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AuthorizationPolicySpec) ProtoMessage() {}

func (x *AuthorizationPolicySpec) ProtoReflect() protoreflect.Message {
	mi := &file_cloud_v1_message_proto_msgTypes[38]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AuthorizationPolicySpec.ProtoReflect.Descriptor instead.
func (*AuthorizationPolicySpec) Descriptor() ([]byte, []int) {
	return file_cloud_v1_message_proto_rawDescGZIP(), []int{38}
}

func (x *AuthorizationPolicySpec) GetSelector() *LabelSelector {
	if x != nil {
		return x.Selector
	}
	return nil
}

func (x *AuthorizationPolicySpec) GetRules() []*AuthorizationPolicyRule {
	if x != nil {
		return x.Rules
	}
	return nil
}

func (x *AuthorizationPolicySpec) GetAction() AuthorizationPolicyAction {
	if x != nil {
		return x.Action
	}
	return AuthorizationPolicyAction_AUTHORIZATION_POLICY_ACTION_UNSPECIFIED
}

// Authorization Policy rule
type AuthorizationPolicyRule struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Optional. from specifies the source of a request.
	From []*AuthorizationPolicyRuleFrom `protobuf:"bytes,1,rep,name=from,proto3" json:"from,omitempty"`
	// Optional. to specifies the operation of a request.
	To []*AuthorizationPolicyRuleTo `protobuf:"bytes,2,rep,name=to,proto3" json:"to,omitempty"`
	// Optional. when specifies a list of additional conditions of a request.
	When          []*AuthorizationPolicyCondition `protobuf:"bytes,3,rep,name=when,proto3" json:"when,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *AuthorizationPolicyRule) Reset() {
	*x = AuthorizationPolicyRule{}
	mi := &file_cloud_v1_message_proto_msgTypes[39]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AuthorizationPolicyRule) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AuthorizationPolicyRule) ProtoMessage() {}

func (x *AuthorizationPolicyRule) ProtoReflect() protoreflect.Message {
	mi := &file_cloud_v1_message_proto_msgTypes[39]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AuthorizationPolicyRule.ProtoReflect.Descriptor instead.
func (*AuthorizationPolicyRule) Descriptor() ([]byte, []int) {
	return file_cloud_v1_message_proto_rawDescGZIP(), []int{39}
}

func (x *AuthorizationPolicyRule) GetFrom() []*AuthorizationPolicyRuleFrom {
	if x != nil {
		return x.From
	}
	return nil
}

func (x *AuthorizationPolicyRule) GetTo() []*AuthorizationPolicyRuleTo {
	if x != nil {
		return x.To
	}
	return nil
}

func (x *AuthorizationPolicyRule) GetWhen() []*AuthorizationPolicyCondition {
	if x != nil {
		return x.When
	}
	return nil
}

// Authorization Policy rule from
type AuthorizationPolicyRuleFrom struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Optional. source specifies the source identities of a request.
	Source        *AuthorizationPolicySource `protobuf:"bytes,1,opt,name=source,proto3" json:"source,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *AuthorizationPolicyRuleFrom) Reset() {
	*x = AuthorizationPolicyRuleFrom{}
	mi := &file_cloud_v1_message_proto_msgTypes[40]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AuthorizationPolicyRuleFrom) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AuthorizationPolicyRuleFrom) ProtoMessage() {}

func (x *AuthorizationPolicyRuleFrom) ProtoReflect() protoreflect.Message {
	mi := &file_cloud_v1_message_proto_msgTypes[40]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AuthorizationPolicyRuleFrom.ProtoReflect.Descriptor instead.
func (*AuthorizationPolicyRuleFrom) Descriptor() ([]byte, []int) {
	return file_cloud_v1_message_proto_rawDescGZIP(), []int{40}
}

func (x *AuthorizationPolicyRuleFrom) GetSource() *AuthorizationPolicySource {
	if x != nil {
		return x.Source
	}
	return nil
}

// Authorization Policy rule to
type AuthorizationPolicyRuleTo struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Optional. operation specifies the operation of a request.
	Operation     *AuthorizationPolicyOperation `protobuf:"bytes,1,opt,name=operation,proto3" json:"operation,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *AuthorizationPolicyRuleTo) Reset() {
	*x = AuthorizationPolicyRuleTo{}
	mi := &file_cloud_v1_message_proto_msgTypes[41]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AuthorizationPolicyRuleTo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AuthorizationPolicyRuleTo) ProtoMessage() {}

func (x *AuthorizationPolicyRuleTo) ProtoReflect() protoreflect.Message {
	mi := &file_cloud_v1_message_proto_msgTypes[41]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AuthorizationPolicyRuleTo.ProtoReflect.Descriptor instead.
func (*AuthorizationPolicyRuleTo) Descriptor() ([]byte, []int) {
	return file_cloud_v1_message_proto_rawDescGZIP(), []int{41}
}

func (x *AuthorizationPolicyRuleTo) GetOperation() *AuthorizationPolicyOperation {
	if x != nil {
		return x.Operation
	}
	return nil
}

// Authorization Policy source
type AuthorizationPolicySource struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Optional. A list of source peer identities (i.e. service account).
	Principals []string `protobuf:"bytes,1,rep,name=principals,proto3" json:"principals,omitempty"`
	// Optional. A list of request identities (i.e. request.auth.principal).
	RequestPrincipals []string `protobuf:"bytes,2,rep,name=request_principals,json=requestPrincipals,proto3" json:"request_principals,omitempty"`
	// Optional. A list of namespaces.
	Namespaces []string `protobuf:"bytes,3,rep,name=namespaces,proto3" json:"namespaces,omitempty"`
	// Optional. A list of IP blocks.
	IpBlocks []string `protobuf:"bytes,4,rep,name=ip_blocks,json=ipBlocks,proto3" json:"ip_blocks,omitempty"`
	// Optional. A list of remote IP blocks.
	RemoteIpBlocks []string `protobuf:"bytes,5,rep,name=remote_ip_blocks,json=remoteIpBlocks,proto3" json:"remote_ip_blocks,omitempty"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *AuthorizationPolicySource) Reset() {
	*x = AuthorizationPolicySource{}
	mi := &file_cloud_v1_message_proto_msgTypes[42]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AuthorizationPolicySource) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AuthorizationPolicySource) ProtoMessage() {}

func (x *AuthorizationPolicySource) ProtoReflect() protoreflect.Message {
	mi := &file_cloud_v1_message_proto_msgTypes[42]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AuthorizationPolicySource.ProtoReflect.Descriptor instead.
func (*AuthorizationPolicySource) Descriptor() ([]byte, []int) {
	return file_cloud_v1_message_proto_rawDescGZIP(), []int{42}
}

func (x *AuthorizationPolicySource) GetPrincipals() []string {
	if x != nil {
		return x.Principals
	}
	return nil
}

func (x *AuthorizationPolicySource) GetRequestPrincipals() []string {
	if x != nil {
		return x.RequestPrincipals
	}
	return nil
}

func (x *AuthorizationPolicySource) GetNamespaces() []string {
	if x != nil {
		return x.Namespaces
	}
	return nil
}

func (x *AuthorizationPolicySource) GetIpBlocks() []string {
	if x != nil {
		return x.IpBlocks
	}
	return nil
}

func (x *AuthorizationPolicySource) GetRemoteIpBlocks() []string {
	if x != nil {
		return x.RemoteIpBlocks
	}
	return nil
}

// Authorization Policy operation
type AuthorizationPolicyOperation struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Optional. A list of HTTP methods (e.g., "GET", "POST").
	Methods []string `protobuf:"bytes,1,rep,name=methods,proto3" json:"methods,omitempty"`
	// Optional. A list of HTTP paths or gRPC methods.
	Paths []string `protobuf:"bytes,2,rep,name=paths,proto3" json:"paths,omitempty"`
	// Optional. A list of ports.
	Ports []string `protobuf:"bytes,3,rep,name=ports,proto3" json:"ports,omitempty"`
	// Optional. A list of hosts.
	Hosts         []string `protobuf:"bytes,4,rep,name=hosts,proto3" json:"hosts,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *AuthorizationPolicyOperation) Reset() {
	*x = AuthorizationPolicyOperation{}
	mi := &file_cloud_v1_message_proto_msgTypes[43]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AuthorizationPolicyOperation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AuthorizationPolicyOperation) ProtoMessage() {}

func (x *AuthorizationPolicyOperation) ProtoReflect() protoreflect.Message {
	mi := &file_cloud_v1_message_proto_msgTypes[43]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AuthorizationPolicyOperation.ProtoReflect.Descriptor instead.
func (*AuthorizationPolicyOperation) Descriptor() ([]byte, []int) {
	return file_cloud_v1_message_proto_rawDescGZIP(), []int{43}
}

func (x *AuthorizationPolicyOperation) GetMethods() []string {
	if x != nil {
		return x.Methods
	}
	return nil
}

func (x *AuthorizationPolicyOperation) GetPaths() []string {
	if x != nil {
		return x.Paths
	}
	return nil
}

func (x *AuthorizationPolicyOperation) GetPorts() []string {
	if x != nil {
		return x.Ports
	}
	return nil
}

func (x *AuthorizationPolicyOperation) GetHosts() []string {
	if x != nil {
		return x.Hosts
	}
	return nil
}

// Authorization Policy condition
type AuthorizationPolicyCondition struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The name of an Istio attribute.
	Key string `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	// Optional. A list of allowed values for the attribute.
	Values []string `protobuf:"bytes,2,rep,name=values,proto3" json:"values,omitempty"`
	// Optional. A list of allowed values for the attribute specified as a regular expression.
	NotValues     []string `protobuf:"bytes,3,rep,name=not_values,json=notValues,proto3" json:"not_values,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *AuthorizationPolicyCondition) Reset() {
	*x = AuthorizationPolicyCondition{}
	mi := &file_cloud_v1_message_proto_msgTypes[44]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AuthorizationPolicyCondition) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AuthorizationPolicyCondition) ProtoMessage() {}

func (x *AuthorizationPolicyCondition) ProtoReflect() protoreflect.Message {
	mi := &file_cloud_v1_message_proto_msgTypes[44]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AuthorizationPolicyCondition.ProtoReflect.Descriptor instead.
func (*AuthorizationPolicyCondition) Descriptor() ([]byte, []int) {
	return file_cloud_v1_message_proto_rawDescGZIP(), []int{44}
}

func (x *AuthorizationPolicyCondition) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

func (x *AuthorizationPolicyCondition) GetValues() []string {
	if x != nil {
		return x.Values
	}
	return nil
}

func (x *AuthorizationPolicyCondition) GetNotValues() []string {
	if x != nil {
		return x.NotValues
	}
	return nil
}

var File_cloud_v1_message_proto protoreflect.FileDescriptor

var file_cloud_v1_message_proto_rawDesc = string([]byte{
	0x0a, 0x16, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2f, 0x76, 0x31, 0x2f, 0x6d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x08, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e,
	0x76, 0x31, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x22, 0xdf, 0x06, 0x0a, 0x11, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x44, 0x61,
	0x74, 0x61, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x24, 0x0a, 0x04, 0x66, 0x6c, 0x6f,
	0x77, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e,
	0x76, 0x31, 0x2e, 0x46, 0x6c, 0x6f, 0x77, 0x48, 0x00, 0x52, 0x04, 0x66, 0x6c, 0x6f, 0x77, 0x12,
	0x40, 0x0a, 0x0e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x70, 0x6f, 0x6c, 0x69, 0x63,
	0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e,
	0x76, 0x31, 0x2e, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79,
	0x48, 0x00, 0x52, 0x0d, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x50, 0x6f, 0x6c, 0x69, 0x63,
	0x79, 0x12, 0x62, 0x0a, 0x1a, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x70, 0x6f, 0x6c,
	0x69, 0x63, 0x79, 0x5f, 0x77, 0x69, 0x74, 0x68, 0x5f, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x76, 0x31,
	0x2e, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x69, 0x65, 0x73,
	0x57, 0x69, 0x74, 0x68, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x48, 0x00, 0x52, 0x17, 0x6e, 0x65,
	0x74, 0x77, 0x6f, 0x72, 0x6b, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x57, 0x69, 0x74, 0x68, 0x45,
	0x72, 0x72, 0x6f, 0x72, 0x73, 0x12, 0x30, 0x0a, 0x08, 0x77, 0x6f, 0x72, 0x6b, 0x6c, 0x6f, 0x61,
	0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e,
	0x76, 0x31, 0x2e, 0x57, 0x6f, 0x72, 0x6b, 0x6c, 0x6f, 0x61, 0x64, 0x48, 0x00, 0x52, 0x08, 0x77,
	0x6f, 0x72, 0x6b, 0x6c, 0x6f, 0x61, 0x64, 0x12, 0x33, 0x0a, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73,
	0x70, 0x61, 0x63, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x63, 0x6c, 0x6f,
	0x75, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x48,
	0x00, 0x52, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x12, 0x46, 0x0a, 0x10,
	0x69, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x76,
	0x31, 0x2e, 0x49, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x43, 0x6f, 0x6d, 0x6d, 0x69,
	0x74, 0x48, 0x00, 0x52, 0x0f, 0x69, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x43, 0x6f,
	0x6d, 0x6d, 0x69, 0x74, 0x12, 0x59, 0x0a, 0x17, 0x6b, 0x75, 0x62, 0x65, 0x72, 0x6e, 0x65, 0x74,
	0x65, 0x73, 0x5f, 0x61, 0x70, 0x69, 0x5f, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x76, 0x31,
	0x2e, 0x4b, 0x75, 0x62, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x65, 0x73, 0x41, 0x50, 0x49, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x48, 0x00, 0x52, 0x15, 0x6b, 0x75, 0x62, 0x65, 0x72, 0x6e,
	0x65, 0x74, 0x65, 0x73, 0x41, 0x70, 0x69, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x2d, 0x0a, 0x07, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x11, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x48, 0x00, 0x52, 0x07, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x56,
	0x0a, 0x16, 0x73, 0x68, 0x65, 0x6c, 0x6c, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x5f,
	0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e,
	0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x68, 0x65, 0x6c, 0x6c, 0x43,
	0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x48, 0x00,
	0x52, 0x14, 0x73, 0x68, 0x65, 0x6c, 0x6c, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3b, 0x0a, 0x0d, 0x6c, 0x37, 0x5f, 0x61, 0x63, 0x63,
	0x65, 0x73, 0x73, 0x5f, 0x6c, 0x6f, 0x67, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e,
	0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x37, 0x41, 0x63, 0x63, 0x65, 0x73,
	0x73, 0x4c, 0x6f, 0x67, 0x48, 0x00, 0x52, 0x0b, 0x6c, 0x37, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73,
	0x4c, 0x6f, 0x67, 0x12, 0x52, 0x0a, 0x14, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x18, 0x0b, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1d, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x75, 0x74,
	0x68, 0x6f, 0x72, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79,
	0x48, 0x00, 0x52, 0x13, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x12, 0x51, 0x0a, 0x15, 0x79, 0x61, 0x6d, 0x6c, 0x5f,
	0x64, 0x72, 0x79, 0x5f, 0x72, 0x75, 0x6e, 0x5f, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x76,
	0x31, 0x2e, 0x59, 0x61, 0x6d, 0x6c, 0x44, 0x72, 0x79, 0x52, 0x75, 0x6e, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x48, 0x00, 0x52, 0x12, 0x79, 0x61, 0x6d, 0x6c, 0x44, 0x72, 0x79, 0x52,
	0x75, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x42, 0x09, 0x0a, 0x07, 0x72, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x59, 0x0a, 0x19, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b,
	0x50, 0x6f, 0x6c, 0x69, 0x63, 0x69, 0x65, 0x73, 0x57, 0x69, 0x74, 0x68, 0x45, 0x72, 0x72, 0x6f,
	0x72, 0x73, 0x12, 0x3c, 0x0a, 0x08, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x69, 0x65, 0x73, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x76, 0x31, 0x2e,
	0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x57, 0x69, 0x74,
	0x68, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x52, 0x08, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x69, 0x65, 0x73,
	0x22, 0x81, 0x01, 0x0a, 0x16, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x50, 0x6f, 0x6c, 0x69,
	0x63, 0x79, 0x57, 0x69, 0x74, 0x68, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x25, 0x0a, 0x0e, 0x6e,
	0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0d, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x50, 0x6f, 0x6c, 0x69,
	0x63, 0x79, 0x12, 0x23, 0x0a, 0x0d, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x5f, 0x6d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x65, 0x72, 0x72, 0x6f, 0x72,
	0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x70, 0x6f, 0x6c, 0x69, 0x63,
	0x79, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x6f, 0x6c, 0x69,
	0x63, 0x79, 0x49, 0x64, 0x22, 0xf0, 0x03, 0x0a, 0x04, 0x46, 0x6c, 0x6f, 0x77, 0x12, 0x15, 0x0a,
	0x06, 0x73, 0x72, 0x63, 0x5f, 0x69, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x73,
	0x72, 0x63, 0x49, 0x70, 0x12, 0x15, 0x0a, 0x06, 0x64, 0x73, 0x74, 0x5f, 0x69, 0x70, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x64, 0x73, 0x74, 0x49, 0x70, 0x12, 0x24, 0x0a, 0x03, 0x73,
	0x72, 0x63, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64,
	0x2e, 0x76, 0x31, 0x2e, 0x45, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x52, 0x03, 0x73, 0x72,
	0x63, 0x12, 0x24, 0x0a, 0x03, 0x64, 0x73, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12,
	0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x6e, 0x64, 0x70, 0x6f, 0x69,
	0x6e, 0x74, 0x52, 0x03, 0x64, 0x73, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x64, 0x69, 0x72, 0x65, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x64, 0x69, 0x72, 0x65,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x04, 0x70, 0x6f, 0x72, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x12,
	0x14, 0x0a, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x39, 0x0a, 0x0a, 0x66, 0x69, 0x72, 0x73, 0x74, 0x5f, 0x73,
	0x65, 0x65, 0x6e, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x66, 0x69, 0x72, 0x73, 0x74, 0x53, 0x65, 0x65, 0x6e,
	0x12, 0x37, 0x0a, 0x09, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x73, 0x65, 0x65, 0x6e, 0x18, 0x0b, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52,
	0x08, 0x6c, 0x61, 0x73, 0x74, 0x53, 0x65, 0x65, 0x6e, 0x12, 0x3e, 0x0a, 0x12, 0x69, 0x6e, 0x67,
	0x72, 0x65, 0x73, 0x73, 0x5f, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x5f, 0x62, 0x79, 0x18,
	0x0c, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x76, 0x31,
	0x2e, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x52, 0x10, 0x69, 0x6e, 0x67, 0x72, 0x65, 0x73, 0x73,
	0x41, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x42, 0x79, 0x12, 0x3c, 0x0a, 0x11, 0x65, 0x67, 0x72,
	0x65, 0x73, 0x73, 0x5f, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x5f, 0x62, 0x79, 0x18, 0x0d,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x76, 0x31, 0x2e,
	0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x52, 0x0f, 0x65, 0x67, 0x72, 0x65, 0x73, 0x73, 0x41, 0x6c,
	0x6c, 0x6f, 0x77, 0x65, 0x64, 0x42, 0x79, 0x22, 0x5a, 0x0a, 0x08, 0x45, 0x6e, 0x64, 0x70, 0x6f,
	0x69, 0x6e, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x6e, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x02, 0x6e, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x6b, 0x69, 0x6e, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x6b, 0x69, 0x6e, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x6c,
	0x61, 0x62, 0x65, 0x6c, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x09, 0x52, 0x06, 0x6c, 0x61, 0x62,
	0x65, 0x6c, 0x73, 0x22, 0x82, 0x01, 0x0a, 0x06, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x12, 0x12,
	0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65,
	0x12, 0x16, 0x0a, 0x06, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09,
	0x52, 0x06, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x72, 0x65, 0x76, 0x69,
	0x73, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x72, 0x65, 0x76, 0x69,
	0x73, 0x69, 0x6f, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x6b, 0x69, 0x6e, 0x64, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x6b, 0x69, 0x6e, 0x64, 0x22, 0x8b, 0x03, 0x0a, 0x12, 0x53, 0x74, 0x72,
	0x65, 0x61, 0x6d, 0x44, 0x61, 0x74, 0x61, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x21, 0x0a, 0x03, 0x61, 0x63, 0x6b, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x63,
	0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x63, 0x6b, 0x48, 0x00, 0x52, 0x03, 0x61,
	0x63, 0x6b, 0x12, 0x49, 0x0a, 0x0e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x70, 0x6f,
	0x6c, 0x69, 0x63, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x63, 0x6c, 0x6f,
	0x75, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x50, 0x6f, 0x6c,
	0x69, 0x63, 0x79, 0x57, 0x69, 0x74, 0x68, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x48, 0x00, 0x52, 0x0d,
	0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x12, 0x56, 0x0a,
	0x16, 0x6b, 0x75, 0x62, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x65, 0x73, 0x5f, 0x61, 0x70, 0x69, 0x5f,
	0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e,
	0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x4b, 0x75, 0x62, 0x65, 0x72, 0x6e, 0x65,
	0x74, 0x65, 0x73, 0x41, 0x50, 0x49, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x00, 0x52,
	0x14, 0x6b, 0x75, 0x62, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x65, 0x73, 0x41, 0x70, 0x69, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x53, 0x0a, 0x15, 0x73, 0x68, 0x65, 0x6c, 0x6c, 0x5f, 0x63,
	0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x76, 0x31, 0x2e,
	0x53, 0x68, 0x65, 0x6c, 0x6c, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x48, 0x00, 0x52, 0x13, 0x73, 0x68, 0x65, 0x6c, 0x6c, 0x43, 0x6f, 0x6d, 0x6d,
	0x61, 0x6e, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x4e, 0x0a, 0x14, 0x79, 0x61,
	0x6d, 0x6c, 0x5f, 0x64, 0x72, 0x79, 0x5f, 0x72, 0x75, 0x6e, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64,
	0x2e, 0x76, 0x31, 0x2e, 0x59, 0x61, 0x6d, 0x6c, 0x44, 0x72, 0x79, 0x52, 0x75, 0x6e, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x00, 0x52, 0x11, 0x79, 0x61, 0x6d, 0x6c, 0x44, 0x72, 0x79,
	0x52, 0x75, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x42, 0x0a, 0x0a, 0x08, 0x72, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x05, 0x0a, 0x03, 0x41, 0x63, 0x6b, 0x22, 0xba, 0x02,
	0x0a, 0x08, 0x57, 0x6f, 0x72, 0x6b, 0x6c, 0x6f, 0x61, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1c,
	0x0a, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x12, 0x10, 0x0a, 0x03,
	0x75, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x75, 0x69, 0x64, 0x12, 0x12,
	0x0a, 0x04, 0x6b, 0x69, 0x6e, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6b, 0x69,
	0x6e, 0x64, 0x12, 0x36, 0x0a, 0x06, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x18, 0x05, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x57, 0x6f,
	0x72, 0x6b, 0x6c, 0x6f, 0x61, 0x64, 0x2e, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x52, 0x06, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x12, 0x39, 0x0a, 0x0a, 0x63, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x28, 0x0a, 0x06, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x10, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x76, 0x31,
	0x2e, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x06, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x1a,
	0x39, 0x0a, 0x0b, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10,
	0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79,
	0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x8a, 0x02, 0x0a, 0x09, 0x4e,
	0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x10, 0x0a, 0x03,
	0x75, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x75, 0x69, 0x64, 0x12, 0x37,
	0x0a, 0x06, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f,
	0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70,
	0x61, 0x63, 0x65, 0x2e, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52,
	0x06, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x12, 0x39, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64,
	0x41, 0x74, 0x12, 0x28, 0x0a, 0x06, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x10, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x06, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x1a, 0x39, 0x0a, 0x0b,
	0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b,
	0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xb6, 0x05, 0x0a, 0x07, 0x53, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73,
	0x70, 0x61, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6e, 0x61, 0x6d, 0x65,
	0x73, 0x70, 0x61, 0x63, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x03, 0x75, 0x69, 0x64, 0x12, 0x35, 0x0a, 0x06, 0x6c, 0x61, 0x62, 0x65, 0x6c,
	0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e,
	0x76, 0x31, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x4c, 0x61, 0x62, 0x65, 0x6c,
	0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x06, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x12, 0x44,
	0x0a, 0x0b, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x05, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x53,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x41, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0b, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x12, 0x3b, 0x0a, 0x08, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72,
	0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x76,
	0x31, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74,
	0x6f, 0x72, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x08, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f,
	0x72, 0x12, 0x2b, 0x0a, 0x05, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x15, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x50, 0x6f, 0x72, 0x74, 0x52, 0x05, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x12, 0x21,
	0x0a, 0x0c, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x69, 0x70, 0x18,
	0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x70,
	0x12, 0x21, 0x0a, 0x0c, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x5f, 0x69, 0x70, 0x73,
	0x18, 0x0a, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0b, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c,
	0x49, 0x70, 0x73, 0x12, 0x39, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61,
	0x74, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x28,
	0x0a, 0x06, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x10,
	0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x06, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x1a, 0x39, 0x0a, 0x0b, 0x4c, 0x61, 0x62, 0x65,
	0x6c, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a,
	0x02, 0x38, 0x01, 0x1a, 0x3e, 0x0a, 0x10, 0x41, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a,
	0x02, 0x38, 0x01, 0x1a, 0x3b, 0x0a, 0x0d, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01,
	0x22, 0x8f, 0x01, 0x0a, 0x0b, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x50, 0x6f, 0x72, 0x74,
	0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c,
	0x12, 0x12, 0x0a, 0x04, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04,
	0x70, 0x6f, 0x72, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x5f, 0x70,
	0x6f, 0x72, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x74, 0x61, 0x72, 0x67, 0x65,
	0x74, 0x50, 0x6f, 0x72, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x70, 0x6f,
	0x72, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x6e, 0x6f, 0x64, 0x65, 0x50, 0x6f,
	0x72, 0x74, 0x22, 0x11, 0x0a, 0x0f, 0x49, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x43,
	0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x22, 0xfc, 0x01, 0x0a, 0x0d, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72,
	0x6b, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x12, 0x1f, 0x0a, 0x0b, 0x61, 0x70, 0x69, 0x5f, 0x76,
	0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x61, 0x70,
	0x69, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x6b, 0x69, 0x6e, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6b, 0x69, 0x6e, 0x64, 0x12, 0x30, 0x0a, 0x08,
	0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14,
	0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74,
	0x4d, 0x65, 0x74, 0x61, 0x52, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x2f,
	0x0a, 0x04, 0x73, 0x70, 0x65, 0x63, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x63,
	0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x50,
	0x6f, 0x6c, 0x69, 0x63, 0x79, 0x53, 0x70, 0x65, 0x63, 0x52, 0x04, 0x73, 0x70, 0x65, 0x63, 0x12,
	0x29, 0x0a, 0x10, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x5f, 0x77, 0x6f, 0x72, 0x6b, 0x6c, 0x6f,
	0x61, 0x64, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0f, 0x74, 0x61, 0x72, 0x67, 0x65,
	0x74, 0x57, 0x6f, 0x72, 0x6b, 0x6c, 0x6f, 0x61, 0x64, 0x73, 0x12, 0x28, 0x0a, 0x06, 0x61, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x10, 0x2e, 0x63, 0x6c, 0x6f,
	0x75, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x06, 0x61, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x22, 0xf9, 0x02, 0x0a, 0x0a, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x4d,
	0x65, 0x74, 0x61, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73,
	0x70, 0x61, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6e, 0x61, 0x6d, 0x65,
	0x73, 0x70, 0x61, 0x63, 0x65, 0x12, 0x38, 0x0a, 0x06, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x18,
	0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x76, 0x31,
	0x2e, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x4d, 0x65, 0x74, 0x61, 0x2e, 0x4c, 0x61, 0x62, 0x65,
	0x6c, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x06, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x12,
	0x47, 0x0a, 0x0b, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x04,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x76, 0x31, 0x2e,
	0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x4d, 0x65, 0x74, 0x61, 0x2e, 0x41, 0x6e, 0x6e, 0x6f, 0x74,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0b, 0x61, 0x6e, 0x6e,
	0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x29, 0x0a, 0x10, 0x72, 0x65, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x56, 0x65, 0x72, 0x73,
	0x69, 0x6f, 0x6e, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x03, 0x75, 0x69, 0x64, 0x1a, 0x39, 0x0a, 0x0b, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01,
	0x1a, 0x3e, 0x0a, 0x10, 0x41, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01,
	0x22, 0xeb, 0x01, 0x0a, 0x11, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x50, 0x6f, 0x6c, 0x69,
	0x63, 0x79, 0x53, 0x70, 0x65, 0x63, 0x12, 0x3a, 0x0a, 0x0c, 0x70, 0x6f, 0x64, 0x5f, 0x73, 0x65,
	0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x63,
	0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x53, 0x65, 0x6c,
	0x65, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x0b, 0x70, 0x6f, 0x64, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74,
	0x6f, 0x72, 0x12, 0x3c, 0x0a, 0x07, 0x69, 0x6e, 0x67, 0x72, 0x65, 0x73, 0x73, 0x18, 0x02, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x4e,
	0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x49, 0x6e, 0x67, 0x72,
	0x65, 0x73, 0x73, 0x52, 0x75, 0x6c, 0x65, 0x52, 0x07, 0x69, 0x6e, 0x67, 0x72, 0x65, 0x73, 0x73,
	0x12, 0x39, 0x0a, 0x06, 0x65, 0x67, 0x72, 0x65, 0x73, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x21, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x4e, 0x65, 0x74, 0x77,
	0x6f, 0x72, 0x6b, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x45, 0x67, 0x72, 0x65, 0x73, 0x73, 0x52,
	0x75, 0x6c, 0x65, 0x52, 0x06, 0x65, 0x67, 0x72, 0x65, 0x73, 0x73, 0x12, 0x21, 0x0a, 0x0c, 0x70,
	0x6f, 0x6c, 0x69, 0x63, 0x79, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28,
	0x09, 0x52, 0x0b, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x54, 0x79, 0x70, 0x65, 0x73, 0x22, 0xed,
	0x01, 0x0a, 0x0d, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72,
	0x12, 0x4b, 0x0a, 0x0c, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x76,
	0x31, 0x2e, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x2e,
	0x4d, 0x61, 0x74, 0x63, 0x68, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x52, 0x0b, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x12, 0x4f, 0x0a,
	0x11, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x65, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64,
	0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f,
	0x72, 0x52, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x10, 0x6d, 0x61,
	0x74, 0x63, 0x68, 0x45, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x1a, 0x3e,
	0x0a, 0x10, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x60,
	0x0a, 0x18, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x52,
	0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65,
	0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x1a, 0x0a, 0x08,
	0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x12, 0x16, 0x0a, 0x06, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73,
	0x22, 0x7e, 0x0a, 0x18, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x50, 0x6f, 0x6c, 0x69, 0x63,
	0x79, 0x49, 0x6e, 0x67, 0x72, 0x65, 0x73, 0x73, 0x52, 0x75, 0x6c, 0x65, 0x12, 0x2f, 0x0a, 0x04,
	0x66, 0x72, 0x6f, 0x6d, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x63, 0x6c, 0x6f,
	0x75, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x50, 0x6f, 0x6c,
	0x69, 0x63, 0x79, 0x50, 0x65, 0x65, 0x72, 0x52, 0x04, 0x66, 0x72, 0x6f, 0x6d, 0x12, 0x31, 0x0a,
	0x05, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x63,
	0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x50,
	0x6f, 0x6c, 0x69, 0x63, 0x79, 0x50, 0x6f, 0x72, 0x74, 0x52, 0x05, 0x70, 0x6f, 0x72, 0x74, 0x73,
	0x22, 0x79, 0x0a, 0x17, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x50, 0x6f, 0x6c, 0x69, 0x63,
	0x79, 0x45, 0x67, 0x72, 0x65, 0x73, 0x73, 0x52, 0x75, 0x6c, 0x65, 0x12, 0x2b, 0x0a, 0x02, 0x74,
	0x6f, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e,
	0x76, 0x31, 0x2e, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79,
	0x50, 0x65, 0x65, 0x72, 0x52, 0x02, 0x74, 0x6f, 0x12, 0x31, 0x0a, 0x05, 0x70, 0x6f, 0x72, 0x74,
	0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e,
	0x76, 0x31, 0x2e, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79,
	0x50, 0x6f, 0x72, 0x74, 0x52, 0x05, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x22, 0xc5, 0x01, 0x0a, 0x11,
	0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x50, 0x65, 0x65,
	0x72, 0x12, 0x3a, 0x0a, 0x0c, 0x70, 0x6f, 0x64, 0x5f, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f,
	0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e,
	0x76, 0x31, 0x2e, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72,
	0x52, 0x0b, 0x70, 0x6f, 0x64, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x46, 0x0a,
	0x12, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x5f, 0x73, 0x65, 0x6c, 0x65, 0x63,
	0x74, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x63, 0x6c, 0x6f, 0x75,
	0x64, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74,
	0x6f, 0x72, 0x52, 0x11, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x53, 0x65, 0x6c,
	0x65, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x2c, 0x0a, 0x08, 0x69, 0x70, 0x5f, 0x62, 0x6c, 0x6f, 0x63,
	0x6b, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e,
	0x76, 0x31, 0x2e, 0x49, 0x50, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x52, 0x07, 0x69, 0x70, 0x42, 0x6c,
	0x6f, 0x63, 0x6b, 0x22, 0x35, 0x0a, 0x07, 0x49, 0x50, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x12, 0x12,
	0x0a, 0x04, 0x63, 0x69, 0x64, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x63, 0x69,
	0x64, 0x72, 0x12, 0x16, 0x0a, 0x06, 0x65, 0x78, 0x63, 0x65, 0x70, 0x74, 0x18, 0x02, 0x20, 0x03,
	0x28, 0x09, 0x52, 0x06, 0x65, 0x78, 0x63, 0x65, 0x70, 0x74, 0x22, 0x8d, 0x01, 0x0a, 0x11, 0x4e,
	0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x50, 0x6f, 0x72, 0x74,
	0x12, 0x1a, 0x0a, 0x08, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x12, 0x14, 0x0a, 0x04,
	0x70, 0x6f, 0x72, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x48, 0x00, 0x52, 0x04, 0x70, 0x6f,
	0x72, 0x74, 0x12, 0x1d, 0x0a, 0x09, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x08, 0x70, 0x6f, 0x72, 0x74, 0x4e, 0x61, 0x6d,
	0x65, 0x12, 0x19, 0x0a, 0x08, 0x65, 0x6e, 0x64, 0x5f, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x07, 0x65, 0x6e, 0x64, 0x50, 0x6f, 0x72, 0x74, 0x42, 0x0c, 0x0a, 0x0a,
	0x70, 0x6f, 0x72, 0x74, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x7b, 0x0a, 0x14, 0x4b, 0x75,
	0x62, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x65, 0x73, 0x41, 0x50, 0x49, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49,
	0x64, 0x12, 0x1b, 0x0a, 0x09, 0x61, 0x70, 0x69, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x73, 0x18, 0x02,
	0x20, 0x03, 0x28, 0x09, 0x52, 0x08, 0x61, 0x70, 0x69, 0x50, 0x61, 0x74, 0x68, 0x73, 0x12, 0x27,
	0x0a, 0x0f, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x5f, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64,
	0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0e, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74,
	0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x22, 0xb5, 0x01, 0x0a, 0x13, 0x4b, 0x75, 0x62, 0x65,
	0x72, 0x6e, 0x65, 0x74, 0x65, 0x73, 0x41, 0x50, 0x49, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12,
	0x19, 0x0a, 0x08, 0x61, 0x70, 0x69, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x61, 0x70, 0x69, 0x50, 0x61, 0x74, 0x68, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x75,
	0x63, 0x63, 0x65, 0x73, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x73, 0x75, 0x63,
	0x63, 0x65, 0x73, 0x73, 0x12, 0x23, 0x0a, 0x0d, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x72, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x44, 0x61, 0x74, 0x61, 0x12, 0x23, 0x0a, 0x0d, 0x65, 0x72, 0x72,
	0x6f, 0x72, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0c, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x1f,
	0x0a, 0x0b, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x0a, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x22,
	0xa1, 0x01, 0x0a, 0x15, 0x4b, 0x75, 0x62, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x65, 0x73, 0x41, 0x50,
	0x49, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x72, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x72,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x64, 0x12, 0x37, 0x0a, 0x07, 0x72, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x63, 0x6c, 0x6f, 0x75,
	0x64, 0x2e, 0x76, 0x31, 0x2e, 0x4b, 0x75, 0x62, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x65, 0x73, 0x41,
	0x50, 0x49, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x07, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x73, 0x12, 0x30, 0x0a, 0x14, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x5f, 0x65, 0x72, 0x72, 0x6f,
	0x72, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x12, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x4d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x22, 0x79, 0x0a, 0x13, 0x53, 0x68, 0x65, 0x6c, 0x6c, 0x43, 0x6f, 0x6d, 0x6d,
	0x61, 0x6e, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x72, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x6f, 0x6d,
	0x6d, 0x61, 0x6e, 0x64, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x08, 0x63, 0x6f, 0x6d,
	0x6d, 0x61, 0x6e, 0x64, 0x73, 0x12, 0x27, 0x0a, 0x0f, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74,
	0x5f, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0e,
	0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x22, 0x95,
	0x01, 0x0a, 0x12, 0x53, 0x68, 0x65, 0x6c, 0x6c, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x52,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x12,
	0x18, 0x0a, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x64,
	0x6f, 0x75, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x74, 0x64, 0x6f, 0x75,
	0x74, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x64, 0x65, 0x72, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x73, 0x74, 0x64, 0x65, 0x72, 0x72, 0x12, 0x1b, 0x0a, 0x09, 0x65, 0x78, 0x69,
	0x74, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x65, 0x78,
	0x69, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x22, 0x9f, 0x01, 0x0a, 0x14, 0x53, 0x68, 0x65, 0x6c, 0x6c,
	0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x1d, 0x0a, 0x0a, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x64, 0x12, 0x36,
	0x0a, 0x07, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x1c, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x68, 0x65, 0x6c, 0x6c,
	0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x07, 0x72,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x12, 0x30, 0x0a, 0x14, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c,
	0x5f, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x45, 0x72, 0x72, 0x6f,
	0x72, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x9a, 0x01, 0x0a, 0x11, 0x59, 0x61, 0x6d,
	0x6c, 0x44, 0x72, 0x79, 0x52, 0x75, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1d,
	0x0a, 0x0a, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x64, 0x12, 0x3d, 0x0a,
	0x0e, 0x79, 0x61, 0x6d, 0x6c, 0x5f, 0x6d, 0x61, 0x6e, 0x69, 0x66, 0x65, 0x73, 0x74, 0x73, 0x18,
	0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x76, 0x31,
	0x2e, 0x59, 0x61, 0x6d, 0x6c, 0x4d, 0x61, 0x6e, 0x69, 0x66, 0x65, 0x73, 0x74, 0x52, 0x0d, 0x79,
	0x61, 0x6d, 0x6c, 0x4d, 0x61, 0x6e, 0x69, 0x66, 0x65, 0x73, 0x74, 0x73, 0x12, 0x27, 0x0a, 0x0f,
	0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x5f, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0e, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x53, 0x65,
	0x63, 0x6f, 0x6e, 0x64, 0x73, 0x22, 0x95, 0x01, 0x0a, 0x0c, 0x59, 0x61, 0x6d, 0x6c, 0x4d, 0x61,
	0x6e, 0x69, 0x66, 0x65, 0x73, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x6d, 0x61, 0x6e, 0x69, 0x66, 0x65,
	0x73, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x6d, 0x61, 0x6e,
	0x69, 0x66, 0x65, 0x73, 0x74, 0x49, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x79, 0x61, 0x6d, 0x6c, 0x5f,
	0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x79,
	0x61, 0x6d, 0x6c, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x12, 0x23, 0x0a, 0x0d, 0x72, 0x65,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0c, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x1c, 0x0a, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x22, 0xb8, 0x01,
	0x0a, 0x14, 0x59, 0x61, 0x6d, 0x6c, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x6d, 0x61, 0x6e, 0x69, 0x66, 0x65,
	0x73, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x6d, 0x61, 0x6e,
	0x69, 0x66, 0x65, 0x73, 0x74, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x69, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x12, 0x23, 0x0a,
	0x0d, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x4d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x63, 0x6f, 0x64,
	0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43,
	0x6f, 0x64, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x73, 0x75, 0x67, 0x67, 0x65, 0x73, 0x74, 0x65, 0x64,
	0x5f, 0x66, 0x69, 0x78, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x73, 0x75, 0x67, 0x67,
	0x65, 0x73, 0x74, 0x65, 0x64, 0x46, 0x69, 0x78, 0x22, 0x9f, 0x01, 0x0a, 0x12, 0x59, 0x61, 0x6d,
	0x6c, 0x44, 0x72, 0x79, 0x52, 0x75, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x1d, 0x0a, 0x0a, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x64, 0x12, 0x38,
	0x0a, 0x07, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x1e, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x59, 0x61, 0x6d, 0x6c, 0x56,
	0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52,
	0x07, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x12, 0x30, 0x0a, 0x14, 0x67, 0x6c, 0x6f, 0x62,
	0x61, 0x6c, 0x5f, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x45, 0x72,
	0x72, 0x6f, 0x72, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0xbc, 0x05, 0x0a, 0x0b, 0x4c,
	0x37, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x4c, 0x6f, 0x67, 0x12, 0x38, 0x0a, 0x09, 0x74, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x12, 0x2c, 0x0a, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x76, 0x31, 0x2e,
	0x4c, 0x37, 0x45, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x52, 0x06, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x12, 0x36, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e,
	0x76, 0x31, 0x2e, 0x4c, 0x37, 0x45, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x52, 0x0b, 0x64,
	0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x12, 0x39, 0x0a, 0x0b, 0x6c, 0x37, 0x5f, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x18, 0x2e, 0x63, 0x6c,
	0x6f, 0x75, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x37, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f,
	0x6c, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0a, 0x6c, 0x37, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f,
	0x6c, 0x12, 0x38, 0x0a, 0x09, 0x68, 0x74, 0x74, 0x70, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x76, 0x31, 0x2e,
	0x48, 0x54, 0x54, 0x50, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x4c, 0x6f, 0x67, 0x44, 0x61, 0x74,
	0x61, 0x52, 0x08, 0x68, 0x74, 0x74, 0x70, 0x44, 0x61, 0x74, 0x61, 0x12, 0x35, 0x0a, 0x08, 0x74,
	0x63, 0x70, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x43, 0x50, 0x41, 0x63, 0x63, 0x65,
	0x73, 0x73, 0x4c, 0x6f, 0x67, 0x44, 0x61, 0x74, 0x61, 0x52, 0x07, 0x74, 0x63, 0x70, 0x44, 0x61,
	0x74, 0x61, 0x12, 0x1f, 0x0a, 0x0b, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6d,
	0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x4d, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x62, 0x79, 0x74, 0x65, 0x73, 0x5f, 0x73, 0x65, 0x6e,
	0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x62, 0x79, 0x74, 0x65, 0x73, 0x53, 0x65,
	0x6e, 0x74, 0x12, 0x25, 0x0a, 0x0e, 0x62, 0x79, 0x74, 0x65, 0x73, 0x5f, 0x72, 0x65, 0x63, 0x65,
	0x69, 0x76, 0x65, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0d, 0x62, 0x79, 0x74, 0x65,
	0x73, 0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x6c, 0x6c,
	0x6f, 0x77, 0x65, 0x64, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x61, 0x6c, 0x6c, 0x6f,
	0x77, 0x65, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x0c,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6e, 0x6f, 0x64, 0x65, 0x49, 0x64, 0x12, 0x21, 0x0a, 0x0c,
	0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x0d, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0b, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12,
	0x14, 0x0a, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x39, 0x0a, 0x0a, 0x66, 0x69, 0x72, 0x73, 0x74, 0x5f, 0x73,
	0x65, 0x65, 0x6e, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x66, 0x69, 0x72, 0x73, 0x74, 0x53, 0x65, 0x65, 0x6e,
	0x12, 0x37, 0x0a, 0x09, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x73, 0x65, 0x65, 0x6e, 0x18, 0x10, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52,
	0x08, 0x6c, 0x61, 0x73, 0x74, 0x53, 0x65, 0x65, 0x6e, 0x22, 0x99, 0x01, 0x0a, 0x0a, 0x4c, 0x37,
	0x45, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x70, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x70, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x6f, 0x72, 0x74,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x70, 0x6f, 0x72, 0x74, 0x12, 0x1c, 0x0a, 0x09,
	0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6b, 0x69,
	0x6e, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6b, 0x69, 0x6e, 0x64, 0x12, 0x12,
	0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0xe2, 0x07, 0x0a, 0x11, 0x48, 0x54, 0x54, 0x50, 0x41, 0x63,
	0x63, 0x65, 0x73, 0x73, 0x4c, 0x6f, 0x67, 0x44, 0x61, 0x74, 0x61, 0x12, 0x16, 0x0a, 0x06, 0x6d,
	0x65, 0x74, 0x68, 0x6f, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6d, 0x65, 0x74,
	0x68, 0x6f, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x61, 0x74, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x70, 0x61, 0x74, 0x68, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69,
	0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f,
	0x6e, 0x12, 0x12, 0x0a, 0x04, 0x68, 0x6f, 0x73, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x68, 0x6f, 0x73, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x61, 0x67,
	0x65, 0x6e, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x75, 0x73, 0x65, 0x72, 0x41,
	0x67, 0x65, 0x6e, 0x74, 0x12, 0x58, 0x0a, 0x0f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f,
	0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2f, 0x2e,
	0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x48, 0x54, 0x54, 0x50, 0x41, 0x63, 0x63,
	0x65, 0x73, 0x73, 0x4c, 0x6f, 0x67, 0x44, 0x61, 0x74, 0x61, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0e,
	0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x12, 0x23,
	0x0a, 0x0d, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x43,
	0x6f, 0x64, 0x65, 0x12, 0x5b, 0x0a, 0x10, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x5f,
	0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x30, 0x2e,
	0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x48, 0x54, 0x54, 0x50, 0x41, 0x63, 0x63,
	0x65, 0x73, 0x73, 0x4c, 0x6f, 0x67, 0x44, 0x61, 0x74, 0x61, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52,
	0x0f, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73,
	0x12, 0x21, 0x0a, 0x0c, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x73, 0x69, 0x7a, 0x65,
	0x18, 0x09, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0b, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x53,
	0x69, 0x7a, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x5f,
	0x73, 0x69, 0x7a, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0c, 0x72, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x72, 0x65, 0x66, 0x65,
	0x72, 0x65, 0x72, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x72, 0x65, 0x66, 0x65, 0x72,
	0x65, 0x72, 0x12, 0x25, 0x0a, 0x0e, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x5f, 0x66,
	0x6c, 0x61, 0x67, 0x73, 0x18, 0x0c, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0d, 0x72, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x46, 0x6c, 0x61, 0x67, 0x73, 0x12, 0x44, 0x0a, 0x1e, 0x63, 0x6f, 0x6e,
	0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x5f, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x18, 0x0d, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x1c, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x65, 0x72,
	0x6d, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x12,
	0x49, 0x0a, 0x21, 0x75, 0x70, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x5f, 0x74, 0x72, 0x61, 0x6e,
	0x73, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x66, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x5f, 0x72, 0x65,
	0x61, 0x73, 0x6f, 0x6e, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x1e, 0x75, 0x70, 0x73, 0x74,
	0x72, 0x65, 0x61, 0x6d, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x46, 0x61, 0x69,
	0x6c, 0x75, 0x72, 0x65, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x12, 0x4d, 0x0a, 0x23, 0x64, 0x6f,
	0x77, 0x6e, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x5f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x6f,
	0x72, 0x74, 0x5f, 0x66, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x5f, 0x72, 0x65, 0x61, 0x73, 0x6f,
	0x6e, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x20, 0x64, 0x6f, 0x77, 0x6e, 0x73, 0x74, 0x72,
	0x65, 0x61, 0x6d, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x46, 0x61, 0x69, 0x6c,
	0x75, 0x72, 0x65, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x12, 0x26, 0x0a, 0x0f, 0x61, 0x63, 0x63,
	0x65, 0x73, 0x73, 0x5f, 0x6c, 0x6f, 0x67, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x10, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0d, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x4c, 0x6f, 0x67, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x1b, 0x0a, 0x09, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x11,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x49, 0x64, 0x12, 0x43,
	0x0a, 0x1e, 0x75, 0x70, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x5f, 0x61, 0x74, 0x74, 0x65, 0x6d, 0x70, 0x74, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x18, 0x12, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x1b, 0x75, 0x70, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x41, 0x74, 0x74, 0x65, 0x6d, 0x70, 0x74, 0x43, 0x6f,
	0x75, 0x6e, 0x74, 0x1a, 0x41, 0x0a, 0x13, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x65,
	0x61, 0x64, 0x65, 0x72, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65,
	0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x42, 0x0a, 0x14, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10,
	0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79,
	0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xed, 0x03, 0x0a, 0x10, 0x54,
	0x43, 0x50, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x4c, 0x6f, 0x67, 0x44, 0x61, 0x74, 0x61, 0x12,
	0x29, 0x0a, 0x10, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x74,
	0x61, 0x74, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x63, 0x6f, 0x6e, 0x6e, 0x65,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x25, 0x0a, 0x0e, 0x72, 0x65,
	0x63, 0x65, 0x69, 0x76, 0x65, 0x64, 0x5f, 0x62, 0x79, 0x74, 0x65, 0x73, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x0d, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x64, 0x42, 0x79, 0x74, 0x65,
	0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x65, 0x6e, 0x74, 0x5f, 0x62, 0x79, 0x74, 0x65, 0x73, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x73, 0x65, 0x6e, 0x74, 0x42, 0x79, 0x74, 0x65, 0x73,
	0x12, 0x44, 0x0a, 0x1e, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74,
	0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x64, 0x65, 0x74, 0x61, 0x69,
	0x6c, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x1c, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x54, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44,
	0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x12, 0x49, 0x0a, 0x21, 0x75, 0x70, 0x73, 0x74, 0x72, 0x65,
	0x61, 0x6d, 0x5f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x66, 0x61, 0x69,
	0x6c, 0x75, 0x72, 0x65, 0x5f, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x1e, 0x75, 0x70, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x54, 0x72, 0x61, 0x6e, 0x73,
	0x70, 0x6f, 0x72, 0x74, 0x46, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x52, 0x65, 0x61, 0x73, 0x6f,
	0x6e, 0x12, 0x4d, 0x0a, 0x23, 0x64, 0x6f, 0x77, 0x6e, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x5f,
	0x74, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x66, 0x61, 0x69, 0x6c, 0x75, 0x72,
	0x65, 0x5f, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x20,
	0x64, 0x6f, 0x77, 0x6e, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x70,
	0x6f, 0x72, 0x74, 0x46, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e,
	0x12, 0x26, 0x0a, 0x0f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x5f, 0x6c, 0x6f, 0x67, 0x5f, 0x74,
	0x79, 0x70, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x61, 0x63, 0x63, 0x65, 0x73,
	0x73, 0x4c, 0x6f, 0x67, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x73, 0x74, 0x72, 0x65,
	0x61, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x73, 0x74, 0x72,
	0x65, 0x61, 0x6d, 0x49, 0x64, 0x12, 0x43, 0x0a, 0x1e, 0x75, 0x70, 0x73, 0x74, 0x72, 0x65, 0x61,
	0x6d, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x61, 0x74, 0x74, 0x65, 0x6d, 0x70,
	0x74, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x1b, 0x75,
	0x70, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x41, 0x74,
	0x74, 0x65, 0x6d, 0x70, 0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0x88, 0x02, 0x0a, 0x13, 0x41,
	0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x6f, 0x6c, 0x69,
	0x63, 0x79, 0x12, 0x1f, 0x0a, 0x0b, 0x61, 0x70, 0x69, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f,
	0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x61, 0x70, 0x69, 0x56, 0x65, 0x72, 0x73,
	0x69, 0x6f, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x6b, 0x69, 0x6e, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x6b, 0x69, 0x6e, 0x64, 0x12, 0x30, 0x0a, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64,
	0x61, 0x74, 0x61, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x63, 0x6c, 0x6f, 0x75,
	0x64, 0x2e, 0x76, 0x31, 0x2e, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x4d, 0x65, 0x74, 0x61, 0x52,
	0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x35, 0x0a, 0x04, 0x73, 0x70, 0x65,
	0x63, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e,
	0x76, 0x31, 0x2e, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x53, 0x70, 0x65, 0x63, 0x52, 0x04, 0x73, 0x70, 0x65, 0x63,
	0x12, 0x29, 0x0a, 0x10, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x5f, 0x77, 0x6f, 0x72, 0x6b, 0x6c,
	0x6f, 0x61, 0x64, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0f, 0x74, 0x61, 0x72, 0x67,
	0x65, 0x74, 0x57, 0x6f, 0x72, 0x6b, 0x6c, 0x6f, 0x61, 0x64, 0x73, 0x12, 0x28, 0x0a, 0x06, 0x61,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x10, 0x2e, 0x63, 0x6c,
	0x6f, 0x75, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x06, 0x61,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0xc4, 0x01, 0x0a, 0x17, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72,
	0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x53, 0x70, 0x65,
	0x63, 0x12, 0x33, 0x0a, 0x08, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x4c,
	0x61, 0x62, 0x65, 0x6c, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x08, 0x73, 0x65,
	0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x37, 0x0a, 0x05, 0x72, 0x75, 0x6c, 0x65, 0x73, 0x18,
	0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x76, 0x31,
	0x2e, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x6f,
	0x6c, 0x69, 0x63, 0x79, 0x52, 0x75, 0x6c, 0x65, 0x52, 0x05, 0x72, 0x75, 0x6c, 0x65, 0x73, 0x12,
	0x3b, 0x0a, 0x06, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x23, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x75, 0x74, 0x68, 0x6f,
	0x72, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x41, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x06, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0xc5, 0x01, 0x0a,
	0x17, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x6f,
	0x6c, 0x69, 0x63, 0x79, 0x52, 0x75, 0x6c, 0x65, 0x12, 0x39, 0x0a, 0x04, 0x66, 0x72, 0x6f, 0x6d,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x76,
	0x31, 0x2e, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50,
	0x6f, 0x6c, 0x69, 0x63, 0x79, 0x52, 0x75, 0x6c, 0x65, 0x46, 0x72, 0x6f, 0x6d, 0x52, 0x04, 0x66,
	0x72, 0x6f, 0x6d, 0x12, 0x33, 0x0a, 0x02, 0x74, 0x6f, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x23, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x75, 0x74, 0x68, 0x6f,
	0x72, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x52, 0x75,
	0x6c, 0x65, 0x54, 0x6f, 0x52, 0x02, 0x74, 0x6f, 0x12, 0x3a, 0x0a, 0x04, 0x77, 0x68, 0x65, 0x6e,
	0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x76,
	0x31, 0x2e, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50,
	0x6f, 0x6c, 0x69, 0x63, 0x79, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x04,
	0x77, 0x68, 0x65, 0x6e, 0x22, 0x5a, 0x0a, 0x1b, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x52, 0x75, 0x6c, 0x65, 0x46,
	0x72, 0x6f, 0x6d, 0x12, 0x3b, 0x0a, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x41,
	0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x6f, 0x6c, 0x69,
	0x63, 0x79, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x22, 0x61, 0x0a, 0x19, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x52, 0x75, 0x6c, 0x65, 0x54, 0x6f, 0x12, 0x44, 0x0a,
	0x09, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x26, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x75, 0x74, 0x68,
	0x6f, 0x72, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x4f,
	0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x22, 0xd1, 0x01, 0x0a, 0x19, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x53, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x70, 0x72, 0x69, 0x6e, 0x63, 0x69, 0x70, 0x61, 0x6c, 0x73, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0a, 0x70, 0x72, 0x69, 0x6e, 0x63, 0x69, 0x70, 0x61, 0x6c,
	0x73, 0x12, 0x2d, 0x0a, 0x12, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x70, 0x72, 0x69,
	0x6e, 0x63, 0x69, 0x70, 0x61, 0x6c, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x11, 0x72,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x50, 0x72, 0x69, 0x6e, 0x63, 0x69, 0x70, 0x61, 0x6c, 0x73,
	0x12, 0x1e, 0x0a, 0x0a, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x73, 0x18, 0x03,
	0x20, 0x03, 0x28, 0x09, 0x52, 0x0a, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x73,
	0x12, 0x1b, 0x0a, 0x09, 0x69, 0x70, 0x5f, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x18, 0x04, 0x20,
	0x03, 0x28, 0x09, 0x52, 0x08, 0x69, 0x70, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x12, 0x28, 0x0a,
	0x10, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x5f, 0x69, 0x70, 0x5f, 0x62, 0x6c, 0x6f, 0x63, 0x6b,
	0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0e, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x49,
	0x70, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x22, 0x7a, 0x0a, 0x1c, 0x41, 0x75, 0x74, 0x68, 0x6f,
	0x72, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x4f, 0x70,
	0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x74, 0x68, 0x6f,
	0x64, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64,
	0x73, 0x12, 0x14, 0x0a, 0x05, 0x70, 0x61, 0x74, 0x68, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09,
	0x52, 0x05, 0x70, 0x61, 0x74, 0x68, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x70, 0x6f, 0x72, 0x74, 0x73,
	0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x05, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x12, 0x14, 0x0a,
	0x05, 0x68, 0x6f, 0x73, 0x74, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x09, 0x52, 0x05, 0x68, 0x6f,
	0x73, 0x74, 0x73, 0x22, 0x67, 0x0a, 0x1c, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x16, 0x0a, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x18,
	0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x12, 0x1d, 0x0a,
	0x0a, 0x6e, 0x6f, 0x74, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28,
	0x09, 0x52, 0x09, 0x6e, 0x6f, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x2a, 0x59, 0x0a, 0x06,
	0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x16, 0x0a, 0x12, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e,
	0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x11,
	0x0a, 0x0d, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x43, 0x52, 0x45, 0x41, 0x54, 0x45, 0x10,
	0x01, 0x12, 0x11, 0x0a, 0x0d, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x55, 0x50, 0x44, 0x41,
	0x54, 0x45, 0x10, 0x02, 0x12, 0x11, 0x0a, 0x0d, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x44,
	0x45, 0x4c, 0x45, 0x54, 0x45, 0x10, 0x03, 0x2a, 0x6a, 0x0a, 0x0e, 0x4c, 0x37, 0x50, 0x72, 0x6f,
	0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x12, 0x17, 0x0a, 0x13, 0x4c, 0x37, 0x5f,
	0x50, 0x52, 0x4f, 0x54, 0x4f, 0x43, 0x4f, 0x4c, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e,
	0x10, 0x00, 0x12, 0x14, 0x0a, 0x10, 0x4c, 0x37, 0x5f, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x43, 0x4f,
	0x4c, 0x5f, 0x48, 0x54, 0x54, 0x50, 0x10, 0x01, 0x12, 0x13, 0x0a, 0x0f, 0x4c, 0x37, 0x5f, 0x50,
	0x52, 0x4f, 0x54, 0x4f, 0x43, 0x4f, 0x4c, 0x5f, 0x54, 0x43, 0x50, 0x10, 0x02, 0x12, 0x14, 0x0a,
	0x10, 0x4c, 0x37, 0x5f, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x43, 0x4f, 0x4c, 0x5f, 0x47, 0x52, 0x50,
	0x43, 0x10, 0x03, 0x2a, 0xe4, 0x01, 0x0a, 0x19, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x41, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x2b, 0x0a, 0x27, 0x41, 0x55, 0x54, 0x48, 0x4f, 0x52, 0x49, 0x5a, 0x41, 0x54, 0x49,
	0x4f, 0x4e, 0x5f, 0x50, 0x4f, 0x4c, 0x49, 0x43, 0x59, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e,
	0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x25,
	0x0a, 0x21, 0x41, 0x55, 0x54, 0x48, 0x4f, 0x52, 0x49, 0x5a, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f,
	0x50, 0x4f, 0x4c, 0x49, 0x43, 0x59, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x41, 0x4c,
	0x4c, 0x4f, 0x57, 0x10, 0x01, 0x12, 0x24, 0x0a, 0x20, 0x41, 0x55, 0x54, 0x48, 0x4f, 0x52, 0x49,
	0x5a, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x50, 0x4f, 0x4c, 0x49, 0x43, 0x59, 0x5f, 0x41, 0x43,
	0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x44, 0x45, 0x4e, 0x59, 0x10, 0x02, 0x12, 0x25, 0x0a, 0x21, 0x41,
	0x55, 0x54, 0x48, 0x4f, 0x52, 0x49, 0x5a, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x50, 0x4f, 0x4c,
	0x49, 0x43, 0x59, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x41, 0x55, 0x44, 0x49, 0x54,
	0x10, 0x03, 0x12, 0x26, 0x0a, 0x22, 0x41, 0x55, 0x54, 0x48, 0x4f, 0x52, 0x49, 0x5a, 0x41, 0x54,
	0x49, 0x4f, 0x4e, 0x5f, 0x50, 0x4f, 0x4c, 0x49, 0x43, 0x59, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x4f,
	0x4e, 0x5f, 0x43, 0x55, 0x53, 0x54, 0x4f, 0x4d, 0x10, 0x04, 0x32, 0x5e, 0x0a, 0x0d, 0x53, 0x74,
	0x72, 0x65, 0x61, 0x6d, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x4d, 0x0a, 0x0a, 0x53,
	0x74, 0x72, 0x65, 0x61, 0x6d, 0x44, 0x61, 0x74, 0x61, 0x12, 0x1b, 0x2e, 0x63, 0x6c, 0x6f, 0x75,
	0x64, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x44, 0x61, 0x74, 0x61, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1c, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x76,
	0x31, 0x2e, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x44, 0x61, 0x74, 0x61, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x28, 0x01, 0x30, 0x01, 0x42, 0x74, 0x0a, 0x0c, 0x63, 0x6f,
	0x6d, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x76, 0x31, 0x42, 0x0c, 0x4d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x50, 0x01, 0x5a, 0x15, 0x6f, 0x70, 0x65, 0x72,
	0x61, 0x74, 0x6f, 0x72, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2f, 0x76,
	0x31, 0xa2, 0x02, 0x03, 0x43, 0x58, 0x58, 0xaa, 0x02, 0x08, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x2e,
	0x56, 0x31, 0xca, 0x02, 0x08, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x5c, 0x56, 0x31, 0xe2, 0x02, 0x14,
	0x43, 0x6c, 0x6f, 0x75, 0x64, 0x5c, 0x56, 0x31, 0x5c, 0x47, 0x50, 0x42, 0x4d, 0x65, 0x74, 0x61,
	0x64, 0x61, 0x74, 0x61, 0xea, 0x02, 0x09, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x3a, 0x3a, 0x56, 0x31,
	0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
})

var (
	file_cloud_v1_message_proto_rawDescOnce sync.Once
	file_cloud_v1_message_proto_rawDescData []byte
)

func file_cloud_v1_message_proto_rawDescGZIP() []byte {
	file_cloud_v1_message_proto_rawDescOnce.Do(func() {
		file_cloud_v1_message_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_cloud_v1_message_proto_rawDesc), len(file_cloud_v1_message_proto_rawDesc)))
	})
	return file_cloud_v1_message_proto_rawDescData
}

var file_cloud_v1_message_proto_enumTypes = make([]protoimpl.EnumInfo, 3)
var file_cloud_v1_message_proto_msgTypes = make([]protoimpl.MessageInfo, 55)
var file_cloud_v1_message_proto_goTypes = []any{
	(Action)(0),                          // 0: cloud.v1.Action
	(L7ProtocolType)(0),                  // 1: cloud.v1.L7ProtocolType
	(AuthorizationPolicyAction)(0),       // 2: cloud.v1.AuthorizationPolicyAction
	(*StreamDataRequest)(nil),            // 3: cloud.v1.StreamDataRequest
	(*NetworkPoliciesWithErrors)(nil),    // 4: cloud.v1.NetworkPoliciesWithErrors
	(*NetworkPolicyWithError)(nil),       // 5: cloud.v1.NetworkPolicyWithError
	(*Flow)(nil),                         // 6: cloud.v1.Flow
	(*Endpoint)(nil),                     // 7: cloud.v1.Endpoint
	(*Policy)(nil),                       // 8: cloud.v1.Policy
	(*StreamDataResponse)(nil),           // 9: cloud.v1.StreamDataResponse
	(*Ack)(nil),                          // 10: cloud.v1.Ack
	(*Workload)(nil),                     // 11: cloud.v1.Workload
	(*Namespace)(nil),                    // 12: cloud.v1.Namespace
	(*Service)(nil),                      // 13: cloud.v1.Service
	(*ServicePort)(nil),                  // 14: cloud.v1.ServicePort
	(*InventoryCommit)(nil),              // 15: cloud.v1.InventoryCommit
	(*NetworkPolicy)(nil),                // 16: cloud.v1.NetworkPolicy
	(*ObjectMeta)(nil),                   // 17: cloud.v1.ObjectMeta
	(*NetworkPolicySpec)(nil),            // 18: cloud.v1.NetworkPolicySpec
	(*LabelSelector)(nil),                // 19: cloud.v1.LabelSelector
	(*LabelSelectorRequirement)(nil),     // 20: cloud.v1.LabelSelectorRequirement
	(*NetworkPolicyIngressRule)(nil),     // 21: cloud.v1.NetworkPolicyIngressRule
	(*NetworkPolicyEgressRule)(nil),      // 22: cloud.v1.NetworkPolicyEgressRule
	(*NetworkPolicyPeer)(nil),            // 23: cloud.v1.NetworkPolicyPeer
	(*IPBlock)(nil),                      // 24: cloud.v1.IPBlock
	(*NetworkPolicyPort)(nil),            // 25: cloud.v1.NetworkPolicyPort
	(*KubernetesAPIRequest)(nil),         // 26: cloud.v1.KubernetesAPIRequest
	(*KubernetesAPIResult)(nil),          // 27: cloud.v1.KubernetesAPIResult
	(*KubernetesAPIResponse)(nil),        // 28: cloud.v1.KubernetesAPIResponse
	(*ShellCommandRequest)(nil),          // 29: cloud.v1.ShellCommandRequest
	(*ShellCommandResult)(nil),           // 30: cloud.v1.ShellCommandResult
	(*ShellCommandResponse)(nil),         // 31: cloud.v1.ShellCommandResponse
	(*YamlDryRunRequest)(nil),            // 32: cloud.v1.YamlDryRunRequest
	(*YamlManifest)(nil),                 // 33: cloud.v1.YamlManifest
	(*YamlValidationResult)(nil),         // 34: cloud.v1.YamlValidationResult
	(*YamlDryRunResponse)(nil),           // 35: cloud.v1.YamlDryRunResponse
	(*L7AccessLog)(nil),                  // 36: cloud.v1.L7AccessLog
	(*L7Endpoint)(nil),                   // 37: cloud.v1.L7Endpoint
	(*HTTPAccessLogData)(nil),            // 38: cloud.v1.HTTPAccessLogData
	(*TCPAccessLogData)(nil),             // 39: cloud.v1.TCPAccessLogData
	(*AuthorizationPolicy)(nil),          // 40: cloud.v1.AuthorizationPolicy
	(*AuthorizationPolicySpec)(nil),      // 41: cloud.v1.AuthorizationPolicySpec
	(*AuthorizationPolicyRule)(nil),      // 42: cloud.v1.AuthorizationPolicyRule
	(*AuthorizationPolicyRuleFrom)(nil),  // 43: cloud.v1.AuthorizationPolicyRuleFrom
	(*AuthorizationPolicyRuleTo)(nil),    // 44: cloud.v1.AuthorizationPolicyRuleTo
	(*AuthorizationPolicySource)(nil),    // 45: cloud.v1.AuthorizationPolicySource
	(*AuthorizationPolicyOperation)(nil), // 46: cloud.v1.AuthorizationPolicyOperation
	(*AuthorizationPolicyCondition)(nil), // 47: cloud.v1.AuthorizationPolicyCondition
	nil,                                  // 48: cloud.v1.Workload.LabelsEntry
	nil,                                  // 49: cloud.v1.Namespace.LabelsEntry
	nil,                                  // 50: cloud.v1.Service.LabelsEntry
	nil,                                  // 51: cloud.v1.Service.AnnotationsEntry
	nil,                                  // 52: cloud.v1.Service.SelectorEntry
	nil,                                  // 53: cloud.v1.ObjectMeta.LabelsEntry
	nil,                                  // 54: cloud.v1.ObjectMeta.AnnotationsEntry
	nil,                                  // 55: cloud.v1.LabelSelector.MatchLabelsEntry
	nil,                                  // 56: cloud.v1.HTTPAccessLogData.RequestHeadersEntry
	nil,                                  // 57: cloud.v1.HTTPAccessLogData.ResponseHeadersEntry
	(*timestamppb.Timestamp)(nil),        // 58: google.protobuf.Timestamp
}
var file_cloud_v1_message_proto_depIdxs = []int32{
	6,  // 0: cloud.v1.StreamDataRequest.flow:type_name -> cloud.v1.Flow
	16, // 1: cloud.v1.StreamDataRequest.network_policy:type_name -> cloud.v1.NetworkPolicy
	4,  // 2: cloud.v1.StreamDataRequest.network_policy_with_errors:type_name -> cloud.v1.NetworkPoliciesWithErrors
	11, // 3: cloud.v1.StreamDataRequest.workload:type_name -> cloud.v1.Workload
	12, // 4: cloud.v1.StreamDataRequest.namespace:type_name -> cloud.v1.Namespace
	15, // 5: cloud.v1.StreamDataRequest.inventory_commit:type_name -> cloud.v1.InventoryCommit
	28, // 6: cloud.v1.StreamDataRequest.kubernetes_api_response:type_name -> cloud.v1.KubernetesAPIResponse
	13, // 7: cloud.v1.StreamDataRequest.service:type_name -> cloud.v1.Service
	31, // 8: cloud.v1.StreamDataRequest.shell_command_response:type_name -> cloud.v1.ShellCommandResponse
	36, // 9: cloud.v1.StreamDataRequest.l7_access_log:type_name -> cloud.v1.L7AccessLog
	40, // 10: cloud.v1.StreamDataRequest.authorization_policy:type_name -> cloud.v1.AuthorizationPolicy
	35, // 11: cloud.v1.StreamDataRequest.yaml_dry_run_response:type_name -> cloud.v1.YamlDryRunResponse
	5,  // 12: cloud.v1.NetworkPoliciesWithErrors.policies:type_name -> cloud.v1.NetworkPolicyWithError
	7,  // 13: cloud.v1.Flow.src:type_name -> cloud.v1.Endpoint
	7,  // 14: cloud.v1.Flow.dst:type_name -> cloud.v1.Endpoint
	58, // 15: cloud.v1.Flow.first_seen:type_name -> google.protobuf.Timestamp
	58, // 16: cloud.v1.Flow.last_seen:type_name -> google.protobuf.Timestamp
	8,  // 17: cloud.v1.Flow.ingress_allowed_by:type_name -> cloud.v1.Policy
	8,  // 18: cloud.v1.Flow.egress_allowed_by:type_name -> cloud.v1.Policy
	10, // 19: cloud.v1.StreamDataResponse.ack:type_name -> cloud.v1.Ack
	5,  // 20: cloud.v1.StreamDataResponse.network_policy:type_name -> cloud.v1.NetworkPolicyWithError
	26, // 21: cloud.v1.StreamDataResponse.kubernetes_api_request:type_name -> cloud.v1.KubernetesAPIRequest
	29, // 22: cloud.v1.StreamDataResponse.shell_command_request:type_name -> cloud.v1.ShellCommandRequest
	32, // 23: cloud.v1.StreamDataResponse.yaml_dry_run_request:type_name -> cloud.v1.YamlDryRunRequest
	48, // 24: cloud.v1.Workload.labels:type_name -> cloud.v1.Workload.LabelsEntry
	58, // 25: cloud.v1.Workload.created_at:type_name -> google.protobuf.Timestamp
	0,  // 26: cloud.v1.Workload.action:type_name -> cloud.v1.Action
	49, // 27: cloud.v1.Namespace.labels:type_name -> cloud.v1.Namespace.LabelsEntry
	58, // 28: cloud.v1.Namespace.created_at:type_name -> google.protobuf.Timestamp
	0,  // 29: cloud.v1.Namespace.action:type_name -> cloud.v1.Action
	50, // 30: cloud.v1.Service.labels:type_name -> cloud.v1.Service.LabelsEntry
	51, // 31: cloud.v1.Service.annotations:type_name -> cloud.v1.Service.AnnotationsEntry
	52, // 32: cloud.v1.Service.selector:type_name -> cloud.v1.Service.SelectorEntry
	14, // 33: cloud.v1.Service.ports:type_name -> cloud.v1.ServicePort
	58, // 34: cloud.v1.Service.created_at:type_name -> google.protobuf.Timestamp
	0,  // 35: cloud.v1.Service.action:type_name -> cloud.v1.Action
	17, // 36: cloud.v1.NetworkPolicy.metadata:type_name -> cloud.v1.ObjectMeta
	18, // 37: cloud.v1.NetworkPolicy.spec:type_name -> cloud.v1.NetworkPolicySpec
	0,  // 38: cloud.v1.NetworkPolicy.action:type_name -> cloud.v1.Action
	53, // 39: cloud.v1.ObjectMeta.labels:type_name -> cloud.v1.ObjectMeta.LabelsEntry
	54, // 40: cloud.v1.ObjectMeta.annotations:type_name -> cloud.v1.ObjectMeta.AnnotationsEntry
	19, // 41: cloud.v1.NetworkPolicySpec.pod_selector:type_name -> cloud.v1.LabelSelector
	21, // 42: cloud.v1.NetworkPolicySpec.ingress:type_name -> cloud.v1.NetworkPolicyIngressRule
	22, // 43: cloud.v1.NetworkPolicySpec.egress:type_name -> cloud.v1.NetworkPolicyEgressRule
	55, // 44: cloud.v1.LabelSelector.match_labels:type_name -> cloud.v1.LabelSelector.MatchLabelsEntry
	20, // 45: cloud.v1.LabelSelector.match_expressions:type_name -> cloud.v1.LabelSelectorRequirement
	23, // 46: cloud.v1.NetworkPolicyIngressRule.from:type_name -> cloud.v1.NetworkPolicyPeer
	25, // 47: cloud.v1.NetworkPolicyIngressRule.ports:type_name -> cloud.v1.NetworkPolicyPort
	23, // 48: cloud.v1.NetworkPolicyEgressRule.to:type_name -> cloud.v1.NetworkPolicyPeer
	25, // 49: cloud.v1.NetworkPolicyEgressRule.ports:type_name -> cloud.v1.NetworkPolicyPort
	19, // 50: cloud.v1.NetworkPolicyPeer.pod_selector:type_name -> cloud.v1.LabelSelector
	19, // 51: cloud.v1.NetworkPolicyPeer.namespace_selector:type_name -> cloud.v1.LabelSelector
	24, // 52: cloud.v1.NetworkPolicyPeer.ip_block:type_name -> cloud.v1.IPBlock
	27, // 53: cloud.v1.KubernetesAPIResponse.results:type_name -> cloud.v1.KubernetesAPIResult
	30, // 54: cloud.v1.ShellCommandResponse.results:type_name -> cloud.v1.ShellCommandResult
	33, // 55: cloud.v1.YamlDryRunRequest.yaml_manifests:type_name -> cloud.v1.YamlManifest
	34, // 56: cloud.v1.YamlDryRunResponse.results:type_name -> cloud.v1.YamlValidationResult
	58, // 57: cloud.v1.L7AccessLog.timestamp:type_name -> google.protobuf.Timestamp
	37, // 58: cloud.v1.L7AccessLog.source:type_name -> cloud.v1.L7Endpoint
	37, // 59: cloud.v1.L7AccessLog.destination:type_name -> cloud.v1.L7Endpoint
	1,  // 60: cloud.v1.L7AccessLog.l7_protocol:type_name -> cloud.v1.L7ProtocolType
	38, // 61: cloud.v1.L7AccessLog.http_data:type_name -> cloud.v1.HTTPAccessLogData
	39, // 62: cloud.v1.L7AccessLog.tcp_data:type_name -> cloud.v1.TCPAccessLogData
	58, // 63: cloud.v1.L7AccessLog.first_seen:type_name -> google.protobuf.Timestamp
	58, // 64: cloud.v1.L7AccessLog.last_seen:type_name -> google.protobuf.Timestamp
	56, // 65: cloud.v1.HTTPAccessLogData.request_headers:type_name -> cloud.v1.HTTPAccessLogData.RequestHeadersEntry
	57, // 66: cloud.v1.HTTPAccessLogData.response_headers:type_name -> cloud.v1.HTTPAccessLogData.ResponseHeadersEntry
	17, // 67: cloud.v1.AuthorizationPolicy.metadata:type_name -> cloud.v1.ObjectMeta
	41, // 68: cloud.v1.AuthorizationPolicy.spec:type_name -> cloud.v1.AuthorizationPolicySpec
	0,  // 69: cloud.v1.AuthorizationPolicy.action:type_name -> cloud.v1.Action
	19, // 70: cloud.v1.AuthorizationPolicySpec.selector:type_name -> cloud.v1.LabelSelector
	42, // 71: cloud.v1.AuthorizationPolicySpec.rules:type_name -> cloud.v1.AuthorizationPolicyRule
	2,  // 72: cloud.v1.AuthorizationPolicySpec.action:type_name -> cloud.v1.AuthorizationPolicyAction
	43, // 73: cloud.v1.AuthorizationPolicyRule.from:type_name -> cloud.v1.AuthorizationPolicyRuleFrom
	44, // 74: cloud.v1.AuthorizationPolicyRule.to:type_name -> cloud.v1.AuthorizationPolicyRuleTo
	47, // 75: cloud.v1.AuthorizationPolicyRule.when:type_name -> cloud.v1.AuthorizationPolicyCondition
	45, // 76: cloud.v1.AuthorizationPolicyRuleFrom.source:type_name -> cloud.v1.AuthorizationPolicySource
	46, // 77: cloud.v1.AuthorizationPolicyRuleTo.operation:type_name -> cloud.v1.AuthorizationPolicyOperation
	3,  // 78: cloud.v1.StreamService.StreamData:input_type -> cloud.v1.StreamDataRequest
	9,  // 79: cloud.v1.StreamService.StreamData:output_type -> cloud.v1.StreamDataResponse
	79, // [79:80] is the sub-list for method output_type
	78, // [78:79] is the sub-list for method input_type
	78, // [78:78] is the sub-list for extension type_name
	78, // [78:78] is the sub-list for extension extendee
	0,  // [0:78] is the sub-list for field type_name
}

func init() { file_cloud_v1_message_proto_init() }
func file_cloud_v1_message_proto_init() {
	if File_cloud_v1_message_proto != nil {
		return
	}
	file_cloud_v1_message_proto_msgTypes[0].OneofWrappers = []any{
		(*StreamDataRequest_Flow)(nil),
		(*StreamDataRequest_NetworkPolicy)(nil),
		(*StreamDataRequest_NetworkPolicyWithErrors)(nil),
		(*StreamDataRequest_Workload)(nil),
		(*StreamDataRequest_Namespace)(nil),
		(*StreamDataRequest_InventoryCommit)(nil),
		(*StreamDataRequest_KubernetesApiResponse)(nil),
		(*StreamDataRequest_Service)(nil),
		(*StreamDataRequest_ShellCommandResponse)(nil),
		(*StreamDataRequest_L7AccessLog)(nil),
		(*StreamDataRequest_AuthorizationPolicy)(nil),
		(*StreamDataRequest_YamlDryRunResponse)(nil),
	}
	file_cloud_v1_message_proto_msgTypes[6].OneofWrappers = []any{
		(*StreamDataResponse_Ack)(nil),
		(*StreamDataResponse_NetworkPolicy)(nil),
		(*StreamDataResponse_KubernetesApiRequest)(nil),
		(*StreamDataResponse_ShellCommandRequest)(nil),
		(*StreamDataResponse_YamlDryRunRequest)(nil),
	}
	file_cloud_v1_message_proto_msgTypes[22].OneofWrappers = []any{
		(*NetworkPolicyPort_Port)(nil),
		(*NetworkPolicyPort_PortName)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_cloud_v1_message_proto_rawDesc), len(file_cloud_v1_message_proto_rawDesc)),
			NumEnums:      3,
			NumMessages:   55,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_cloud_v1_message_proto_goTypes,
		DependencyIndexes: file_cloud_v1_message_proto_depIdxs,
		EnumInfos:         file_cloud_v1_message_proto_enumTypes,
		MessageInfos:      file_cloud_v1_message_proto_msgTypes,
	}.Build()
	File_cloud_v1_message_proto = out.File
	file_cloud_v1_message_proto_goTypes = nil
	file_cloud_v1_message_proto_depIdxs = nil
}
