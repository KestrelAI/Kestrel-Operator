syntax = "proto3";

package cloud.v1;

import "google/protobuf/timestamp.proto";

option go_package = "operator/api/cloud/v1";

// Request message for flow stream
message StreamDataRequest {
  oneof request {
    Flow flow = 1;
    NetworkPolicy network_policy = 2;
    NetworkPoliciesWithErrors network_policy_with_errors = 3;
  }
}

message NetworkPoliciesWithErrors {
  repeated NetworkPolicyWithError policies = 1;
}

message NetworkPolicyWithError {
  string network_policy = 1;
  string error_message = 2;
  string policy_id = 3; // Unique identifier for tracking policies, generated by the server as a uuid
}

message Flow {
  string src_ip = 1;
  string dst_ip = 2;

  // Source endpoint details
  Endpoint src = 3;

  // Destination endpoint details
  Endpoint dst = 4;

  // Direction from source's viewpoint (ingress or egress)
  string direction = 5;

  // Dst port number
  uint32 port = 6;

  // Protocol (TCP, UDP, etc.)
  string protocol = 7;

  // Whether the connection was allowed
  bool allowed = 8;

  // Count of times this flow was observed
  int64 count = 9;

  // When this flow was first seen
  google.protobuf.Timestamp first_seen = 10;

  // When this flow was last seen
  google.protobuf.Timestamp last_seen = 11;

  repeated Policy ingress_allowed_by = 12;
  repeated Policy egress_allowed_by = 13;
}

// Endpoint definition for source or destination
message Endpoint {
  // Namespace
  string ns = 1;

  // Kind (Deployment, StatefulSet, etc.)
  string kind = 2;

  // Resource name
  string name = 3;

  // Digest of labels attached to the resource
  repeated string labels = 4;
}

// Policy definition used in Cilium flows
message Policy {
  string name = 1;
  string namespace = 2;
  repeated string labels = 3;
  uint64 revision = 4;
  string kind = 5;
}

// Response message
message StreamDataResponse {
  oneof response {
    // Simple acknowledgment when message is received
    Ack ack = 1;
    // Network policy when computation is complete
    NetworkPolicyWithError network_policy = 2;
  }
}

// Simple acknowledgment message
message Ack {}

// Network policy definition matching Kubernetes NetworkPolicy format
message NetworkPolicy {
  // Standard Kubernetes metadata
  ObjectMeta metadata = 1;
  NetworkPolicySpec spec = 2;

  // Zero-or-more "target" workloads protected by this policy;
  // each entry in the target_workloads list is of the format: "<Namespace>.<Kind>.<Name>".
  repeated string target_workloads = 3;
}

// Kubernetes ObjectMeta
message ObjectMeta {
  string name = 1;
  string namespace = 2;
  map<string, string> labels = 3;
  map<string, string> annotations = 4;
  string resource_version = 5;
  string uid = 6;
}

// NetworkPolicy specification
message NetworkPolicySpec {
  // Selects the pods to which this NetworkPolicy object applies
  LabelSelector pod_selector = 1;

  // List of ingress rules to be applied
  repeated NetworkPolicyIngressRule ingress = 2;

  // List of egress rules to be applied
  repeated NetworkPolicyEgressRule egress = 3;

  // List of rule types that the NetworkPolicy relates to
  // Valid options are ["Ingress"], ["Egress"], or ["Ingress", "Egress"]
  repeated string policy_types = 4;
}

// Label selector for Kubernetes resources
message LabelSelector {
  map<string, string> match_labels = 1;
  repeated LabelSelectorRequirement match_expressions = 2;
}

message LabelSelectorRequirement {
  string key = 1;
  string operator = 2; // In, NotIn, Exists, DoesNotExist
  repeated string values = 3;
}

// NetworkPolicy ingress rule
message NetworkPolicyIngressRule {
  repeated NetworkPolicyPeer from = 1;
  repeated NetworkPolicyPort ports = 2;
}

// NetworkPolicy egress rule
message NetworkPolicyEgressRule {
  repeated NetworkPolicyPeer to = 1;
  repeated NetworkPolicyPort ports = 2;
}

// NetworkPolicy peer
message NetworkPolicyPeer {
  // Either pod_selector, namespace_selector, or ip_block should be specified
  LabelSelector pod_selector = 1;
  LabelSelector namespace_selector = 2;
  IPBlock ip_block = 3;
}

// IP CIDR block specification
message IPBlock {
  string cidr = 1;
  repeated string except = 2;
}

// NetworkPolicy port rule
message NetworkPolicyPort {
  // Protocol is optional; if not specified, applies to all protocols
  string protocol = 1; // TCP, UDP, SCTP, etc.

  // Port is optional; if not specified, matches all ports
  oneof port_value {
    int32 port = 2;
    string port_name = 3; // Named port on pods
  }

  // Port range (Kubernetes extension)
  int32 end_port = 4;
}

// Service definition with bi-directional streaming RPC
service StreamService {
  // Bi-directional streaming RPC
  rpc StreamData(stream StreamDataRequest) returns (stream StreamDataResponse) {}
}
