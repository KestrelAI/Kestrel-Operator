// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.6
// 	protoc        (unknown)
// source: cloud/v1/message.proto

package v1

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Request message for flow stream
type StreamDataRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Types that are valid to be assigned to Request:
	//
	//	*StreamDataRequest_Flow
	//	*StreamDataRequest_NetworkPolicy
	//	*StreamDataRequest_NetworkPolicyWithErrors
	Request       isStreamDataRequest_Request `protobuf_oneof:"request"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *StreamDataRequest) Reset() {
	*x = StreamDataRequest{}
	mi := &file_cloud_v1_message_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *StreamDataRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StreamDataRequest) ProtoMessage() {}

func (x *StreamDataRequest) ProtoReflect() protoreflect.Message {
	mi := &file_cloud_v1_message_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StreamDataRequest.ProtoReflect.Descriptor instead.
func (*StreamDataRequest) Descriptor() ([]byte, []int) {
	return file_cloud_v1_message_proto_rawDescGZIP(), []int{0}
}

func (x *StreamDataRequest) GetRequest() isStreamDataRequest_Request {
	if x != nil {
		return x.Request
	}
	return nil
}

func (x *StreamDataRequest) GetFlow() *Flow {
	if x != nil {
		if x, ok := x.Request.(*StreamDataRequest_Flow); ok {
			return x.Flow
		}
	}
	return nil
}

func (x *StreamDataRequest) GetNetworkPolicy() *NetworkPolicy {
	if x != nil {
		if x, ok := x.Request.(*StreamDataRequest_NetworkPolicy); ok {
			return x.NetworkPolicy
		}
	}
	return nil
}

func (x *StreamDataRequest) GetNetworkPolicyWithErrors() *NetworkPoliciesWithErrors {
	if x != nil {
		if x, ok := x.Request.(*StreamDataRequest_NetworkPolicyWithErrors); ok {
			return x.NetworkPolicyWithErrors
		}
	}
	return nil
}

type isStreamDataRequest_Request interface {
	isStreamDataRequest_Request()
}

type StreamDataRequest_Flow struct {
	Flow *Flow `protobuf:"bytes,1,opt,name=flow,proto3,oneof"`
}

type StreamDataRequest_NetworkPolicy struct {
	NetworkPolicy *NetworkPolicy `protobuf:"bytes,2,opt,name=network_policy,json=networkPolicy,proto3,oneof"`
}

type StreamDataRequest_NetworkPolicyWithErrors struct {
	NetworkPolicyWithErrors *NetworkPoliciesWithErrors `protobuf:"bytes,3,opt,name=network_policy_with_errors,json=networkPolicyWithErrors,proto3,oneof"`
}

func (*StreamDataRequest_Flow) isStreamDataRequest_Request() {}

func (*StreamDataRequest_NetworkPolicy) isStreamDataRequest_Request() {}

func (*StreamDataRequest_NetworkPolicyWithErrors) isStreamDataRequest_Request() {}

type NetworkPoliciesWithErrors struct {
	state         protoimpl.MessageState    `protogen:"open.v1"`
	Policies      []*NetworkPolicyWithError `protobuf:"bytes,1,rep,name=policies,proto3" json:"policies,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *NetworkPoliciesWithErrors) Reset() {
	*x = NetworkPoliciesWithErrors{}
	mi := &file_cloud_v1_message_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *NetworkPoliciesWithErrors) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NetworkPoliciesWithErrors) ProtoMessage() {}

func (x *NetworkPoliciesWithErrors) ProtoReflect() protoreflect.Message {
	mi := &file_cloud_v1_message_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NetworkPoliciesWithErrors.ProtoReflect.Descriptor instead.
func (*NetworkPoliciesWithErrors) Descriptor() ([]byte, []int) {
	return file_cloud_v1_message_proto_rawDescGZIP(), []int{1}
}

func (x *NetworkPoliciesWithErrors) GetPolicies() []*NetworkPolicyWithError {
	if x != nil {
		return x.Policies
	}
	return nil
}

type NetworkPolicyWithError struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	NetworkPolicy string                 `protobuf:"bytes,1,opt,name=network_policy,json=networkPolicy,proto3" json:"network_policy,omitempty"`
	ErrorMessage  string                 `protobuf:"bytes,2,opt,name=error_message,json=errorMessage,proto3" json:"error_message,omitempty"`
	PolicyId      string                 `protobuf:"bytes,3,opt,name=policy_id,json=policyId,proto3" json:"policy_id,omitempty"` // Unique identifier for tracking policies, generated by the server as a uuid
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *NetworkPolicyWithError) Reset() {
	*x = NetworkPolicyWithError{}
	mi := &file_cloud_v1_message_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *NetworkPolicyWithError) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NetworkPolicyWithError) ProtoMessage() {}

func (x *NetworkPolicyWithError) ProtoReflect() protoreflect.Message {
	mi := &file_cloud_v1_message_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NetworkPolicyWithError.ProtoReflect.Descriptor instead.
func (*NetworkPolicyWithError) Descriptor() ([]byte, []int) {
	return file_cloud_v1_message_proto_rawDescGZIP(), []int{2}
}

func (x *NetworkPolicyWithError) GetNetworkPolicy() string {
	if x != nil {
		return x.NetworkPolicy
	}
	return ""
}

func (x *NetworkPolicyWithError) GetErrorMessage() string {
	if x != nil {
		return x.ErrorMessage
	}
	return ""
}

func (x *NetworkPolicyWithError) GetPolicyId() string {
	if x != nil {
		return x.PolicyId
	}
	return ""
}

type Flow struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Source endpoint details
	Src *Endpoint `protobuf:"bytes,1,opt,name=src,proto3" json:"src,omitempty"`
	// Destination endpoint details
	Dst *Endpoint `protobuf:"bytes,2,opt,name=dst,proto3" json:"dst,omitempty"`
	// Direction from source's viewpoint (ingress or egress)
	Direction string `protobuf:"bytes,3,opt,name=direction,proto3" json:"direction,omitempty"`
	// Port number
	Port uint32 `protobuf:"varint,4,opt,name=port,proto3" json:"port,omitempty"`
	// Protocol (TCP, UDP, etc.)
	Protocol string `protobuf:"bytes,5,opt,name=protocol,proto3" json:"protocol,omitempty"`
	// Whether the connection was allowed
	Allowed bool `protobuf:"varint,6,opt,name=allowed,proto3" json:"allowed,omitempty"`
	// Count of times this flow was observed
	Count int64 `protobuf:"varint,7,opt,name=count,proto3" json:"count,omitempty"`
	// When this flow was first seen
	FirstSeen *timestamppb.Timestamp `protobuf:"bytes,8,opt,name=first_seen,json=firstSeen,proto3" json:"first_seen,omitempty"`
	// When this flow was last seen
	LastSeen      *timestamppb.Timestamp `protobuf:"bytes,9,opt,name=last_seen,json=lastSeen,proto3" json:"last_seen,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Flow) Reset() {
	*x = Flow{}
	mi := &file_cloud_v1_message_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Flow) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Flow) ProtoMessage() {}

func (x *Flow) ProtoReflect() protoreflect.Message {
	mi := &file_cloud_v1_message_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Flow.ProtoReflect.Descriptor instead.
func (*Flow) Descriptor() ([]byte, []int) {
	return file_cloud_v1_message_proto_rawDescGZIP(), []int{3}
}

func (x *Flow) GetSrc() *Endpoint {
	if x != nil {
		return x.Src
	}
	return nil
}

func (x *Flow) GetDst() *Endpoint {
	if x != nil {
		return x.Dst
	}
	return nil
}

func (x *Flow) GetDirection() string {
	if x != nil {
		return x.Direction
	}
	return ""
}

func (x *Flow) GetPort() uint32 {
	if x != nil {
		return x.Port
	}
	return 0
}

func (x *Flow) GetProtocol() string {
	if x != nil {
		return x.Protocol
	}
	return ""
}

func (x *Flow) GetAllowed() bool {
	if x != nil {
		return x.Allowed
	}
	return false
}

func (x *Flow) GetCount() int64 {
	if x != nil {
		return x.Count
	}
	return 0
}

func (x *Flow) GetFirstSeen() *timestamppb.Timestamp {
	if x != nil {
		return x.FirstSeen
	}
	return nil
}

func (x *Flow) GetLastSeen() *timestamppb.Timestamp {
	if x != nil {
		return x.LastSeen
	}
	return nil
}

// Endpoint definition for source or destination
type Endpoint struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Namespace
	Ns string `protobuf:"bytes,1,opt,name=ns,proto3" json:"ns,omitempty"`
	// Kind (Deployment, StatefulSet, etc.)
	Kind string `protobuf:"bytes,2,opt,name=kind,proto3" json:"kind,omitempty"`
	// Resource name
	Name string `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	// Digest of labels attached to the resource
	Labels        []string `protobuf:"bytes,4,rep,name=labels,proto3" json:"labels,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Endpoint) Reset() {
	*x = Endpoint{}
	mi := &file_cloud_v1_message_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Endpoint) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Endpoint) ProtoMessage() {}

func (x *Endpoint) ProtoReflect() protoreflect.Message {
	mi := &file_cloud_v1_message_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Endpoint.ProtoReflect.Descriptor instead.
func (*Endpoint) Descriptor() ([]byte, []int) {
	return file_cloud_v1_message_proto_rawDescGZIP(), []int{4}
}

func (x *Endpoint) GetNs() string {
	if x != nil {
		return x.Ns
	}
	return ""
}

func (x *Endpoint) GetKind() string {
	if x != nil {
		return x.Kind
	}
	return ""
}

func (x *Endpoint) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Endpoint) GetLabels() []string {
	if x != nil {
		return x.Labels
	}
	return nil
}

// Response message
type StreamDataResponse struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Types that are valid to be assigned to Response:
	//
	//	*StreamDataResponse_Ack
	//	*StreamDataResponse_NetworkPolicy
	Response      isStreamDataResponse_Response `protobuf_oneof:"response"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *StreamDataResponse) Reset() {
	*x = StreamDataResponse{}
	mi := &file_cloud_v1_message_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *StreamDataResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StreamDataResponse) ProtoMessage() {}

func (x *StreamDataResponse) ProtoReflect() protoreflect.Message {
	mi := &file_cloud_v1_message_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StreamDataResponse.ProtoReflect.Descriptor instead.
func (*StreamDataResponse) Descriptor() ([]byte, []int) {
	return file_cloud_v1_message_proto_rawDescGZIP(), []int{5}
}

func (x *StreamDataResponse) GetResponse() isStreamDataResponse_Response {
	if x != nil {
		return x.Response
	}
	return nil
}

func (x *StreamDataResponse) GetAck() *Ack {
	if x != nil {
		if x, ok := x.Response.(*StreamDataResponse_Ack); ok {
			return x.Ack
		}
	}
	return nil
}

func (x *StreamDataResponse) GetNetworkPolicy() *NetworkPolicyWithError {
	if x != nil {
		if x, ok := x.Response.(*StreamDataResponse_NetworkPolicy); ok {
			return x.NetworkPolicy
		}
	}
	return nil
}

type isStreamDataResponse_Response interface {
	isStreamDataResponse_Response()
}

type StreamDataResponse_Ack struct {
	// Simple acknowledgment when message is received
	Ack *Ack `protobuf:"bytes,1,opt,name=ack,proto3,oneof"`
}

type StreamDataResponse_NetworkPolicy struct {
	// Network policy when computation is complete
	NetworkPolicy *NetworkPolicyWithError `protobuf:"bytes,2,opt,name=network_policy,json=networkPolicy,proto3,oneof"`
}

func (*StreamDataResponse_Ack) isStreamDataResponse_Response() {}

func (*StreamDataResponse_NetworkPolicy) isStreamDataResponse_Response() {}

// Simple acknowledgment message
type Ack struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Ack) Reset() {
	*x = Ack{}
	mi := &file_cloud_v1_message_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Ack) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ack) ProtoMessage() {}

func (x *Ack) ProtoReflect() protoreflect.Message {
	mi := &file_cloud_v1_message_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ack.ProtoReflect.Descriptor instead.
func (*Ack) Descriptor() ([]byte, []int) {
	return file_cloud_v1_message_proto_rawDescGZIP(), []int{6}
}

// Network policy definition matching Kubernetes NetworkPolicy format
type NetworkPolicy struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Standard Kubernetes metadata
	Metadata *ObjectMeta        `protobuf:"bytes,1,opt,name=metadata,proto3" json:"metadata,omitempty"`
	Spec     *NetworkPolicySpec `protobuf:"bytes,2,opt,name=spec,proto3" json:"spec,omitempty"`
	// Zero-or-more "target" workloads protected by this policy
	TargetWorkloads []string `protobuf:"bytes,3,rep,name=target_workloads,json=targetWorkloads,proto3" json:"target_workloads,omitempty"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *NetworkPolicy) Reset() {
	*x = NetworkPolicy{}
	mi := &file_cloud_v1_message_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *NetworkPolicy) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NetworkPolicy) ProtoMessage() {}

func (x *NetworkPolicy) ProtoReflect() protoreflect.Message {
	mi := &file_cloud_v1_message_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NetworkPolicy.ProtoReflect.Descriptor instead.
func (*NetworkPolicy) Descriptor() ([]byte, []int) {
	return file_cloud_v1_message_proto_rawDescGZIP(), []int{7}
}

func (x *NetworkPolicy) GetMetadata() *ObjectMeta {
	if x != nil {
		return x.Metadata
	}
	return nil
}

func (x *NetworkPolicy) GetSpec() *NetworkPolicySpec {
	if x != nil {
		return x.Spec
	}
	return nil
}

func (x *NetworkPolicy) GetTargetWorkloads() []string {
	if x != nil {
		return x.TargetWorkloads
	}
	return nil
}

// Kubernetes ObjectMeta
type ObjectMeta struct {
	state           protoimpl.MessageState `protogen:"open.v1"`
	Name            string                 `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Namespace       string                 `protobuf:"bytes,2,opt,name=namespace,proto3" json:"namespace,omitempty"`
	Labels          map[string]string      `protobuf:"bytes,3,rep,name=labels,proto3" json:"labels,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	Annotations     map[string]string      `protobuf:"bytes,4,rep,name=annotations,proto3" json:"annotations,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	ResourceVersion string                 `protobuf:"bytes,5,opt,name=resource_version,json=resourceVersion,proto3" json:"resource_version,omitempty"`
	Uid             string                 `protobuf:"bytes,6,opt,name=uid,proto3" json:"uid,omitempty"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *ObjectMeta) Reset() {
	*x = ObjectMeta{}
	mi := &file_cloud_v1_message_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ObjectMeta) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ObjectMeta) ProtoMessage() {}

func (x *ObjectMeta) ProtoReflect() protoreflect.Message {
	mi := &file_cloud_v1_message_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ObjectMeta.ProtoReflect.Descriptor instead.
func (*ObjectMeta) Descriptor() ([]byte, []int) {
	return file_cloud_v1_message_proto_rawDescGZIP(), []int{8}
}

func (x *ObjectMeta) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ObjectMeta) GetNamespace() string {
	if x != nil {
		return x.Namespace
	}
	return ""
}

func (x *ObjectMeta) GetLabels() map[string]string {
	if x != nil {
		return x.Labels
	}
	return nil
}

func (x *ObjectMeta) GetAnnotations() map[string]string {
	if x != nil {
		return x.Annotations
	}
	return nil
}

func (x *ObjectMeta) GetResourceVersion() string {
	if x != nil {
		return x.ResourceVersion
	}
	return ""
}

func (x *ObjectMeta) GetUid() string {
	if x != nil {
		return x.Uid
	}
	return ""
}

// NetworkPolicy specification
type NetworkPolicySpec struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Selects the pods to which this NetworkPolicy object applies
	PodSelector *LabelSelector `protobuf:"bytes,1,opt,name=pod_selector,json=podSelector,proto3" json:"pod_selector,omitempty"`
	// List of ingress rules to be applied
	Ingress []*NetworkPolicyIngressRule `protobuf:"bytes,2,rep,name=ingress,proto3" json:"ingress,omitempty"`
	// List of egress rules to be applied
	Egress []*NetworkPolicyEgressRule `protobuf:"bytes,3,rep,name=egress,proto3" json:"egress,omitempty"`
	// List of rule types that the NetworkPolicy relates to
	// Valid options are ["Ingress"], ["Egress"], or ["Ingress", "Egress"]
	PolicyTypes   []string `protobuf:"bytes,4,rep,name=policy_types,json=policyTypes,proto3" json:"policy_types,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *NetworkPolicySpec) Reset() {
	*x = NetworkPolicySpec{}
	mi := &file_cloud_v1_message_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *NetworkPolicySpec) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NetworkPolicySpec) ProtoMessage() {}

func (x *NetworkPolicySpec) ProtoReflect() protoreflect.Message {
	mi := &file_cloud_v1_message_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NetworkPolicySpec.ProtoReflect.Descriptor instead.
func (*NetworkPolicySpec) Descriptor() ([]byte, []int) {
	return file_cloud_v1_message_proto_rawDescGZIP(), []int{9}
}

func (x *NetworkPolicySpec) GetPodSelector() *LabelSelector {
	if x != nil {
		return x.PodSelector
	}
	return nil
}

func (x *NetworkPolicySpec) GetIngress() []*NetworkPolicyIngressRule {
	if x != nil {
		return x.Ingress
	}
	return nil
}

func (x *NetworkPolicySpec) GetEgress() []*NetworkPolicyEgressRule {
	if x != nil {
		return x.Egress
	}
	return nil
}

func (x *NetworkPolicySpec) GetPolicyTypes() []string {
	if x != nil {
		return x.PolicyTypes
	}
	return nil
}

// Label selector for Kubernetes resources
type LabelSelector struct {
	state            protoimpl.MessageState      `protogen:"open.v1"`
	MatchLabels      map[string]string           `protobuf:"bytes,1,rep,name=match_labels,json=matchLabels,proto3" json:"match_labels,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	MatchExpressions []*LabelSelectorRequirement `protobuf:"bytes,2,rep,name=match_expressions,json=matchExpressions,proto3" json:"match_expressions,omitempty"`
	unknownFields    protoimpl.UnknownFields
	sizeCache        protoimpl.SizeCache
}

func (x *LabelSelector) Reset() {
	*x = LabelSelector{}
	mi := &file_cloud_v1_message_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *LabelSelector) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LabelSelector) ProtoMessage() {}

func (x *LabelSelector) ProtoReflect() protoreflect.Message {
	mi := &file_cloud_v1_message_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LabelSelector.ProtoReflect.Descriptor instead.
func (*LabelSelector) Descriptor() ([]byte, []int) {
	return file_cloud_v1_message_proto_rawDescGZIP(), []int{10}
}

func (x *LabelSelector) GetMatchLabels() map[string]string {
	if x != nil {
		return x.MatchLabels
	}
	return nil
}

func (x *LabelSelector) GetMatchExpressions() []*LabelSelectorRequirement {
	if x != nil {
		return x.MatchExpressions
	}
	return nil
}

type LabelSelectorRequirement struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Key           string                 `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	Operator      string                 `protobuf:"bytes,2,opt,name=operator,proto3" json:"operator,omitempty"` // In, NotIn, Exists, DoesNotExist
	Values        []string               `protobuf:"bytes,3,rep,name=values,proto3" json:"values,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *LabelSelectorRequirement) Reset() {
	*x = LabelSelectorRequirement{}
	mi := &file_cloud_v1_message_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *LabelSelectorRequirement) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LabelSelectorRequirement) ProtoMessage() {}

func (x *LabelSelectorRequirement) ProtoReflect() protoreflect.Message {
	mi := &file_cloud_v1_message_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LabelSelectorRequirement.ProtoReflect.Descriptor instead.
func (*LabelSelectorRequirement) Descriptor() ([]byte, []int) {
	return file_cloud_v1_message_proto_rawDescGZIP(), []int{11}
}

func (x *LabelSelectorRequirement) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

func (x *LabelSelectorRequirement) GetOperator() string {
	if x != nil {
		return x.Operator
	}
	return ""
}

func (x *LabelSelectorRequirement) GetValues() []string {
	if x != nil {
		return x.Values
	}
	return nil
}

// NetworkPolicy ingress rule
type NetworkPolicyIngressRule struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	From          []*NetworkPolicyPeer   `protobuf:"bytes,1,rep,name=from,proto3" json:"from,omitempty"`
	Ports         []*NetworkPolicyPort   `protobuf:"bytes,2,rep,name=ports,proto3" json:"ports,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *NetworkPolicyIngressRule) Reset() {
	*x = NetworkPolicyIngressRule{}
	mi := &file_cloud_v1_message_proto_msgTypes[12]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *NetworkPolicyIngressRule) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NetworkPolicyIngressRule) ProtoMessage() {}

func (x *NetworkPolicyIngressRule) ProtoReflect() protoreflect.Message {
	mi := &file_cloud_v1_message_proto_msgTypes[12]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NetworkPolicyIngressRule.ProtoReflect.Descriptor instead.
func (*NetworkPolicyIngressRule) Descriptor() ([]byte, []int) {
	return file_cloud_v1_message_proto_rawDescGZIP(), []int{12}
}

func (x *NetworkPolicyIngressRule) GetFrom() []*NetworkPolicyPeer {
	if x != nil {
		return x.From
	}
	return nil
}

func (x *NetworkPolicyIngressRule) GetPorts() []*NetworkPolicyPort {
	if x != nil {
		return x.Ports
	}
	return nil
}

// NetworkPolicy egress rule
type NetworkPolicyEgressRule struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	To            []*NetworkPolicyPeer   `protobuf:"bytes,1,rep,name=to,proto3" json:"to,omitempty"`
	Ports         []*NetworkPolicyPort   `protobuf:"bytes,2,rep,name=ports,proto3" json:"ports,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *NetworkPolicyEgressRule) Reset() {
	*x = NetworkPolicyEgressRule{}
	mi := &file_cloud_v1_message_proto_msgTypes[13]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *NetworkPolicyEgressRule) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NetworkPolicyEgressRule) ProtoMessage() {}

func (x *NetworkPolicyEgressRule) ProtoReflect() protoreflect.Message {
	mi := &file_cloud_v1_message_proto_msgTypes[13]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NetworkPolicyEgressRule.ProtoReflect.Descriptor instead.
func (*NetworkPolicyEgressRule) Descriptor() ([]byte, []int) {
	return file_cloud_v1_message_proto_rawDescGZIP(), []int{13}
}

func (x *NetworkPolicyEgressRule) GetTo() []*NetworkPolicyPeer {
	if x != nil {
		return x.To
	}
	return nil
}

func (x *NetworkPolicyEgressRule) GetPorts() []*NetworkPolicyPort {
	if x != nil {
		return x.Ports
	}
	return nil
}

// NetworkPolicy peer
type NetworkPolicyPeer struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Either pod_selector, namespace_selector, or ip_block should be specified
	PodSelector       *LabelSelector `protobuf:"bytes,1,opt,name=pod_selector,json=podSelector,proto3" json:"pod_selector,omitempty"`
	NamespaceSelector *LabelSelector `protobuf:"bytes,2,opt,name=namespace_selector,json=namespaceSelector,proto3" json:"namespace_selector,omitempty"`
	IpBlock           *IPBlock       `protobuf:"bytes,3,opt,name=ip_block,json=ipBlock,proto3" json:"ip_block,omitempty"`
	unknownFields     protoimpl.UnknownFields
	sizeCache         protoimpl.SizeCache
}

func (x *NetworkPolicyPeer) Reset() {
	*x = NetworkPolicyPeer{}
	mi := &file_cloud_v1_message_proto_msgTypes[14]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *NetworkPolicyPeer) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NetworkPolicyPeer) ProtoMessage() {}

func (x *NetworkPolicyPeer) ProtoReflect() protoreflect.Message {
	mi := &file_cloud_v1_message_proto_msgTypes[14]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NetworkPolicyPeer.ProtoReflect.Descriptor instead.
func (*NetworkPolicyPeer) Descriptor() ([]byte, []int) {
	return file_cloud_v1_message_proto_rawDescGZIP(), []int{14}
}

func (x *NetworkPolicyPeer) GetPodSelector() *LabelSelector {
	if x != nil {
		return x.PodSelector
	}
	return nil
}

func (x *NetworkPolicyPeer) GetNamespaceSelector() *LabelSelector {
	if x != nil {
		return x.NamespaceSelector
	}
	return nil
}

func (x *NetworkPolicyPeer) GetIpBlock() *IPBlock {
	if x != nil {
		return x.IpBlock
	}
	return nil
}

// IP CIDR block specification
type IPBlock struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Cidr          string                 `protobuf:"bytes,1,opt,name=cidr,proto3" json:"cidr,omitempty"`
	Except        []string               `protobuf:"bytes,2,rep,name=except,proto3" json:"except,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *IPBlock) Reset() {
	*x = IPBlock{}
	mi := &file_cloud_v1_message_proto_msgTypes[15]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *IPBlock) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IPBlock) ProtoMessage() {}

func (x *IPBlock) ProtoReflect() protoreflect.Message {
	mi := &file_cloud_v1_message_proto_msgTypes[15]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IPBlock.ProtoReflect.Descriptor instead.
func (*IPBlock) Descriptor() ([]byte, []int) {
	return file_cloud_v1_message_proto_rawDescGZIP(), []int{15}
}

func (x *IPBlock) GetCidr() string {
	if x != nil {
		return x.Cidr
	}
	return ""
}

func (x *IPBlock) GetExcept() []string {
	if x != nil {
		return x.Except
	}
	return nil
}

// NetworkPolicy port rule
type NetworkPolicyPort struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Protocol is optional; if not specified, applies to all protocols
	Protocol string `protobuf:"bytes,1,opt,name=protocol,proto3" json:"protocol,omitempty"` // TCP, UDP, SCTP, etc.
	// Port is optional; if not specified, matches all ports
	//
	// Types that are valid to be assigned to PortValue:
	//
	//	*NetworkPolicyPort_Port
	//	*NetworkPolicyPort_PortName
	PortValue isNetworkPolicyPort_PortValue `protobuf_oneof:"port_value"`
	// Port range (Kubernetes extension)
	EndPort       int32 `protobuf:"varint,4,opt,name=end_port,json=endPort,proto3" json:"end_port,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *NetworkPolicyPort) Reset() {
	*x = NetworkPolicyPort{}
	mi := &file_cloud_v1_message_proto_msgTypes[16]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *NetworkPolicyPort) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NetworkPolicyPort) ProtoMessage() {}

func (x *NetworkPolicyPort) ProtoReflect() protoreflect.Message {
	mi := &file_cloud_v1_message_proto_msgTypes[16]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NetworkPolicyPort.ProtoReflect.Descriptor instead.
func (*NetworkPolicyPort) Descriptor() ([]byte, []int) {
	return file_cloud_v1_message_proto_rawDescGZIP(), []int{16}
}

func (x *NetworkPolicyPort) GetProtocol() string {
	if x != nil {
		return x.Protocol
	}
	return ""
}

func (x *NetworkPolicyPort) GetPortValue() isNetworkPolicyPort_PortValue {
	if x != nil {
		return x.PortValue
	}
	return nil
}

func (x *NetworkPolicyPort) GetPort() int32 {
	if x != nil {
		if x, ok := x.PortValue.(*NetworkPolicyPort_Port); ok {
			return x.Port
		}
	}
	return 0
}

func (x *NetworkPolicyPort) GetPortName() string {
	if x != nil {
		if x, ok := x.PortValue.(*NetworkPolicyPort_PortName); ok {
			return x.PortName
		}
	}
	return ""
}

func (x *NetworkPolicyPort) GetEndPort() int32 {
	if x != nil {
		return x.EndPort
	}
	return 0
}

type isNetworkPolicyPort_PortValue interface {
	isNetworkPolicyPort_PortValue()
}

type NetworkPolicyPort_Port struct {
	Port int32 `protobuf:"varint,2,opt,name=port,proto3,oneof"`
}

type NetworkPolicyPort_PortName struct {
	PortName string `protobuf:"bytes,3,opt,name=port_name,json=portName,proto3,oneof"` // Named port on pods
}

func (*NetworkPolicyPort_Port) isNetworkPolicyPort_PortValue() {}

func (*NetworkPolicyPort_PortName) isNetworkPolicyPort_PortValue() {}

var File_cloud_v1_message_proto protoreflect.FileDescriptor

const file_cloud_v1_message_proto_rawDesc = "" +
	"\n" +
	"\x16cloud/v1/message.proto\x12\bcloud.v1\x1a\x1fgoogle/protobuf/timestamp.proto\"\xea\x01\n" +
	"\x11StreamDataRequest\x12$\n" +
	"\x04flow\x18\x01 \x01(\v2\x0e.cloud.v1.FlowH\x00R\x04flow\x12@\n" +
	"\x0enetwork_policy\x18\x02 \x01(\v2\x17.cloud.v1.NetworkPolicyH\x00R\rnetworkPolicy\x12b\n" +
	"\x1anetwork_policy_with_errors\x18\x03 \x01(\v2#.cloud.v1.NetworkPoliciesWithErrorsH\x00R\x17networkPolicyWithErrorsB\t\n" +
	"\arequest\"Y\n" +
	"\x19NetworkPoliciesWithErrors\x12<\n" +
	"\bpolicies\x18\x01 \x03(\v2 .cloud.v1.NetworkPolicyWithErrorR\bpolicies\"\x81\x01\n" +
	"\x16NetworkPolicyWithError\x12%\n" +
	"\x0enetwork_policy\x18\x01 \x01(\tR\rnetworkPolicy\x12#\n" +
	"\rerror_message\x18\x02 \x01(\tR\ferrorMessage\x12\x1b\n" +
	"\tpolicy_id\x18\x03 \x01(\tR\bpolicyId\"\xc4\x02\n" +
	"\x04Flow\x12$\n" +
	"\x03src\x18\x01 \x01(\v2\x12.cloud.v1.EndpointR\x03src\x12$\n" +
	"\x03dst\x18\x02 \x01(\v2\x12.cloud.v1.EndpointR\x03dst\x12\x1c\n" +
	"\tdirection\x18\x03 \x01(\tR\tdirection\x12\x12\n" +
	"\x04port\x18\x04 \x01(\rR\x04port\x12\x1a\n" +
	"\bprotocol\x18\x05 \x01(\tR\bprotocol\x12\x18\n" +
	"\aallowed\x18\x06 \x01(\bR\aallowed\x12\x14\n" +
	"\x05count\x18\a \x01(\x03R\x05count\x129\n" +
	"\n" +
	"first_seen\x18\b \x01(\v2\x1a.google.protobuf.TimestampR\tfirstSeen\x127\n" +
	"\tlast_seen\x18\t \x01(\v2\x1a.google.protobuf.TimestampR\blastSeen\"Z\n" +
	"\bEndpoint\x12\x0e\n" +
	"\x02ns\x18\x01 \x01(\tR\x02ns\x12\x12\n" +
	"\x04kind\x18\x02 \x01(\tR\x04kind\x12\x12\n" +
	"\x04name\x18\x03 \x01(\tR\x04name\x12\x16\n" +
	"\x06labels\x18\x04 \x03(\tR\x06labels\"\x8e\x01\n" +
	"\x12StreamDataResponse\x12!\n" +
	"\x03ack\x18\x01 \x01(\v2\r.cloud.v1.AckH\x00R\x03ack\x12I\n" +
	"\x0enetwork_policy\x18\x02 \x01(\v2 .cloud.v1.NetworkPolicyWithErrorH\x00R\rnetworkPolicyB\n" +
	"\n" +
	"\bresponse\"\x05\n" +
	"\x03Ack\"\x9d\x01\n" +
	"\rNetworkPolicy\x120\n" +
	"\bmetadata\x18\x01 \x01(\v2\x14.cloud.v1.ObjectMetaR\bmetadata\x12/\n" +
	"\x04spec\x18\x02 \x01(\v2\x1b.cloud.v1.NetworkPolicySpecR\x04spec\x12)\n" +
	"\x10target_workloads\x18\x03 \x03(\tR\x0ftargetWorkloads\"\xf9\x02\n" +
	"\n" +
	"ObjectMeta\x12\x12\n" +
	"\x04name\x18\x01 \x01(\tR\x04name\x12\x1c\n" +
	"\tnamespace\x18\x02 \x01(\tR\tnamespace\x128\n" +
	"\x06labels\x18\x03 \x03(\v2 .cloud.v1.ObjectMeta.LabelsEntryR\x06labels\x12G\n" +
	"\vannotations\x18\x04 \x03(\v2%.cloud.v1.ObjectMeta.AnnotationsEntryR\vannotations\x12)\n" +
	"\x10resource_version\x18\x05 \x01(\tR\x0fresourceVersion\x12\x10\n" +
	"\x03uid\x18\x06 \x01(\tR\x03uid\x1a9\n" +
	"\vLabelsEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\tR\x05value:\x028\x01\x1a>\n" +
	"\x10AnnotationsEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\tR\x05value:\x028\x01\"\xeb\x01\n" +
	"\x11NetworkPolicySpec\x12:\n" +
	"\fpod_selector\x18\x01 \x01(\v2\x17.cloud.v1.LabelSelectorR\vpodSelector\x12<\n" +
	"\aingress\x18\x02 \x03(\v2\".cloud.v1.NetworkPolicyIngressRuleR\aingress\x129\n" +
	"\x06egress\x18\x03 \x03(\v2!.cloud.v1.NetworkPolicyEgressRuleR\x06egress\x12!\n" +
	"\fpolicy_types\x18\x04 \x03(\tR\vpolicyTypes\"\xed\x01\n" +
	"\rLabelSelector\x12K\n" +
	"\fmatch_labels\x18\x01 \x03(\v2(.cloud.v1.LabelSelector.MatchLabelsEntryR\vmatchLabels\x12O\n" +
	"\x11match_expressions\x18\x02 \x03(\v2\".cloud.v1.LabelSelectorRequirementR\x10matchExpressions\x1a>\n" +
	"\x10MatchLabelsEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\tR\x05value:\x028\x01\"`\n" +
	"\x18LabelSelectorRequirement\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12\x1a\n" +
	"\boperator\x18\x02 \x01(\tR\boperator\x12\x16\n" +
	"\x06values\x18\x03 \x03(\tR\x06values\"~\n" +
	"\x18NetworkPolicyIngressRule\x12/\n" +
	"\x04from\x18\x01 \x03(\v2\x1b.cloud.v1.NetworkPolicyPeerR\x04from\x121\n" +
	"\x05ports\x18\x02 \x03(\v2\x1b.cloud.v1.NetworkPolicyPortR\x05ports\"y\n" +
	"\x17NetworkPolicyEgressRule\x12+\n" +
	"\x02to\x18\x01 \x03(\v2\x1b.cloud.v1.NetworkPolicyPeerR\x02to\x121\n" +
	"\x05ports\x18\x02 \x03(\v2\x1b.cloud.v1.NetworkPolicyPortR\x05ports\"\xc5\x01\n" +
	"\x11NetworkPolicyPeer\x12:\n" +
	"\fpod_selector\x18\x01 \x01(\v2\x17.cloud.v1.LabelSelectorR\vpodSelector\x12F\n" +
	"\x12namespace_selector\x18\x02 \x01(\v2\x17.cloud.v1.LabelSelectorR\x11namespaceSelector\x12,\n" +
	"\bip_block\x18\x03 \x01(\v2\x11.cloud.v1.IPBlockR\aipBlock\"5\n" +
	"\aIPBlock\x12\x12\n" +
	"\x04cidr\x18\x01 \x01(\tR\x04cidr\x12\x16\n" +
	"\x06except\x18\x02 \x03(\tR\x06except\"\x8d\x01\n" +
	"\x11NetworkPolicyPort\x12\x1a\n" +
	"\bprotocol\x18\x01 \x01(\tR\bprotocol\x12\x14\n" +
	"\x04port\x18\x02 \x01(\x05H\x00R\x04port\x12\x1d\n" +
	"\tport_name\x18\x03 \x01(\tH\x00R\bportName\x12\x19\n" +
	"\bend_port\x18\x04 \x01(\x05R\aendPortB\f\n" +
	"\n" +
	"port_value2^\n" +
	"\rStreamService\x12M\n" +
	"\n" +
	"StreamData\x12\x1b.cloud.v1.StreamDataRequest\x1a\x1c.cloud.v1.StreamDataResponse\"\x00(\x010\x01Bt\n" +
	"\fcom.cloud.v1B\fMessageProtoP\x01Z\x15operator/api/cloud/v1\xa2\x02\x03CXX\xaa\x02\bCloud.V1\xca\x02\bCloud\\V1\xe2\x02\x14Cloud\\V1\\GPBMetadata\xea\x02\tCloud::V1b\x06proto3"

var (
	file_cloud_v1_message_proto_rawDescOnce sync.Once
	file_cloud_v1_message_proto_rawDescData []byte
)

func file_cloud_v1_message_proto_rawDescGZIP() []byte {
	file_cloud_v1_message_proto_rawDescOnce.Do(func() {
		file_cloud_v1_message_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_cloud_v1_message_proto_rawDesc), len(file_cloud_v1_message_proto_rawDesc)))
	})
	return file_cloud_v1_message_proto_rawDescData
}

var file_cloud_v1_message_proto_msgTypes = make([]protoimpl.MessageInfo, 20)
var file_cloud_v1_message_proto_goTypes = []any{
	(*StreamDataRequest)(nil),         // 0: cloud.v1.StreamDataRequest
	(*NetworkPoliciesWithErrors)(nil), // 1: cloud.v1.NetworkPoliciesWithErrors
	(*NetworkPolicyWithError)(nil),    // 2: cloud.v1.NetworkPolicyWithError
	(*Flow)(nil),                      // 3: cloud.v1.Flow
	(*Endpoint)(nil),                  // 4: cloud.v1.Endpoint
	(*StreamDataResponse)(nil),        // 5: cloud.v1.StreamDataResponse
	(*Ack)(nil),                       // 6: cloud.v1.Ack
	(*NetworkPolicy)(nil),             // 7: cloud.v1.NetworkPolicy
	(*ObjectMeta)(nil),                // 8: cloud.v1.ObjectMeta
	(*NetworkPolicySpec)(nil),         // 9: cloud.v1.NetworkPolicySpec
	(*LabelSelector)(nil),             // 10: cloud.v1.LabelSelector
	(*LabelSelectorRequirement)(nil),  // 11: cloud.v1.LabelSelectorRequirement
	(*NetworkPolicyIngressRule)(nil),  // 12: cloud.v1.NetworkPolicyIngressRule
	(*NetworkPolicyEgressRule)(nil),   // 13: cloud.v1.NetworkPolicyEgressRule
	(*NetworkPolicyPeer)(nil),         // 14: cloud.v1.NetworkPolicyPeer
	(*IPBlock)(nil),                   // 15: cloud.v1.IPBlock
	(*NetworkPolicyPort)(nil),         // 16: cloud.v1.NetworkPolicyPort
	nil,                               // 17: cloud.v1.ObjectMeta.LabelsEntry
	nil,                               // 18: cloud.v1.ObjectMeta.AnnotationsEntry
	nil,                               // 19: cloud.v1.LabelSelector.MatchLabelsEntry
	(*timestamppb.Timestamp)(nil),     // 20: google.protobuf.Timestamp
}
var file_cloud_v1_message_proto_depIdxs = []int32{
	3,  // 0: cloud.v1.StreamDataRequest.flow:type_name -> cloud.v1.Flow
	7,  // 1: cloud.v1.StreamDataRequest.network_policy:type_name -> cloud.v1.NetworkPolicy
	1,  // 2: cloud.v1.StreamDataRequest.network_policy_with_errors:type_name -> cloud.v1.NetworkPoliciesWithErrors
	2,  // 3: cloud.v1.NetworkPoliciesWithErrors.policies:type_name -> cloud.v1.NetworkPolicyWithError
	4,  // 4: cloud.v1.Flow.src:type_name -> cloud.v1.Endpoint
	4,  // 5: cloud.v1.Flow.dst:type_name -> cloud.v1.Endpoint
	20, // 6: cloud.v1.Flow.first_seen:type_name -> google.protobuf.Timestamp
	20, // 7: cloud.v1.Flow.last_seen:type_name -> google.protobuf.Timestamp
	6,  // 8: cloud.v1.StreamDataResponse.ack:type_name -> cloud.v1.Ack
	2,  // 9: cloud.v1.StreamDataResponse.network_policy:type_name -> cloud.v1.NetworkPolicyWithError
	8,  // 10: cloud.v1.NetworkPolicy.metadata:type_name -> cloud.v1.ObjectMeta
	9,  // 11: cloud.v1.NetworkPolicy.spec:type_name -> cloud.v1.NetworkPolicySpec
	17, // 12: cloud.v1.ObjectMeta.labels:type_name -> cloud.v1.ObjectMeta.LabelsEntry
	18, // 13: cloud.v1.ObjectMeta.annotations:type_name -> cloud.v1.ObjectMeta.AnnotationsEntry
	10, // 14: cloud.v1.NetworkPolicySpec.pod_selector:type_name -> cloud.v1.LabelSelector
	12, // 15: cloud.v1.NetworkPolicySpec.ingress:type_name -> cloud.v1.NetworkPolicyIngressRule
	13, // 16: cloud.v1.NetworkPolicySpec.egress:type_name -> cloud.v1.NetworkPolicyEgressRule
	19, // 17: cloud.v1.LabelSelector.match_labels:type_name -> cloud.v1.LabelSelector.MatchLabelsEntry
	11, // 18: cloud.v1.LabelSelector.match_expressions:type_name -> cloud.v1.LabelSelectorRequirement
	14, // 19: cloud.v1.NetworkPolicyIngressRule.from:type_name -> cloud.v1.NetworkPolicyPeer
	16, // 20: cloud.v1.NetworkPolicyIngressRule.ports:type_name -> cloud.v1.NetworkPolicyPort
	14, // 21: cloud.v1.NetworkPolicyEgressRule.to:type_name -> cloud.v1.NetworkPolicyPeer
	16, // 22: cloud.v1.NetworkPolicyEgressRule.ports:type_name -> cloud.v1.NetworkPolicyPort
	10, // 23: cloud.v1.NetworkPolicyPeer.pod_selector:type_name -> cloud.v1.LabelSelector
	10, // 24: cloud.v1.NetworkPolicyPeer.namespace_selector:type_name -> cloud.v1.LabelSelector
	15, // 25: cloud.v1.NetworkPolicyPeer.ip_block:type_name -> cloud.v1.IPBlock
	0,  // 26: cloud.v1.StreamService.StreamData:input_type -> cloud.v1.StreamDataRequest
	5,  // 27: cloud.v1.StreamService.StreamData:output_type -> cloud.v1.StreamDataResponse
	27, // [27:28] is the sub-list for method output_type
	26, // [26:27] is the sub-list for method input_type
	26, // [26:26] is the sub-list for extension type_name
	26, // [26:26] is the sub-list for extension extendee
	0,  // [0:26] is the sub-list for field type_name
}

func init() { file_cloud_v1_message_proto_init() }
func file_cloud_v1_message_proto_init() {
	if File_cloud_v1_message_proto != nil {
		return
	}
	file_cloud_v1_message_proto_msgTypes[0].OneofWrappers = []any{
		(*StreamDataRequest_Flow)(nil),
		(*StreamDataRequest_NetworkPolicy)(nil),
		(*StreamDataRequest_NetworkPolicyWithErrors)(nil),
	}
	file_cloud_v1_message_proto_msgTypes[5].OneofWrappers = []any{
		(*StreamDataResponse_Ack)(nil),
		(*StreamDataResponse_NetworkPolicy)(nil),
	}
	file_cloud_v1_message_proto_msgTypes[16].OneofWrappers = []any{
		(*NetworkPolicyPort_Port)(nil),
		(*NetworkPolicyPort_PortName)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_cloud_v1_message_proto_rawDesc), len(file_cloud_v1_message_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   20,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_cloud_v1_message_proto_goTypes,
		DependencyIndexes: file_cloud_v1_message_proto_depIdxs,
		MessageInfos:      file_cloud_v1_message_proto_msgTypes,
	}.Build()
	File_cloud_v1_message_proto = out.File
	file_cloud_v1_message_proto_goTypes = nil
	file_cloud_v1_message_proto_depIdxs = nil
}
